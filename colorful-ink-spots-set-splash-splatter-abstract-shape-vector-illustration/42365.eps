%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1511.m00.i125.n066.P.c25.285392033 Colorful ink spots set vector.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Антон
%%CreationDate: 11/25/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1511.m00.i125.n066.P.c25.285392033 Colorful ink spots set vector</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-11-25T08:57:06+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-11-25T08:57:06+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-11-25T08:57:06+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqh9Q1C00+0e7u5PSt46c3oTTkQo2AJ6nIZMggLPJjKQiLKpbXENzbx3EDc&#xA;4ZVDxvQiqsKg0NDhjISFjkkGxapkkuxV2KuxV2KuxV2KuxV2KpXf+Y9Osp7i3kLNPbw+s6gbU2AW&#xA;vieQzW6ntXFilKJvijHi/Y5mHQ5MgEhykaRthcTXNnFPND6Ekq8jFy5cQelTQdvbMvTZZZMYlIcJ&#xA;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&#xA;irsVdir/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:5dc06bbf-218c-a341-9a22-08bef950f008</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:5dc06bbf-218c-a341-9a22-08bef950f008</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3dac9d9e-e308-47ac-b80d-4d147e8ebf3c</stRef:instanceID>
            <stRef:documentID>xmp.did:f07c2516-0903-a147-8610-ea2b0842cf0f</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5dc06bbf-218c-a341-9a22-08bef950f008</stEvt:instanceID>
                  <stEvt:when>2015-11-25T08:57:06+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>РћС‚С‚РµРЅРєРё СЃРµСЂРѕРіРѕ</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
26.5535 52.3117 mo
28.0887 53.2286 30.4692 52.8068 32.1342 52.5851 cv
31.106 51.6576 29.8983 52.2274 28.7212 51.6581 cv
27.7971 51.21 26.947 48.9035 25.8206 49.2671 cv
24.0808 49.8287 25.6356 51.7634 26.5535 52.3117 cv
cp
31.6894 71.9979 mo
28.7565 72.5646 26.124 72.0718 23.1854 72.1345 cv
22.1463 72.1567 16.5952 72.6563 18.222 74.0732 cv
20.0248 75.6423 24.6038 73.8793 26.554 73.4044 cv
31.0757 72.303 35.5527 72.9132 40.0767 72.5424 cv
37.4738 70.4256 34.6581 71.4243 31.6894 71.9979 cv
cp
118.27 29.9774 mo
119.613 28.8268 121.625 28.3413 119.487 26.3682 cv
114.759 22.0043 113.535 35.4994 112.29 35.7765 cv
115.193 35.1306 116.252 31.707 118.27 29.9774 cv
cp
14.0934 95.4391 mo
16.8212 96.6229 19.6907 94.476 22.3403 94.2633 cv
24.1027 94.1218 26.0156 94.9116 25.4461 92.0588 cv
24.1865 85.749 15.2637 95.947 14.0934 95.4391 cv
cp
72.4742 31.7635 mo
73.8748 31.5978 74.1459 29.6467 74.1623 29.0557 cv
74.1772 28.4977 74.3555 27.7246 73.7026 27.1934 cv
73.6143 27.1215 71.6494 26.0319 71.48 26.4214 cv
71.3079 26.8173 71.4862 27.6913 71.0868 28.0038 cv
70.4791 28.4792 69.3391 28.3922 68.7806 28.9 cv
67.968 29.6389 70.5253 31.9941 72.4742 31.7635 cv
cp
67.0173 116.79 mo
66.398 120.714 65.3118 124.04 63.8707 127.795 cv
63.4216 128.966 59.8326 137.254 62.4644 136.812 cv
66.17 136.189 67.9016 121.414 68.7773 118.461 cv
69.7672 115.124 70.963 111.028 70.7032 107.544 cv
68.1632 108.748 67.4235 114.216 67.0173 116.79 cv
cp
131.883 48.6017 mo
130.512 49.7204 127.595 51.8085 128.785 53.9929 cv
129.977 56.1817 132.748 53.7486 133.496 52.3196 cv
135.002 49.4429 135.856 45.3607 131.883 48.6017 cv
cp
8.71869 76.7665 mo
9.47662 78.6967 12.2769 76.2197 11.4955 74.8875 cv
10.5206 73.2255 8.17981 75.3941 8.71869 76.7665 cv
cp
16.6266 74.9613 mo
15.8476 72.8172 13.6594 76.0027 13.4302 75.7133 cv
14.2288 76.7217 17.2897 76.7863 16.6266 74.9613 cv
cp
128.01 76.9863 mo
127.342 79.96 132.791 79.2534 132.938 76.9881 cv
133.122 74.162 128.485 74.872 128.01 76.9863 cv
cp
134.612 79.5876 mo
134.753 81.473 138.425 84.0744 139.122 81.3068 cv
139.941 78.0554 134.653 80.1287 134.612 79.5876 cv
cp
66.5072 135.731 mo
64.6806 136.219 62.8054 140.309 65.6542 140.481 cv
69.0011 140.683 65.983 135.871 66.5072 135.731 cv
cp
98.2255 26.0655 mo
98.4031 23.6987 100.299 19.311 98.5729 17.186 cv
95.5882 13.5106 95.4432 25.1022 95.217 27.0202 cv
94.9094 29.6284 93.6178 33.0615 94.6377 35.4171 cv
97.3228 32.9833 97.9658 29.5235 98.2255 26.0655 cv
cp
54.989 100.812 mo
53.8082 98.4854 50.4091 102.342 49.9445 103.329 cv
49.2318 104.847 48.4183 107.46 50.2776 108.567 cv
51.4323 109.254 53.8117 109.666 54.2362 108.068 cv
54.6533 106.498 52.3812 105.595 53.0195 104.092 cv
53.4013 103.193 55.5447 101.906 54.989 100.812 cv
cp
126.53 69.4212 mo
125.559 70.3137 124.247 71.0515 123.441 71.8273 cv
120.324 74.8293 124.046 72.9923 124.038 75.0851 cv
124.031 76.8023 121.806 75.8017 120.697 76.0629 cv
115.108 77.3792 118.907 84.177 123.018 84.5959 cv
124.566 84.7537 126.498 83.7908 127.991 84.3996 cv
129.46 84.9994 129.694 85.9544 128.642 87.2496 cv
127.343 88.8505 125.88 88.2136 124.266 87.9053 cv
122.527 87.573 123.062 87.5845 121.551 88.3358 cv
120.061 89.0774 120.035 89.0312 118.308 89.0323 cv
115.04 89.0345 113.739 92.3262 115.926 94.9434 cv
117.765 97.1436 128.098 97.4764 126.056 101.715 cv
124.662 104.609 121.654 102.31 120.028 100.973 cv
119.601 100.622 113.466 96.4198 113.58 97.5932 cv
114.011 102.065 110.91 98.3669 109.239 98.8271 cv
109.261 100.095 110.915 101.553 109.967 102.718 cv
108.382 104.667 106.856 101.548 105.86 100.906 cv
104.05 99.7411 101.892 100.83 101.654 102.992 cv
101.305 106.174 105.088 109.322 106.65 111.82 cv
108.627 114.982 108.608 118.247 106.186 121.204 cv
101.76 126.607 91.154 126.063 86.4202 121.265 cv
84.0031 118.815 83.1063 115.009 82.3826 111.763 cv
82.0592 110.312 82.3117 106.225 80.3314 105.951 cv
78.4839 105.696 77.1598 108.969 77.0232 110.313 cv
76.9062 111.464 77.4996 120.915 73.986 117.734 cv
70.5097 114.586 77.0097 108.08 75.0344 104.748 cv
73.934 102.891 73.9542 104.488 72.3863 104.679 cv
70.1324 104.953 72.0447 104.173 70.5887 103.111 cv
67.9461 101.184 68.5043 107.571 65.2614 105.78 cv
65.1525 103.876 66.5602 102.2 65.8089 100.277 cv
62.0674 99.6426 58.7506 105.431 57.617 108.27 cv
56.8293 110.243 56.7379 112.856 55.7523 114.684 cv
53.9762 117.976 51.0113 116.244 51.6466 112.892 cv
52.5304 108.228 63.3224 98.8334 57.2761 93.8671 cv
56.2911 93.0586 56.1854 93.3564 55.0116 93.0051 cv
53.1645 92.4524 54.1652 93.1281 53.244 91.6592 cv
53.029 91.3163 53.4987 90.6199 53.1489 90.2765 cv
52.724 89.8591 52.3509 90.4879 52.0368 90.317 cv
51.1473 89.8331 50.4363 90.4785 50.1374 89.1582 cv
49.7565 87.4757 52.701 85.6543 51.7081 83.8265 cv
50.7364 82.0378 48.1513 83.2838 46.8708 83.9069 cv
43.4955 85.5493 40.5981 88.8367 37.0482 89.9931 cv
35.2465 90.5798 32.3538 90.596 32.9791 87.9667 cv
34.0575 83.4318 44.3966 82.8087 47.713 80.1421 cv
52.3292 76.4305 45.8004 78.7959 45.7063 76.2102 cv
45.5973 73.2128 50.9538 73.7653 51.6752 71.1072 cv
53.275 65.2131 44.5853 68.6121 42.1701 68.0952 cv
40.4154 67.7196 40.6975 66.2383 41.9132 65.0837 cv
43.2798 63.7861 45.6761 63.0872 43.8505 61.1883 cv
42.3815 59.6605 40.0986 59.8644 38.7402 57.8346 cv
37.3658 55.7809 36.6483 51.721 40.2332 53.0129 cv
44.0071 54.376 45.5954 58.6198 49.0743 60.3686 cv
50.2192 60.9441 52.2157 61.7719 53.2185 60.5744 cv
53.9864 59.6573 52.8111 59.0897 53.1769 58.2198 cv
53.4942 57.4653 54.5225 57.0869 55.206 56.7734 cv
57.2794 55.8223 56.9646 56.23 56.9331 54.0579 cv
56.8971 51.5869 56.9736 53.0131 59.0751 52.2986 cv
62.0446 51.289 60.6932 47.9352 58.7296 46.8586 cv
56.2331 45.4899 53.1492 45.6224 51.0883 43.4098 cv
48.4983 40.629 49.8344 36.5461 53.3301 39.8085 cv
54.4588 40.8619 59.1902 47.587 61.3983 45.392 cv
62.4749 44.3218 60.3131 41.0868 60.0944 39.7716 cv
62.0822 39.4241 63.9229 43.876 65.4801 42.2981 cv
66.5757 41.1881 64.5028 38.7567 64.07 37.7872 cv
63.0685 35.5438 62.5814 32.9348 62.7788 30.4803 cv
65.0256 30.5765 66.051 35.4518 66.8722 37.1689 cv
67.6573 38.8105 70.9646 40.4194 70.2123 37.2937 cv
71.9211 36.8987 71.6288 38.9256 73.0262 39.1175 cv
75.2911 39.4277 74.6085 36.3037 75.3003 35.0725 cv
75.7426 34.2852 76.3571 33.239 77.5203 33.831 cv
78.6113 34.3863 77.4818 35.9267 78.6197 36.5217 cv
79.7181 37.0961 80.2043 35.369 81.2208 35.386 cv
82.6061 35.4091 82.8132 37.8799 84.22 35.0781 cv
85.3106 32.9061 83.1229 31.5359 83.4727 29.4814 cv
83.7322 27.9576 85.5601 26.8752 86.8945 27.9031 cv
87.9519 28.7176 87.8355 30.8462 87.7508 32.008 cv
87.6896 32.8489 86.57 35.9385 87.656 36.4974 cv
88.7752 37.0734 88.7439 34.5908 90.034 35.1823 cv
92.1068 36.1326 88.6106 39.044 92.2197 40.2466 cv
93.3643 40.6281 94.3383 40.5466 95.3715 41.2459 cv
98.6736 43.481 97.7841 41.8941 100.55 40.4109 cv
102.365 39.4375 101.704 41.8477 101.805 43.2194 cv
105.385 42.9753 104.324 38.1016 106.58 36.5064 cv
110.817 33.5096 106.309 42.5119 105.885 43.4827 cv
105.181 45.0922 105.44 46.6732 107.094 47.4487 cv
111.112 49.3329 113.98 42.331 115.878 39.8391 cv
117.285 37.9909 121.31 32.8103 123.391 36.7231 cv
125.5 40.6887 117.827 45.4451 116.254 48.5727 cv
117.721 49.2035 121.413 45.5582 121.641 48.5244 cv
121.8 50.6006 118.06 50.6517 118.119 53.1306 cv
123.03 52.3814 113.809 58.6351 118.999 59.5569 cv
121.3 59.9654 122.715 57.3383 124.777 56.8605 cv
127.383 56.2567 128.493 58.3627 126.642 60.2006 cv
125.258 61.5744 122.74 61.8612 122.678 64.2261 cv
124.599 64.8854 126.507 63.2504 127.6 66.1438 cv
128.116 67.51 127.489 68.5408 126.53 69.4212 cv
cp
level3{
gsave
clp
[4.59932e-009 102.207 -102.207 4.59932e-009 73.9237 24 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.894118 .337255 .498039 ]
/C1 [.894118 .0352941 .498039 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.59932e-009 102.207 -102.207 4.59932e-009 73.9237 24 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
228 <~<`N."<)cgq;c?Rl;Gp@h;,C(c:JXb^:/4PY9he;T9MA)P91hfK8P)KF84Z9A7n6$<7Rfg8779O36UO4.
6:+")5s[b$5X7Ou5<_7p4Ztqk4?P_f4$,Ja3]]8]3B/uX2`EZS2E!HN2)R3I1c.!E1GU^@0ekC;0JG16
0/"q1/hJY,/M&G(.k<,".Olns.4HYn-mpAi-RL/e,pai_,U=W[,9nBV+sA*Q+WqmM+!2RG*Zc@C*??+>
*#fh9)]BV5)&X;/(`4)+(Ddi&()7Q!'bh>r',)#l&eYfh&J5Qc&.]9^%h9'Z%1NaT$k*OP$O[:K$4."F
~>
127 ]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
240.612 129.257 mo
240.701 129.347 240.799 129.428 240.907 129.498 cv
242.146 130.298 243.162 128.507 243.709 127.584 cv
244.671 125.965 246.214 121.865 245.006 120.2 cv
244.278 119.196 242.415 119.513 241.407 119.865 cv
239.616 120.489 237.027 122.069 236.641 124.097 cv
236.345 125.653 237.518 125.843 238.617 126.432 cv
239.68 127.001 239.834 128.471 240.612 129.257 cv
cp
246.452 137.822 mo
246.042 138.698 245.586 139.532 246.546 140.391 cv
247.914 141.617 249.996 140.689 250.103 138.904 cv
250.195 137.361 248.908 135.546 247.779 134.64 cv
247.112 134.105 246.888 133.761 246.653 132.915 cv
246.477 132.279 246.436 130.604 245.654 130.327 cv
244.669 129.978 244.516 131.388 244.582 132.059 cv
244.715 133.422 245.657 134.37 246.451 135.389 cv
247.131 136.263 246.809 137.058 246.452 137.822 cv
cp
247.785 142.067 mo
246.674 145.246 250.87 146.887 251.832 143.812 cv
252.697 141.045 248.931 138.789 247.785 142.067 cv
cp
237.79 112.903 mo
236.678 116.082 240.874 117.724 241.836 114.649 cv
242.702 111.882 238.935 109.626 237.79 112.903 cv
cp
259.149 28.2715 mo
260.565 27.3776 264.341 25.7893 263.595 23.5466 cv
263.258 22.5361 262.805 22.0263 262.297 21.8738 cv
259.53 21.0433 255.138 30.803 259.149 28.2715 cv
cp
225.498 17.9165 mo
225.396 15.8834 227.58 12.7958 226.669 11.1095 cv
225.842 9.57757 224.021 9.5908 222.815 10.519 cv
220.166 12.5594 221.401 21.0833 223.249 23.3485 cv
227.228 28.2268 225.594 19.8499 225.498 17.9165 cv
cp
204.174 21.8475 mo
204.567 23.5918 206.514 25.0259 207.822 26.0796 cv
207.785 24.6954 206.54 24.213 206.141 22.9678 cv
205.829 21.9893 206.914 19.7837 205.875 19.2182 cv
204.269 18.3446 203.938 20.8045 204.174 21.8475 cv
cp
193.449 39.1363 mo
191.017 37.4017 189.56 35.1546 187.489 33.0685 cv
186.757 32.3308 182.569 28.6529 182.664 30.8082 cv
182.769 33.1959 187.202 35.2987 188.891 36.3845 cv
192.805 38.9018 195.448 42.5664 198.835 45.5889 cv
198.575 42.2439 195.91 40.8921 193.449 39.1363 cv
cp
175.428 48.2853 mo
174.898 45.3594 171.519 44.1653 169.87 42.08 cv
168.774 40.6929 168.368 38.6635 166.312 40.7214 cv
161.764 45.273 175.2 47.03 175.428 48.2853 cv
cp
174.163 25.7783 mo
173.286 27.6577 177.011 27.9797 177.438 26.4954 cv
177.97 24.6436 174.786 24.442 174.163 25.7783 cv
cp
180.921 30.2642 mo
181.937 28.2221 178.121 28.8319 178.173 28.4664 cv
177.992 29.74 180.055 32.0025 180.921 30.2642 cv
cp
178.44 89.7133 mo
175.061 91.803 171.831 93.1482 168.044 94.5044 cv
166.864 94.927 158.24 97.6102 160.291 99.3173 cv
163.179 101.721 175.511 93.3991 178.32 92.1377 cv
181.496 90.7119 185.381 88.9477 187.853 86.4792 cv
185.284 85.3386 180.656 88.3431 178.44 89.7133 cv
cp
163.747 101.677 mo
162.186 100.611 157.862 101.857 159.589 104.128 cv
161.619 106.797 163.299 101.371 163.747 101.677 cv
cp
279.785 98.0921 mo
281.342 93.4332 281.248 88.1056 278.225 85.4588 cv
276.544 83.9878 274.476 83.258 273.308 85.5798 cv
272.2 87.7831 273.004 90.0878 273.509 92.2971 cv
273.99 94.4021 274.287 96.5194 273.151 98.3636 cv
272.075 100.112 270.523 101.655 270.68 103.889 cv
270.818 105.849 272.104 107.023 273.928 106.089 cv
276.46 104.793 278.6 101.636 279.785 98.0921 cv
cp
271.678 50.2257 mo
277.829 47.3951 270.117 36.2589 265.558 38.1982 cv
263.309 39.1548 263.241 42.0295 263.015 44.0876 cv
262.773 46.2896 259.474 48.5665 260.117 50.4628 cv
260.503 51.6008 262.311 52.3041 263.404 52.012 cv
264.774 51.6457 264.556 50.3645 265.476 49.7686 cv
267.545 48.4277 269.351 51.2967 271.678 50.2257 cv
cp
184.41 108.154 mo
190.61 110.911 203.143 100.809 195.128 93.3821 cv
189.612 88.2714 180.782 97.0436 181.316 102.969 cv
181.57 105.792 182.768 107.424 184.41 108.154 cv
cp
268.066 72.2504 mo
267.906 72.5893 267.476 72.9641 266.678 73.3819 cv
264.003 74.7839 259.129 72.389 261.112 78.0103 cv
261.853 80.1107 265.517 81.8657 265.022 84.2949 cv
264.365 87.5226 259.419 85.8104 260.066 89.9461 cv
258.97 89.8311 256.818 89.6162 255.947 90.4622 cv
254.559 91.8087 256.07 92.2047 255.816 93.1888 cv
254.749 97.3131 253.701 94.59 250.559 96.0569 cv
252.455 100.319 249.451 99.3809 246.55 99.7171 cv
246.346 104.349 247.603 107.359 250.94 110.396 cv
253.253 112.5 257.535 115.444 254.874 118.866 cv
248.978 126.444 241.373 103.711 237.858 101.871 cv
233.031 99.3452 235.421 104.122 233.121 105.093 cv
231.548 105.757 231.513 101.739 229.645 102.121 cv
227.772 102.504 229.331 106.892 227.179 106.944 cv
224.86 107 226.513 102.121 223.358 105.167 cv
221.402 107.055 222.292 110.657 222.246 113.014 cv
222.195 115.642 221.466 117.87 221.049 120.415 cv
220.87 121.506 220.173 135.735 217.636 131.942 cv
215.818 129.225 217.541 125.635 217.704 122.732 cv
217.857 120.028 216.905 117.72 217.273 115.095 cv
217.786 111.434 221.669 104.649 215.67 103.365 cv
213.321 102.862 210.952 104.984 210.775 101.391 cv
207.099 101.355 206.698 103.428 204.672 105.782 cv
203.414 107.243 199.852 109.926 200.14 106.324 cv
200.423 102.775 208.959 101.071 208.057 97.2903 cv
207.726 95.9009 205.193 96.0659 204.739 94.7776 cv
204.087 92.9276 207.693 90.0933 206.653 88.3563 cv
206.317 87.7952 203.249 87.4366 203.217 87.6158 cv
203.956 83.4972 202.19 84.6463 199.92 82.9007 cv
196.909 80.5852 200.554 81.5482 199.491 78.3833 cv
198.009 73.975 191.912 80.4328 189.724 81.0094 cv
183.612 82.6197 186.816 77.1573 190.303 75.7113 cv
191.941 75.0322 193.598 74.7115 195.153 73.8059 cv
197.641 72.3565 197.049 72.4837 197.324 70.4363 cv
197.408 69.8084 196.125 69.3588 196.369 68.3618 cv
196.574 67.5232 198.314 67.5474 198.63 66.8325 cv
199.988 63.75 195.154 59.9021 196.549 57.3901 cv
198.364 54.1229 195.218 53.0519 192.712 52.1913 cv
188.577 50.7718 184.61 49.7173 182.745 45.2708 cv
181.399 42.0643 181.832 39.5154 185.343 41.5196 cv
188.286 43.1995 189.958 47.0492 192.269 49.4284 cv
194.758 51.9902 197.637 53.2599 201.116 53.9496 cv
201.66 51.9429 200.07 49.8461 200.592 48.0808 cv
201.084 46.419 202.908 45.9957 203.867 44.6114 cv
204.841 43.2068 205.346 42.0309 206.428 40.7031 cv
208.02 38.7501 208.584 39.0317 207.412 36.0748 cv
206.752 34.4098 204.054 31.9988 204.803 29.9964 cv
205.667 27.6893 207.395 28.5004 208.658 29.9342 cv
211.015 32.6113 209.903 36.323 214.564 36.4576 cv
221.449 36.6557 217.351 29.4884 217.55 25.0504 cv
221.653 24.7187 220.283 30.3963 221.791 32.3974 cv
224.295 35.7209 225.478 31.4551 227.492 29.959 cv
229.362 32.2684 230.664 31.9875 231.865 29.7545 cv
232.331 28.8892 232.831 23.5842 235.151 27.1493 cv
236.259 28.8527 233.194 32.1269 235.807 33.3057 cv
238.167 34.3704 238.68 30.9879 240.167 29.9679 cv
242.847 33.4759 244.011 26.7916 244.866 25.1481 cv
246.368 22.2606 248.79 19.3435 252.116 18.7093 cv
253.037 25.0593 245.214 28.049 245.217 33.6163 cv
246.398 33.8446 247.771 33.6447 248.775 33.376 cv
249.23 36.8778 246.947 43.1198 253.025 40.1743 cv
256.308 38.5835 258.112 34.5015 262.114 34.3838 cv
263.09 34.3551 256.308 43.3431 256.143 43.9544 cv
255.432 46.6028 257.555 49.2235 257.074 51.8522 cv
256.618 54.3499 254.747 54.9034 255.825 57.5246 cv
257.751 62.2054 265.207 62.3684 269.191 61.6128 cv
275.424 60.4306 280.681 56.124 286.943 55.2417 cv
292.647 54.4381 298.358 58.3102 295.979 64.6175 cv
293.431 71.3752 286.151 69.7424 280.595 68.4794 cv
277.545 67.7861 274.402 66.8004 271.244 66.833 cv
269.797 66.8479 268.39 67.0675 266.98 67.3817 cv
266.642 67.4571 262.156 68.9802 262.806 69.2841 cv
264.27 69.9681 268.77 70.7621 268.066 72.2504 cv
cp
level3{
gsave
clp
[5.88156e-009 130.701 -130.701 5.88156e-009 227.861 20 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.505882 .741176 .356863 ]
/C1 [.329412 .643137 .356863 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.88156e-009 130.701 -130.701 5.88156e-009 227.861 20 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~JUi9$J:N-!It)rtIXZ`pIXZ]nI=6NkI!g<hI!^3eH[C*cH?sm`H$O[\H$OXZG^+IXGB\7TGBS.QG'8%O
F`hhLF`__IFEDSFF)uDDEcQ2@EcQ/>EH,u<E,]c8E,TZ5Df9Q3DJj?0DJa6-D/F**Ci!p(CMR^$CMR["
C2.KtBk_9qBkV0nBP;'lB4kjiAnGXeAnGUcAS#FaA7T4]A7K+Z@q0"X@U`eU@UW\R@:<SP?smAM?XI/I
?XI,G?=$rE?!U`A?!LW>>[1N<>?b<9>?Y36>$>'3=]nm1=BJ[-=BJX+='&I(<`W7%<`N."<E3$u<)cgr
~>
<~]tD"j]Y(ni]Y(nh]=Y\e]=Y\e]=PSb]"5Ja]"5J`\[f8]\[f8]\[]/Z\@B&Y\@B&Y\$riU\$riU\$rfS
[^NWQ[^NWQ[C*EM[C*EM[C*BK['[3I['[3I['R*FZa7!EZa7!DZEgdAZEgdAZE^[>Z*CR=Z*CR<Yct@9
Yct@9Yct=7YHP.5YHP.5Y-+q1Y-+q1Y-+n/Xf\_-Xf\_-XK8M)XK8M)XK8M(X/i;%X/i;%X/`2"WiE)!
WiE(uWMukrWMukrWMlboW2QYnW2QYnVl-GjVl-GjVl-DhVP^5fVP^5fV5:#bV5:#bV59u`Unjf^Unjf^
~>
91 ]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
327.125 109.197 mo
325.378 107.749 328.004 102.922 330.019 105.209 cv
331.452 106.834 329.306 111.005 327.125 109.197 cv
cp
319.999 111.669 mo
318.168 109.48 322.429 108.034 324.038 109.027 cv
323.576 108.742 322.151 114.24 319.999 111.669 cv
cp
407.197 85.5116 mo
407.616 85.8098 408.214 86.03 408.583 86.0287 cv
409.886 86.0243 411.451 84.2101 409.339 84.2552 cv
409.249 84.2572 407.203 84.3349 407.318 84.2917 cv
406.425 84.6278 406.666 85.1327 407.197 85.5116 cv
cp
410.374 81.3778 mo
408.367 82.7706 412.853 84.3365 413.686 84.5138 cv
415.869 84.9784 418.003 84.5903 420.192 84.6228 cv
420.391 84.7341 li
421.065 84.5788 421.507 84.113 421.35 83.4824 cv
417.462 83.1326 413.679 84.2015 410.374 81.3778 cv
cp
430.77 87.6814 mo
432.438 86.2653 431.338 85.9579 429.687 85.5682 cv
428.89 85.3799 427.911 84.8296 427.019 84.7196 cv
425.319 84.5103 423.61 85.098 422.018 85.6418 cv
422.607 87.7359 424.183 86.4561 425.44 87.1024 cv
426.547 87.6721 426.065 89.1977 427.527 89.4551 cv
428.543 89.6339 430.066 88.2795 430.77 87.6814 cv
cp
405.544 20.2064 mo
405.464 17.4002 407.948 15.48 407.456 12.532 cv
402.944 12.6506 400.634 23.4906 398.928 26.7751 cv
397.529 29.4666 396.03 29.5986 393.859 31.1349 cv
392.216 32.2981 389.531 37.9525 392.931 38.0025 cv
396.07 38.0486 398.823 31.019 400.314 28.8098 cv
401.761 26.6657 411.803 21.5889 405.544 20.2064 cv
cp
306.291 39.3348 mo
306.788 39.9551 307.585 40.5356 308.135 40.6895 cv
310.074 41.2329 313.169 39.1946 310.008 38.3699 cv
309.873 38.3345 306.796 37.5861 306.985 37.5704 cv
305.516 37.6938 305.66 38.5465 306.291 39.3348 cv
cp
312.764 34.5258 mo
309.189 35.7502 315.203 39.975 316.367 40.5906 cv
319.418 42.2036 322.757 42.5272 326 43.5 cv
326.25 43.75 li
327.317 43.8033 328.172 43.2969 328.206 42.2927 cv
322.568 40.1301 316.489 40.123 312.764 34.5258 cv
cp
340.448 52.5185 mo
343.528 51.1159 342.02 50.1939 339.729 48.9169 cv
338.623 48.3002 337.398 47.0678 336.117 46.5272 cv
333.676 45.4982 330.886 45.6507 328.288 45.7878 cv
328.279 49.1519 331.165 47.9135 332.761 49.4058 cv
334.168 50.7211 332.806 52.7873 334.874 53.788 cv
336.309 54.4828 339.148 53.111 340.448 52.5185 cv
cp
378.703 8.34664 mo
377.275 9.18098 377.488 9.08983 377.222 10.6503 cv
376.968 12.1379 376.19 17.5767 379.167 15.2169 cv
380.267 14.3451 380.05 12.9729 380.532 11.8091 cv
380.949 10.8015 382.84 9.35348 382.854 8.30989 cv
382.886 5.78239 379.831 7.68786 378.703 8.34664 cv
cp
379.136 19.3134 mo
378.467 17.4985 376.468 18.1102 375.421 16.8669 cv
374.27 15.4988 375.772 6.31168 371.096 10.2003 cv
367.455 13.2285 372.688 18.863 372.996 22.2854 cv
373.152 24.0178 372.888 30.5209 374.506 31.6671 cv
376.844 33.3239 376.635 27.1967 377.037 26.0069 cv
377.634 24.2363 379.856 21.2696 379.136 19.3134 cv
cp
414.632 65.3302 mo
410.26 65.9957 405.899 67.8248 401.424 67.5363 cv
397.966 67.3134 393.169 64.6033 397.656 61.6075 cv
401.076 59.3239 417.551 61.1848 415.961 53.538 cv
410.126 53.5912 405.737 56.2338 400.499 58.3413 cv
399.508 58.74 397.574 59.7732 396.537 58.9385 cv
395.456 58.0686 396.592 56.6947 396.026 55.856 cv
394.658 53.8281 391.047 57.141 390.263 53.4704 cv
389.157 48.2911 401.445 46.1909 396.87 40.8259 cv
395.038 38.6768 392.501 40.8098 391.672 42.6266 cv
390.401 45.4134 388.572 52.2699 383.992 47.9573 cv
380.046 44.2416 386.12 35.6379 388.13 32.2133 cv
389.592 29.7238 394.752 23.1682 393.37 19.9453 cv
391.997 16.7416 389.002 20.1611 387.862 21.9476 cv
385.516 25.6273 385.172 30.0602 384.224 34.2039 cv
383.884 35.69 383.397 39.4561 381.146 39.0826 cv
379.441 38.7995 379.996 35.9689 379.051 35.5213 cv
378.174 35.1056 378.496 43.8356 374.57 43.235 cv
371.399 42.7501 372.206 38.6846 372.17 36.2659 cv
372.133 33.855 371.616 30.3564 368.463 32.9312 cv
367.082 34.0593 367.433 36.3136 368.01 37.65 cv
368.681 39.2042 369.655 40.6589 368.913 42.3773 cv
368.318 43.7539 366.482 45.0804 364.855 44.3958 cv
361.497 42.9829 363.811 37.3041 360.82 35.317 cv
358.078 33.4949 356.298 38.4432 356.709 40.2711 cv
357.239 42.6265 360.263 43.9953 361.145 46.2407 cv
361.516 47.1871 361.54 48.1619 360.245 48.4929 cv
358.298 48.9907 357.952 46.7368 356.615 46.3324 cv
354.799 45.7829 353.847 47.3311 354.86 48.5346 cv
356.299 50.2461 358.724 53.0229 354.394 51.4773 cv
351.335 50.3855 349.734 47.5058 348.226 44.8605 cv
346.877 42.4929 342.047 36.3375 344.133 43.1355 cv
344.763 45.1861 351.207 50.2188 350.052 52.2269 cv
349.126 53.8372 346.745 49.9888 345.039 50.0378 cv
345.232 52.4967 348.792 54.3822 347.371 57.1157 cv
346.309 59.1595 343.582 59.0552 341.51 59.0002 cv
337.696 58.8989 333.201 56.2087 329.636 58.6303 cv
327.646 59.9819 327.218 62.8456 329.422 64.1994 cv
331.812 65.6669 335.637 64.8083 338.283 64.6351 cv
341.285 64.4387 347.349 63.3173 348.771 67.0314 cv
349.741 69.5663 346.3 70.5751 346.007 73.0167 cv
345.615 76.2871 346.473 78.3494 342.119 78.9946 cv
339.57 79.3724 336.483 79.1424 334.323 80.846 cv
332.612 82.1948 332.258 83.3965 334.536 83.8762 cv
337.609 84.513 342.596 80.2232 345.582 82.0832 cv
348.028 83.6097 343.283 87.0248 342.032 87.6508 cv
339.255 89.0405 335.897 88.979 333.013 90.0427 cv
328.775 91.6053 322.781 95.6901 321.471 100.245 cv
320.473 103.712 323.636 104.626 326.28 103.292 cv
328.458 102.193 330.367 99.8701 332.221 98.3265 cv
333.762 97.0439 349.14 84.4135 350.116 86.8629 cv
350.727 88.3982 346.78 90.7275 346.302 92.036 cv
345.416 94.457 347.549 94.4074 347.49 96.3891 cv
347.444 97.9503 345.019 98.863 343.991 99.894 cv
342.608 101.282 341.289 103.72 341.538 105.706 cv
341.903 108.624 347.806 101.354 347.93 101.171 cv
349.183 99.3329 350.963 95.8669 353.208 97.775 cv
355.018 99.3132 354.651 101.212 357.044 102.169 cv
358.646 102.809 360.474 102.126 360.826 104.234 cv
361.183 106.373 356.292 110.158 358.43 112.102 cv
360.83 114.286 362.219 104.384 364.582 108.566 cv
366.307 111.619 364.254 118.578 363.867 121.74 cv
363.457 125.089 361.055 135.495 364.363 138.096 cv
367.727 140.742 369.948 132.645 370.332 130.581 cv
371.242 125.683 370.082 121.371 368.59 116.758 cv
367.47 113.294 366.32 108.941 367.819 105.378 cv
368.705 103.272 370.029 102.682 371.036 105.211 cv
373.193 104.734 371.927 100.403 374.979 101.395 cv
377.873 102.335 378.32 111.032 379.1 113.677 cv
380.508 118.449 382.345 123.117 384.963 127.362 cv
387.321 131.187 391.51 136.823 396.681 136.405 cv
400.72 136.079 402.5 132.005 402.126 128.373 cv
401.169 119.084 392.283 118.941 385.64 116.136 cv
382.113 114.646 379.111 108.488 381.656 104.847 cv
383.572 102.106 387.376 105.192 389.712 106.212 cv
390.215 103.328 388.137 101.539 385.923 100.195 cv
384.499 99.3317 383.391 99.7501 383.246 97.6229 cv
382.703 89.6799 391.496 99.6735 392.715 100.746 cv
395.127 102.867 399.741 108.705 401.316 102.576 cv
401.819 100.62 400.32 99.2827 398.852 98.1692 cv
396.747 96.5725 389.975 94.0203 391.863 90.4823 cv
394.093 86.3043 399.672 91.9126 402.745 91.4802 cv
407.16 90.8588 404.271 86.1038 401.832 84.6931 cv
399.552 83.3745 394.572 84.3243 396.477 80.9156 cv
397.044 79.9009 399.217 79.3055 398.861 77.8294 cv
398.54 76.495 396.092 76.4896 395.176 75.8723 cv
389.023 71.7225 402.298 69.5999 404.425 69.6483 cv
410.074 69.7767 426.249 79.991 429.264 70.5522 cv
431.657 63.0634 418.192 64.7884 414.632 65.3302 cv
cp
408.215 100.123 mo
408.712 102.075 410.041 102.688 412.038 101.752 cv
412.102 101.722 412.163 101.691 412.222 101.659 cv
417.372 98.8303 406.142 91.978 408.215 100.123 cv
cp
329.966 68.9321 mo
328.272 68.7492 327.421 69.5139 327.624 71.1682 cv
327.631 71.2206 327.639 71.2719 327.649 71.322 cv
328.506 75.7012 337.038 69.6954 329.966 68.9321 cv
cp
352.678 31.2513 mo
352.795 27.8704 350.925 26.3204 347.234 27.0109 cv
347.117 27.0328 347.004 27.0578 346.892 27.0859 cv
337.178 29.5422 352.187 45.3632 352.678 31.2513 cv
cp
403.724 49.3467 mo
405.518 50.5442 408.661 49.6312 410.575 49.1396 cv
414.263 48.1927 411.137 44.0166 408.72 43.5167 cv
408.237 43.4167 407.666 43.4714 407.061 43.6418 cv
404.672 44.3152 400.462 47.1693 403.724 49.3467 cv
cp
352.676 111.694 mo
352.422 115.127 350.471 117.972 347.414 118.88 cv
346.115 119.266 344.616 119.302 342.963 118.885 cv
338.528 117.767 338.393 111.597 342.884 110.198 cv
344.279 109.764 345.769 110.5 347.082 110.132 cv
348.413 109.76 348.464 108.956 349.38 108.142 cv
352.213 105.624 352.815 109.822 352.676 111.694 cv
cp
level3{
gsave
clp
[6.49156e-009 144.257 -144.257 6.49156e-009 368.718 3 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .647059 .113725 ]
/C1 [1 .647059 .113725 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .647059 .113725 ]
/C1 [.937255 .498039 .105882 ]
/N 1 
>>
]
/Bounds [.00537634 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.49156e-009 144.257 -144.257 6.49156e-009 368.718 3 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8W)trr2orrr2orrr2orrr2lprVc]nrVc]nrVc]nrVcZlr;?Kjr;?Kjr;?Kjr;?Hhqtp9fqtp9fqtp9f
qtp6dqYL'bqYL'bqYL'bqYBs_q>'j^q>'j^q>'j^q=sa[q"XXZq"XXZq"XXZq"OOWp\4FVp\4FVp\4FV
p\+=Sp@e4Rp@e4Rp@e4Rp@\+Op%A"Np%A"Np%A"Np%7nKo^qeJo^qeJo^qeJo^h\GoCMSFoCMSFoCMSF
oCDJCo()ABo()ABo()ABo'u8?naZ/>naZ/>naZ/>naQ&;nF5r:nF5r:nF5r:nF,i7n*f`6n*f`6n*f`6
~>
<~V59u`Unjf^Una][USFTYU8"BVU8"?TTqS0RTqJ'OTV.sMT:_aJT:_^HSt;OFSt2FCSXl=AS=H+>S=H(<
S"#n:S!oe7R[T\6R@0J2R@0G0R$a8.R$X/+Q^=&*QBmi&QBmf$Q'IW"Q'@MtPa%DsPEV2oPEV/mP*1uk
P*(lhOcbcgOH>QcOH>QbO,o?_O,f6\NfK-[NK&pWNK&pVN/W^SN/NUPMi3LOMMd:KMMd:JM2@(GM26tD
LkpkCLPLY?LPLY>L5(G;L5(D9KnY57KS5#3KS5#2K7ef/K7ec-JqAT+JUrB'JUrB&J:N0#J:N-!It)rt
~>
<~*??+>*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<
*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<*#oq<
*#fh9)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8
)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
27.2396 253.395 mo
30.3389 251.188 33.2725 248.734 36.3358 246.54 cv
36.3561 246.525 42.2705 241.652 40.4119 242.064 cv
36.3541 242.964 30.7321 247.89 27.0522 250.083 cv
22.824 252.604 18.4521 254.869 14.641 258.027 cv
9.95209 261.913 11.6686 267.333 17.0606 262.33 cv
20.6785 258.973 23.0856 256.353 27.2396 253.395 cv
cp
12.0204 237.318 mo
11.1901 236.754 10.0595 236.692 8.71838 237.517 cv
5.271 239.637 7.44476 249.065 12.2173 244.226 cv
14.2169 242.198 13.8377 238.554 12.0204 237.318 cv
cp
20.8606 250.371 mo
24.7891 248.461 31.4929 245.203 32.338 240.611 cv
29.4692 240.035 26.1172 240.269 23.753 242.193 cv
22.4176 243.28 22.5536 245.489 20.9576 246.526 cv
19.3043 247.6 16.7586 246.422 15.1666 247.637 cv
9.44019 252.008 17.6033 251.954 20.8606 250.371 cv
cp
19.9382 173.488 mo
20.1215 170.662 15.4854 171.372 15.0103 173.486 cv
14.3419 176.46 19.7914 175.753 19.9382 173.488 cv
cp
26.1221 177.807 mo
26.941 174.555 21.6526 176.629 21.6122 176.088 cv
21.7529 177.973 25.4249 180.574 26.1221 177.807 cv
cp
69.676 271.344 mo
69.655 271.255 69.1489 269.271 69.2153 269.375 cv
68.6992 268.573 68.2562 268.914 67.9974 269.514 cv
67.7938 269.985 67.7044 270.617 67.7832 270.978 cv
68.0613 272.25 70.164 273.398 69.676 271.344 cv
cp
72.7068 271.751 mo
70.923 270.081 70.3353 274.796 70.3371 275.648 cv
70.3417 277.88 71.1697 279.884 71.5981 282.031 cv
71.5312 282.249 li
71.8246 282.875 72.373 283.209 72.9565 282.924 cv
72.4812 279.049 70.6409 275.576 72.7068 271.751 cv
cp
70.2772 287.683 mo
69.953 288.885 68.3602 288.734 68.4159 290.219 cv
68.4546 291.249 70.0991 292.453 70.8317 293.016 cv
72.567 294.349 72.636 293.209 72.6701 291.513 cv
72.6866 290.694 73.0187 289.621 72.9387 288.725 cv
72.7859 287.02 71.8522 285.473 70.9859 284.031 cv
69.0623 285.046 70.6449 286.319 70.2772 287.683 cv
cp
53.9261 273.581 mo
52.1227 274.477 51.803 275.905 53.1376 277.661 cv
53.18 277.716 53.2231 277.769 53.2673 277.82 cv
57.1153 282.261 61.4536 269.841 53.9261 273.581 cv
cp
40.3769 265.574 mo
37.2089 270.175 33.0528 272.969 29.2164 276.904 cv
27.86 278.296 21.1129 286.239 25.1396 285.996 cv
29.6003 285.725 33.395 277.372 35.3728 274.182 cv
39.9584 266.786 46.7282 261.731 52.2745 255.306 cv
46.0288 255.895 43.5836 260.918 40.3769 265.574 cv
cp
17.2376 295.899 mo
13.7591 294.961 13.4805 300.921 15.9981 302.045 cv
19.5389 303.625 20.0259 296.651 17.2376 295.899 cv
cp
24.1765 289.271 mo
20.327 287.434 21.5849 294.55 20.9 294.464 cv
23.2867 294.762 27.4529 290.836 24.1765 289.271 cv
cp
124.57 295.538 mo
125.758 295.746 126.363 297.094 127.348 297.598 cv
127.461 297.655 127.579 297.702 127.704 297.735 cv
129.131 298.107 129.536 296.087 129.767 295.04 cv
130.174 293.202 130.358 288.825 128.69 287.621 cv
127.685 286.895 126.014 287.779 125.166 288.428 cv
123.661 289.581 121.695 291.891 121.963 293.939 cv
122.168 295.508 123.342 295.322 124.57 295.538 cv
cp
139.075 305.577 mo
139.411 305.089 139.555 304.457 139.38 303.792 cv
138.985 302.298 137.195 300.977 135.84 300.47 cv
135.039 300.17 134.718 299.913 134.231 299.183 cv
133.864 298.634 133.302 297.056 132.472 297.037 cv
131.428 297.014 131.723 298.401 131.995 299.017 cv
132.548 300.271 133.739 300.877 134.812 301.596 cv
135.731 302.213 135.674 303.069 135.574 303.906 cv
135.459 304.867 135.286 305.801 136.466 306.318 cv
137.231 306.652 137.986 306.504 138.551 306.096 cv
138.325 306.446 138.179 306.912 138.168 307.522 cv
138.107 310.889 142.606 311.135 142.557 307.914 cv
142.527 305.85 140.351 304.777 139.075 305.577 cv
cp
123.943 283.339 mo
123.899 280.44 119.616 279.475 119.553 282.947 cv
119.492 286.314 123.991 286.561 123.943 283.339 cv
cp
119.806 268.476 mo
121.838 270.101 123.378 271.797 125.047 273.834 cv
125.567 274.469 129.118 279.197 129.72 277.557 cv
130.567 275.247 122.723 269.472 121.328 268.017 cv
119.75 266.372 117.808 264.364 115.742 263.382 cv
115.603 265.217 118.474 267.411 119.806 268.476 cv
cp
130.415 274.906 mo
130.101 276.104 131.82 278.497 132.841 276.932 cv
134.041 275.093 130.325 275.25 130.415 274.906 cv
cp
127.349 263.788 mo
129.034 263.01 129.777 261.913 129.866 260.74 cv
130.203 256.31 121.217 250.802 118.399 257.378 cv
116.461 261.904 123.812 265.42 127.349 263.788 cv
cp
120.109 171.05 mo
121.258 170.966 121.744 169.935 122.607 169.367 cv
123.355 168.876 125.307 168.766 125.798 168.064 cv
126.985 166.364 124.033 166.247 122.964 166.174 cv
121.61 166.081 121.796 166.118 120.896 167.054 cv
120.038 167.946 117.001 171.278 120.109 171.05 cv
cp
113.686 177.389 mo
114.909 176.463 117.785 175.475 118.198 173.815 cv
118.582 172.275 116.943 171.768 116.807 170.442 cv
116.656 168.982 121.914 163.441 116.947 163.923 cv
113.079 164.298 114.031 170.535 112.661 172.999 cv
111.968 174.247 108.789 178.538 109.358 180.062 cv
110.18 182.265 112.865 178.011 113.686 177.389 cv
cp
123.337 220.007 mo
123.729 224.443 131 221.036 130.197 217.818 cv
129.195 213.803 123.058 216.853 123.337 220.007 cv
cp
140.724 221.08 mo
140.418 216.19 133.979 221.427 133.682 220.692 cv
134.717 223.254 140.984 225.242 140.724 221.08 cv
cp
99.8945 283.227 mo
100.1 287.092 101.785 291.01 102.273 294.811 cv
102.666 297.868 102.291 301.838 105.311 303.752 cv
108.062 305.494 105.301 293.603 105.132 293.122 cv
104.108 290.193 103.142 284.566 99.8945 283.227 cv
cp
69.7615 172.287 mo
72.9387 169.058 70.5057 163.081 71.8132 159.032 cv
73.2319 154.639 74.6783 151.047 71.7991 146.535 cv
68.0696 140.69 67.6327 147.843 67.926 151.924 cv
68.347 157.796 65.6148 167.506 69.7615 172.287 cv
cp
72.8008 173.785 mo
71.5723 177.389 74.7104 181.714 77.8576 177.745 cv
80.1523 174.842 78.0458 170.529 76.9178 167.646 cv
75.954 168.063 73.3206 172.585 72.98 173.334 cv
72.9123 173.482 72.8527 173.633 72.8008 173.785 cv
cp
43.6732 186.948 mo
51.047 193.251 56.3668 184.515 47.1283 180.023 cv
44.8895 178.935 43.1633 179.359 41.219 177.686 cv
39.3851 176.108 40.0289 173.475 36.9418 173.752 cv
34.7148 173.952 42.6659 186.087 43.6732 186.948 cv
cp
114.789 185.497 mo
114.746 185.103 112.872 184.324 112.518 184.149 cv
110.06 187.878 107.156 197.965 115.422 195.727 cv
118.089 195.006 119.051 191.618 122.099 191.387 cv
124.339 191.218 126.442 194.19 128.942 192.764 cv
129.7 188.056 124.858 187.348 122.119 186.025 cv
120.214 185.105 114.18 179.89 114.789 185.497 cv
cp
129.047 306.074 mo
132.798 310.288 141.702 318.329 140.335 324.632 cv
129.188 316.582 121.514 305.068 114.789 293.28 cv
111.415 287.365 108.273 281.32 104.887 275.411 cv
102.302 270.899 99.4244 263.214 94.4752 261.038 cv
89.6555 258.92 80.1646 260.966 80.2137 267.351 cv
80.2515 272.243 88.4527 276.588 87.5261 281.487 cv
86.7211 285.738 81.965 282.95 80.5726 280.551 cv
78.0681 276.236 80.4937 268.691 76.4783 265.266 cv
74.5899 263.655 70.7274 263.174 68.7409 264.322 cv
67.5491 265.011 67.1098 267.231 65.3405 266.765 cv
64.1846 266.46 63.8688 263.276 63.563 263.237 cv
61.6097 262.983 60.6289 260.773 58.6656 260.943 cv
55.3525 261.23 56.4847 264.471 55.6658 266.345 cv
54.801 268.324 53.2671 269.242 51.5181 267.187 cv
50.0158 265.422 51.0045 263.402 51.7621 261.61 cv
52.563 259.716 54.1228 257.914 53.4964 255.727 cv
52.6784 252.871 50.5349 253.941 48.9207 252.705 cv
46.8453 251.115 48.9144 250.329 47.9619 248.188 cv
47.1347 246.328 45.4387 247.422 44.1078 245.918 cv
41.5046 242.978 45.4708 238.713 40.1368 237.422 cv
37.467 236.776 31.7554 239.262 33.3295 234.266 cv
34.2648 231.3 37.6625 232.512 38.7057 230.127 cv
40.5822 225.838 32.6665 227.997 30.7159 227.798 cv
26.1757 227.335 22.8152 223.419 24.9565 218.967 cv
27.9575 212.729 36.1955 218.043 41.0627 216.426 cv
53.0229 212.452 42.5104 199.857 35.608 197.369 cv
28.3685 194.76 16.3035 191.03 17.7814 181.051 cv
22.843 180.263 25.98 185.755 28.8917 188.956 cv
35.0718 195.749 47.2178 200.76 56.6404 199.681 cv
61.4476 199.131 70.3883 193.551 65.9681 187.921 cv
63.1656 184.351 58.2464 183.035 54.8089 180.238 cv
52.3024 178.199 49.3212 173.691 51.267 170.224 cv
54.0011 165.353 62.6543 164.581 64.4792 170.463 cv
66.0449 175.51 62.5518 180.746 64.9005 185.784 cv
68.2349 192.935 80.7428 198.256 85.4829 189.492 cv
86.7602 187.13 86.6798 184.898 90.101 185.824 cv
94.7254 187.076 89.7893 193.104 93.5056 193.705 cv
99.405 194.658 94.2451 184.018 96.7937 181.578 cv
99.6472 178.846 104.006 180.931 105.314 184.157 cv
107.191 188.788 103.465 191.147 100.042 193.226 cv
92.8899 197.568 98.2004 203.461 104.421 203.888 cv
110.729 204.321 108.763 213.46 113.93 215.127 cv
116.17 215.849 117.376 214.67 116.199 217.658 cv
114.995 220.716 111.258 222.764 114.728 225.794 cv
116.574 227.406 118.699 227.01 120.969 226.787 cv
122.928 226.595 132.801 224.481 131.604 228.935 cv
128.976 238.683 113.497 224.87 110.342 228.995 cv
110.265 229.097 110.194 229.209 110.132 229.333 cv
108.832 231.916 111.87 235.5 109.985 238.604 cv
109.109 240.045 107.99 239.617 107.705 241.612 cv
107.439 243.471 108.771 245.771 110.419 246.677 cv
112.549 247.848 116.113 246.783 115.685 250.502 cv
115.295 253.891 112.169 253.84 110.179 252.337 cv
107.745 250.499 105.709 248.228 102.809 251.258 cv
95.1259 259.287 102.919 265.155 107.064 272.258 cv
113.79 283.786 120.063 295.982 129.047 306.074 cv
cp
level3{
gsave
clp
[5.8865e-009 130.811 -130.811 5.8865e-009 74.7952 145.652 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.792157 .803922 .00784314 ]
/C1 [.682353 .784314 .00784314 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.8865e-009 130.811 -130.811 5.8865e-009 74.7952 145.652 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~b/qcIaiVZHaiVWFaN2HDaN2HCa2c6@a2c6@`l?$<`l?$<`l5p9`Pog8`Pod6`5KU4`5KU3_o'C0_o'C0
_ns:-_SX1,_SX.*_83t(_83t'^qdb$^qdb$^V@Ou^V@Ou^V7Fr^:q=q^:q:o]tM+m]tM+l]Y(ni]Y(ni
]Xtef]=Y\e]=YYc]"5Ja]"5J`\[f8]\[f8]\@B&Y\@B&Y\@8rV\$riU\$rfS[^NWQ[^NWP[C*EM[C*EM
[C!<J['[3I['[0GZa7!EZa7!DZEgdAZEgdAZ*CR=Z*CR=Z*:I:Yct@9Yct=7YHP.5YHP.4Y-+q1Y-+q1
~>
<~c-4DUbfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbfn;TbKJ)PbKJ)PbKJ)P
bKJ)PbKJ)PbKJ)PbKJ)PbKJ)PbKJ)PbKJ)PbKJ)PbKJ)PbKJ)Ob0%lLb0%lLb0%lLb0%lLb0%lLb0%lL
b0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%iJaiVZHaiVZHaiVZHaiVZHaiVZHaiVZHaiVZHaiVZHaiVZH
aiVZHaiVZHaiVZHaiMQEaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HD
~>
2 ]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
289.424 186.816 mo
284.88 188.199 289.477 192.799 292.476 189.691 cv
294.701 187.384 291.414 186.211 289.424 186.816 cv
cp
293.892 176.968 mo
287.963 178.773 293.962 184.775 297.875 180.718 cv
300.778 177.708 296.49 176.177 293.892 176.968 cv
cp
282.816 182.43 mo
281.374 183.25 274.913 188.801 278.731 189.84 cv
280.537 190.33 287.158 184.876 287.652 183.06 cv
288.483 180.007 284.451 181.501 282.816 182.43 cv
cp
159.12 192.917 mo
159.293 194.102 159.29 193.934 160.265 194.535 cv
161.194 195.108 164.633 197.104 163.856 194.467 cv
163.569 193.493 162.59 193.267 161.939 192.628 cv
161.376 192.075 160.917 190.414 160.221 190.122 cv
158.533 189.415 158.984 191.982 159.12 192.917 cv
cp
166.596 195.598 mo
165.197 195.555 165.066 197.062 163.948 197.428 cv
162.719 197.829 156.961 194.332 158.303 198.524 cv
159.349 201.787 164.547 199.803 166.927 200.523 cv
168.132 200.888 172.424 202.827 173.632 202.052 cv
175.377 200.932 171.209 199.412 170.519 198.82 cv
169.493 197.939 168.104 195.645 166.596 195.598 cv
cp
174.127 236.54 mo
171.02 238.683 167.673 238.296 164.279 239.278 cv
163.078 239.626 156.878 242.36 159.566 245.166 cv
162.545 248.273 166.906 242.9 168.918 241.249 cv
173.581 237.419 179.146 237.552 184.22 235.407 cv
180.002 231.264 177.273 234.371 174.127 236.54 cv
cp
152.169 248.961 mo
150.106 245.404 148.582 251.075 149.976 254.088 cv
151.936 258.326 153.824 251.813 152.169 248.961 cv
cp
158.199 247.67 mo
156.095 242.944 155.316 250.918 154.888 250.316 cv
156.381 252.415 159.99 251.692 158.199 247.67 cv
cp
238.56 157.866 mo
238.571 158.68 237.752 159.251 237.541 159.967 cv
237.517 160.049 237.501 160.134 237.495 160.22 cv
237.427 161.214 238.817 161.23 239.541 161.252 cv
240.812 161.292 243.739 160.866 244.329 159.608 cv
244.685 158.851 243.889 157.853 243.353 157.372 cv
242.399 156.517 240.62 155.502 239.295 155.936 cv
238.279 156.268 238.55 157.024 238.56 157.866 cv
cp
234.138 168.967 mo
234.533 169.03 234.96 168.935 235.315 168.635 cv
236.112 167.961 236.398 166.486 236.315 165.513 cv
236.265 164.938 236.329 164.667 236.633 164.159 cv
236.861 163.776 237.66 162.976 237.431 162.464 cv
237.142 161.82 236.383 162.402 236.085 162.747 cv
235.482 163.448 235.457 164.35 235.329 165.213 cv
235.22 165.952 234.681 166.166 234.142 166.347 cv
233.523 166.555 232.903 166.721 232.93 167.591 cv
232.948 168.154 233.257 168.572 233.67 168.798 cv
233.391 168.761 233.064 168.807 232.689 168.977 cv
230.618 169.916 231.772 172.731 233.723 171.768 cv
234.972 171.151 234.996 169.513 234.138 168.967 cv
cp
250.799 264.76 mo
249.672 264.332 249.329 262.895 248.457 262.216 cv
248.356 262.138 248.249 262.07 248.133 262.014 cv
246.8 261.381 246.025 263.289 245.601 264.274 cv
244.856 266.004 243.855 270.268 245.268 271.764 cv
246.119 272.665 247.926 272.11 248.88 271.632 cv
250.575 270.782 252.939 268.881 253.06 266.819 cv
253.153 265.239 251.965 265.202 250.799 264.76 cv
cp
237.902 252.642 mo
237.601 253.153 237.5 253.793 237.72 254.444 cv
238.217 255.908 240.093 257.103 241.48 257.516 cv
242.3 257.76 242.638 257.994 243.173 258.689 cv
243.577 259.212 244.246 260.747 245.076 260.708 cv
246.119 260.66 245.73 259.297 245.415 258.7 cv
244.777 257.488 243.548 256.965 242.428 256.321 cv
241.469 255.769 241.467 254.91 241.509 254.069 cv
241.558 253.103 241.667 252.158 240.453 251.724 cv
239.668 251.443 238.924 251.643 238.389 252.089 cv
238.59 251.724 238.704 251.249 238.673 250.64 cv
238.503 247.276 233.998 247.339 234.267 250.55 cv
234.44 252.607 236.684 253.528 237.902 252.642 cv
cp
249.128 276.86 mo
248.627 279.715 252.653 281.466 253.366 278.068 cv
254.057 274.772 249.684 273.686 249.128 276.86 cv
cp
220.251 271.154 mo
219.718 268.608 219.611 266.32 219.621 263.686 cv
219.624 262.865 219.897 256.958 218.388 257.84 cv
216.265 259.081 218.636 268.529 218.785 270.54 cv
218.954 272.813 219.173 275.598 220.141 277.67 cv
221.417 276.343 220.6 272.824 220.251 271.154 cv
cp
216.165 259.44 mo
217.169 258.718 217.367 255.778 215.584 256.334 cv
213.488 256.988 216.453 259.233 216.165 259.44 cv
cp
235.834 262 mo
234.149 261.221 232.832 261.367 231.881 262.06 cv
228.29 264.676 229.924 275.088 236.757 272.969 cv
241.46 271.51 239.369 263.634 235.834 262 cv
cp
189.127 156.566 mo
189.387 159.145 192.336 157.171 190.989 155.236 cv
189.99 153.8 189.013 155.436 189.127 156.566 cv
cp
186.403 153.541 mo
186.741 156.907 190.59 154.33 188.832 151.806 cv
187.528 149.933 186.254 152.067 186.403 153.541 cv
cp
188.155 160.05 mo
188.441 160.908 190.729 164.955 191.69 163.021 cv
192.144 162.106 189.924 157.984 189.004 157.527 cv
187.457 156.759 187.831 159.076 188.155 160.05 cv
cp
189.115 174.243 mo
189.765 175.318 193.627 179.266 194.623 177.571 cv
195.355 176.326 192.284 171.42 190.731 171.405 cv
189.061 171.388 188.432 173.112 189.115 174.243 cv
cp
196.173 161.17 mo
194.304 156.354 193.728 162.58 193.845 164.577 cv
194.147 169.748 195.81 174.59 198.836 178.792 cv
200.242 180.745 201.996 182.563 203.157 184.681 cv
203.744 185.754 203.867 187.351 204.825 188.077 cv
207.07 185.531 201.858 177.109 200.628 174.671 cv
198.431 170.316 197.909 165.644 196.173 161.17 cv
cp
258.436 231.194 mo
255.816 232.743 252.158 233.901 249.093 233.491 cv
247.261 233.245 243.874 232.099 242.728 234.328 cv
242.17 235.414 242.287 235.638 241.239 236.095 cv
240.477 236.426 239.545 236.485 238.752 236.784 cv
237.176 237.377 235.554 238.334 235.035 240.046 cv
234.181 242.865 237.123 241.581 238.337 240.636 cv
239.135 240.015 240.975 237.982 241.789 239.692 cv
242.439 241.058 240.616 244.016 242.668 244.879 cv
243.617 245.278 245.02 244.622 245.626 243.902 cv
246.241 243.172 246.082 242.044 247.332 242.203 cv
248.519 242.354 249.207 244.224 249.861 245.062 cv
251.785 247.531 253.683 248.888 256.967 248.19 cv
257.816 248.01 259.618 247.729 260.057 246.82 cv
260.455 245.994 259.805 245.216 259.593 244.437 cv
258.894 241.862 260.777 242.626 261.992 241.095 cv
264.368 238.1 257.284 235.764 262.98 233.952 cv
264.892 233.343 272.023 232.346 269.613 228.764 cv
267.049 224.954 260.924 229.717 258.456 231.182 cv
258.449 231.186 258.442 231.19 258.436 231.194 cv
cp
247.371 218.413 mo
249.706 222.331 253.819 218.256 256.851 220.194 cv
258.659 221.351 259.148 225.443 261.446 223.052 cv
263.076 221.356 262.434 218.697 265.435 219.43 cv
267.254 219.874 271.675 223.218 270.785 218.312 cv
270.37 216.021 268.396 213.663 272.294 213.568 cv
273.984 213.526 277.456 215.753 278.546 213.417 cv
280.039 210.217 274.787 210.36 273.292 210.262 cv
272.27 210.195 270.536 210.168 270.08 208.966 cv
269.563 207.599 270.829 207.343 271.414 206.414 cv
272.195 205.171 272.025 205.438 272.056 204.053 cv
272.083 202.853 271.156 202.761 272.276 201.733 cv
274.346 199.834 278.771 202.277 280.895 202.716 cv
283.955 203.348 288.696 200.376 285.707 196.947 cv
283.431 194.336 279.915 197.807 277.675 198.711 cv
276.592 199.148 274.059 200.073 273.326 198.62 cv
272.693 197.364 274.089 196.46 272.941 195.007 cv
272.183 194.048 270.724 193.933 270.041 192.809 cv
268.755 190.693 272.465 187.522 270.79 186.111 cv
269.383 184.928 266.731 187.592 265.284 187.781 cv
261.518 188.274 262.42 184.825 264.426 183.113 cv
267.429 180.548 274.292 181.547 274.935 176.709 cv
275.382 173.338 271.418 171.258 268.576 171.232 cv
264.766 171.197 262.332 173.833 261.333 177.276 cv
260.652 179.624 259.186 187.08 255.611 182.601 cv
254.854 181.652 250.972 173.053 249.032 177.936 cv
248.258 179.883 250.507 180.515 251.661 181.392 cv
253.466 182.764 254.779 187.859 251.43 187.741 cv
249.704 187.68 247.382 183.509 245.568 185.193 cv
244.25 186.425 246.829 188.679 246.213 190.117 cv
245.352 192.128 243.365 190.724 241.978 190.315 cv
240.718 189.944 237.958 189.363 238.714 191.65 cv
239.279 193.355 241.754 192.862 243.016 193.031 cv
248.935 193.824 242.559 195.302 242.363 197.309 cv
242.264 198.319 243.314 199.005 243.245 199.834 cv
243.129 201.237 241.754 202.01 240.725 202.777 cv
238.578 204.379 235.478 205.651 236.872 208.843 cv
238.383 212.306 243.41 211.228 245.701 214.02 cv
246.045 214.44 246.257 214.885 246.41 215.342 cv
246.753 216.369 246.797 217.45 247.371 218.413 cv
cp
208.43 192.836 mo
211.483 188.513 204.473 184.516 207.561 179.954 cv
211.107 174.714 215.878 183.081 220.209 180.23 cv
225.373 176.83 223.378 162.516 223.932 157.472 cv
224.123 155.73 224.601 148.498 227.195 148.075 cv
229.992 147.619 229.833 152.772 229.841 154.517 cv
229.886 164.467 226.551 174.848 220.829 183.02 cv
219.054 185.556 213.808 190.348 216.787 193.509 cv
219.247 196.121 223.943 194.058 226.739 193.613 cv
229.938 193.104 239.023 194.371 236.748 200.202 cv
235.542 203.294 231.363 203.572 233.173 207.394 cv
233.306 207.675 233.471 207.975 233.673 208.297 cv
235.312 210.916 236.337 214.251 238.961 215.997 cv
242.28 218.207 247.296 220.227 246.389 225.35 cv
245.469 230.546 241.194 229.964 237.709 228.797 cv
225.918 224.852 235.694 239.621 229.037 239.161 cv
227.27 239.04 225.974 236.984 224.103 238.512 cv
222.016 240.215 223.7 241.086 224.903 242.475 cv
226.997 244.894 230.539 250.971 223.995 250.923 cv
219.731 250.893 218.258 244.811 215.251 242.536 cv
211.784 239.913 208.035 241.485 205.732 244.736 cv
203.188 248.327 203.953 253.162 205.579 257.028 cv
208.169 263.186 211.602 271.652 205.072 276.816 cv
196.793 283.363 191.237 271.927 191.912 264.895 cv
192.729 256.385 199.685 250.722 201.181 242.77 cv
201.859 239.164 199.835 235.521 196.232 234.389 cv
194.412 233.817 191.3 235.15 190.603 232.74 cv
190.008 230.683 192.213 229.952 190.695 227.859 cv
189.727 226.525 187.12 226.113 185.686 225.9 cv
183.968 222.484 187.973 222.374 188.656 219.848 cv
189.852 215.428 184.264 214.514 181.315 214.902 cv
178.032 215.333 174.667 214.613 176.12 210.194 cv
177.644 205.557 180.857 206.711 184.361 208.251 cv
186.356 209.129 194.196 212.326 191.07 206.763 cv
189.367 203.733 183.914 203.331 181.139 201.788 cv
178.684 200.423 173.461 196.124 176.04 192.738 cv
178.416 189.618 182.623 193.238 184.438 195.136 cv
186.738 197.541 189.574 202.466 193.178 202.97 cv
197.516 203.576 199.18 198.646 194.841 196.961 cv
193.131 196.297 191.142 196.919 189.945 195.056 cv
188.75 193.196 189.588 191.044 191.505 190.103 cv
196.741 187.53 197.306 194.962 200.962 195.9 cv
203.365 196.516 207.04 194.803 208.43 192.836 cv
cp
level3{
gsave
clp
[5.72855e-009 127.301 -127.301 5.72855e-009 224.142 146.709 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 .576471 .65098 ]
/C1 [0 .576471 .65098 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 .576471 .65098 ]
/C1 [0 .427451 .65098 ]
/N 1 
>>
]
/Bounds [.102151 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.72855e-009 127.301 -127.301 5.72855e-009 224.142 146.709 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~PEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2nP*1ukP*(lhOcbcfOH>QcOH5H`O,o?^NfK-[NfB$XNK&pV
N/W^SN/NUPMi3LNMMd:KMM[1HM2@(FLkpkCLkgb@LPLY>L5(G;L4t>8KnY56KS5#3KS+o0K7ef.JqAT+
Jq8K(JUrB'J:N0#J:N-!It)rtIXZ`pIXZ]nI=6NlI!g<hI!g9fH[C*dH?sm`H?sj^H$O[\G^+IXG^+FV
GB\7TG'8%PG'8"NF`hhLFEDVHFEDSFF)uDDEcQ2@EcQ/>EH,u<E,]c8E,]`6Df9Q4DJj?0DJj<.D/F-,
~>
166 ]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
384.743 282.957 mo
386.115 283.214 386.563 280.966 385.605 280.31 cv
384.527 279.573 383.333 281.132 383.706 282.2 cv
383.83 282.555 384.146 282.845 384.743 282.957 cv
cp
397.154 268.578 mo
398.526 268.836 398.974 266.587 398.016 265.931 cv
396.938 265.194 395.744 266.754 396.117 267.821 cv
396.241 268.176 396.557 268.466 397.154 268.578 cv
cp
427.062 217.651 mo
425.838 216.154 423.545 216.856 422.582 218.237 cv
419.667 222.413 429.667 220.837 427.062 217.651 cv
cp
390.785 276.469 mo
389.387 273.841 388.43 271.17 387.668 268.321 cv
386.764 264.949 384.823 267.464 384.741 269.569 cv
384.7 270.61 384.878 271.67 384.739 272.707 cv
384.636 273.475 384.074 274.402 384.243 275.182 cv
384.72 277.382 386.23 275.965 387.425 276.349 cv
389.38 276.976 387.026 283.779 390.257 283.162 cv
393.089 282.622 391.535 277.877 390.785 276.469 cv
cp
329.459 287.695 mo
330.3 285.493 333.592 286.818 331.607 288.485 cv
330.737 289.215 328.836 289.33 329.459 287.695 cv
cp
327.84 291.409 mo
328.936 288.535 333.232 290.265 330.642 292.44 cv
329.507 293.392 327.026 293.542 327.84 291.409 cv
cp
332.471 288.046 mo
332.33 287.028 334.487 282.873 335.499 282.732 cv
337.638 282.437 335.582 286.607 335.034 287.327 cv
334.412 288.143 332.707 289.756 332.471 288.046 cv
cp
342.967 278.804 mo
342.105 277.511 344.43 272.212 345.87 272.115 cv
347.832 271.984 346.744 277.399 346.222 278.541 cv
345.672 279.742 343.893 280.193 342.967 278.804 cv
cp
340.093 268.786 mo
341.415 266.396 345.44 257.346 348.808 257.769 cv
348.747 258.969 347.496 259.97 346.941 261.06 cv
345.844 263.211 345.329 265.684 344.507 267.947 cv
342.739 272.813 339.673 276.914 335.571 280.076 cv
333.986 281.297 328.516 284.326 331.444 280.07 cv
334.164 276.116 337.731 273.054 340.093 268.786 cv
cp
422.89 244.116 mo
421.98 243.787 421.442 242.472 421.285 241.598 cv
421.198 241.105 421.189 240.22 421.707 239.958 cv
422.567 239.523 424.348 240.541 425.026 241.106 cv
425.412 241.428 426.165 242.031 425.703 242.544 cv
425.663 242.589 425.618 242.628 425.57 242.663 cv
425.149 242.964 424.458 242.926 424.116 243.376 cv
423.762 243.84 423.587 244.369 422.89 244.116 cv
cp
417.799 242.754 mo
416.368 241.981 417.69 240.406 418.905 241.012 cv
420.256 241.685 419.187 243.504 417.799 242.754 cv
cp
422.953 185.129 mo
424.012 185.886 424.232 187.786 424.116 188.975 cv
424.05 189.645 423.739 190.795 422.973 190.947 cv
421.7 191.198 419.762 189.231 419.089 188.253 cv
418.706 187.696 417.949 186.641 418.735 186.143 cv
418.803 186.1 418.875 186.065 418.951 186.038 cv
419.606 185.801 420.488 186.101 421.095 185.643 cv
421.722 185.17 422.141 184.548 422.953 185.129 cv
cp
407.962 189.688 mo
406.159 188.753 407.638 186.329 409.49 187.368 cv
409.825 187.556 410.04 187.777 410.167 188.006 cv
410.109 187.571 410.252 187.107 410.666 186.783 cv
411.305 186.281 411.773 186.656 412.272 187.007 cv
412.706 187.312 413.165 187.6 413.781 187.273 cv
414.501 186.893 415.193 186.412 416.054 186.479 cv
416.478 186.512 417.336 186.762 417.011 187.335 cv
416.753 187.79 415.709 187.632 415.295 187.671 cv
414.744 187.724 414.506 187.825 414.1 188.181 cv
413.414 188.781 412.146 189.381 411.199 189.154 cv
410.777 189.053 410.47 188.784 410.299 188.452 cv
410.362 189.399 409.117 190.287 407.962 189.688 cv
cp
429.056 188.745 mo
430.629 190.266 428.342 191.826 426.987 190.599 cv
425.482 189.236 427.53 187.269 429.056 188.745 cv
cp
405.756 170.279 mo
405.804 168.471 405.321 163.603 408.214 163.516 cv
410.935 163.433 409.071 167.572 408.753 168.797 cv
407.807 172.443 411.432 169.449 412.232 171.723 cv
412.64 172.886 411.6 173.633 413.208 174.125 cv
413.695 174.274 414.329 174.188 414.635 174.679 cv
414.973 175.218 414.517 176.273 414.329 176.787 cv
413.597 178.773 412.236 179.33 410.273 179.527 cv
409.606 179.594 408.378 179.333 407.898 179.915 cv
407.394 180.529 408.048 180.822 408.232 181.396 cv
408.412 181.961 408.29 182.93 407.759 183.302 cv
406.609 184.106 405.644 182.14 404.697 182.028 cv
403.511 181.888 403.978 183.552 404.041 184.187 cv
404.137 185.152 403.833 187.152 402.616 185.75 cv
401.878 184.898 401.912 183.711 402.125 182.671 cv
402.232 182.148 402.514 181.631 402.593 181.113 cv
402.702 180.401 402.543 180.388 402.151 179.725 cv
401.347 178.366 403.096 176.944 403.843 176.049 cv
405.091 174.552 405.702 172.212 405.756 170.294 cv
405.756 170.289 405.756 170.284 405.756 170.279 cv
cp
335.092 247.706 mo
332.762 250.122 329.189 246.547 332.721 245.472 cv
334.268 245.002 336.822 245.913 335.092 247.706 cv
cp
339.288 240.733 mo
336.247 243.886 331.585 239.221 336.193 237.818 cv
338.212 237.204 341.545 238.394 339.288 240.733 cv
cp
331.344 242.553 mo
330.96 243.964 325.814 248.203 324.41 247.822 cv
321.443 247.015 326.464 242.701 327.585 242.064 cv
328.855 241.342 331.989 240.18 331.344 242.553 cv
cp
389.332 158.701 mo
390.01 157.188 392.852 152.429 390.423 151.559 cv
388.094 150.724 384.666 155.735 384.184 157.514 cv
383.316 160.722 384.618 163.861 384.717 167.066 cv
384.789 169.441 383.708 172.984 385.354 175.004 cv
386.816 172.789 386.491 169.725 386.851 167.205 cv
387.124 165.295 387.561 163.466 388.165 161.675 cv
388.502 160.674 388.891 159.685 389.332 158.701 cv
cp
307.879 213.7 mo
304.349 214.933 302.993 219.142 304.17 222.529 cv
305.978 227.725 314.266 224.87 317.907 224.007 cv
319.862 223.545 332.506 221.097 327.575 217.656 cv
325.074 215.912 321.382 216.238 318.626 215.022 cv
315.363 213.583 311.377 212.479 307.879 213.7 cv
cp
334.858 209.924 mo
332.696 207.838 330.461 207.278 327.491 206.902 cv
325.264 206.62 323.608 207.633 321.371 207.303 cv
318.27 206.846 307.619 201.946 306.753 207.015 cv
309.926 208.33 313.235 206.751 316.438 207.499 cv
319.24 208.154 321.158 210.663 324.12 210.924 cv
326.645 211.147 329.112 210.15 331.727 210.527 cv
332.286 210.608 334.458 211.496 334.84 211.087 cv
335.767 210.096 333.684 209.008 332.951 208.97 cv
334.858 209.924 li
cp
317.207 195.61 mo
316.004 197.713 320.989 200.153 322.103 199.128 cv
322.939 198.359 319.321 191.917 317.207 195.61 cv
cp
325.936 195.745 mo
323.02 197.965 328.518 201.041 330.547 200.516 cv
335.566 199.217 329.326 193.164 325.936 195.745 cv
cp
334.351 184.451 mo
333.377 182.683 330.46 176.574 327.392 178.293 cv
322.795 180.869 332.942 188.12 334.294 189.63 cv
336.642 192.254 339.465 195.824 343.401 195.585 cv
343.953 195.551 339.465 191.338 339.203 191.066 cv
337.296 189.086 335.678 186.857 334.351 184.451 cv
cp
369.803 169.225 mo
365.929 169.029 368.801 177.531 370.138 171.068 cv
370.309 170.239 371.472 169.309 369.803 169.225 cv
cp
367.745 159.581 mo
367.42 158.658 368.128 156.5 366.992 155.87 cv
366.092 155.371 366.813 162.904 366.912 163.432 cv
367.106 164.468 367.239 167.072 368.428 167.326 cv
371.385 167.956 370.897 163.116 369.727 161.863 cv
368.754 160.822 368.247 161.005 367.745 159.581 cv
cp
359.592 153.756 mo
357.214 148.169 357.067 153.652 357.558 156.633 cv
358.266 160.928 359.542 164.963 361.487 168.849 cv
362.529 170.929 364.105 176.897 366.521 177.71 cv
367.842 173.755 364.611 168.942 362.868 165.509 cv
361.014 161.857 361.196 157.528 359.592 153.756 cv
cp
412.879 219.949 mo
416.017 221.39 423.405 220.69 422.72 226.287 cv
421.996 232.192 416.152 223.957 413.237 226.071 cv
410.761 227.868 416.016 228.136 416.507 229.293 cv
417.438 231.484 413.525 231.087 412.454 230.58 cv
413.268 232.315 416.099 232.097 416.511 234.224 cv
417.37 238.643 408.47 235.394 409.336 238.592 cv
409.749 240.113 412.444 239.379 412.76 241.008 cv
413.274 243.659 410.564 241.275 409.837 241.214 cv
408.13 241.071 408.609 243.456 408.692 244.617 cv
408.823 246.429 409.447 247.591 411.304 248.153 cv
412.597 248.544 414.313 248.062 414.668 249.818 cv
415.391 253.392 411.56 249.661 410.538 249.26 cv
409.099 248.695 408.036 249.253 408.501 250.928 cv
408.791 251.976 410.353 253.222 411.241 253.781 cv
413.837 255.417 419.363 257.359 419.535 261.065 cv
419.769 266.109 412.237 261.253 411.064 259.595 cv
408.92 256.564 408.585 250.461 404.723 249.008 cv
403.301 248.473 401.694 248.679 400.269 249.094 cv
398.112 249.722 398.996 249.804 398.3 251.403 cv
397.485 253.273 395.669 251.725 394.665 252.879 cv
394.271 253.333 394.863 254.335 394.455 254.853 cv
393.966 255.474 393.52 255.123 392.876 255.33 cv
391.039 255.92 390.314 256.337 390.998 258.368 cv
391.397 259.554 392.714 262.248 389.877 261.83 cv
388.085 261.566 387.572 258.508 385.908 257.622 cv
384.172 256.696 379.056 257.54 378.557 259.932 cv
378.3 261.165 380.398 262.341 381.043 263.168 cv
383.667 266.533 379.218 268.176 377.71 265.085 cv
376.863 263.349 378.701 258.541 376.162 257.99 cv
373.649 257.445 374.076 260.602 374.141 261.952 cv
374.256 264.339 373.837 266.068 375.021 268.331 cv
376.435 271.033 380.894 275.815 377.905 278.86 cv
375.11 281.707 367.753 279.256 367.522 275.182 cv
367.307 271.384 372.397 269.671 372.459 265.855 cv
372.48 264.528 371.821 263.302 371.598 262.016 cv
371.415 260.963 371.669 259.866 371.489 258.84 cv
371.139 256.847 369.567 257.048 368.51 258.453 cv
368.059 259.051 367.993 259.904 367.554 260.542 cv
367.153 261.123 366.307 261.245 366.213 262.069 cv
366.098 263.073 367.365 264.122 367.769 264.938 cv
369.15 267.729 366.326 268.767 363.885 267.717 cv
360.542 266.277 361.794 263.359 362.564 260.669 cv
363.336 257.974 362.894 254.177 359.499 253.352 cv
356.952 252.733 356.335 255.871 354.532 256.095 cv
352.252 256.378 353.358 254.525 353.168 253.385 cv
352.984 252.283 352.196 251.404 352.015 250.19 cv
347.288 249.071 347.902 256.005 344.097 256.953 cv
341.457 257.61 340.451 255.499 341.086 253.22 cv
341.913 250.25 344.416 247.927 346.724 246.059 cv
348.025 245.006 349.2 244.273 348.909 242.432 cv
348.687 241.036 347.355 240.086 347.146 238.705 cv
346.983 237.633 347.742 236.832 346.978 235.892 cv
346.224 234.964 344.981 235.442 344.462 234.148 cv
343.919 232.796 345.001 232.134 343.372 231.227 cv
341.372 230.111 336.972 229.536 334.952 230.629 cv
331.394 232.552 328.317 236.356 323.936 236.325 cv
319.866 236.296 318.732 232.319 321.185 229.434 cv
325 224.947 331.277 226.135 336.509 225.939 cv
338.666 225.857 342.185 225.78 342.877 223.144 cv
343.565 220.524 340.328 219.326 338.207 219.814 cv
336.234 220.268 331.678 222.479 332.251 218.373 cv
332.833 214.194 336.408 217.204 338.45 217.905 cv
339.425 218.24 343.307 218.425 343.636 216.903 cv
343.996 215.233 341.781 215.321 342.831 213.439 cv
343.364 212.484 344.867 212.449 343.083 211.38 cv
341.471 210.414 338.979 211.253 337.449 210.254 cv
335.662 209.086 337.037 207.692 338.705 207.927 cv
339.978 208.107 341.039 209.275 342.342 209.442 cv
343.997 209.655 345.892 208.203 345.392 206.332 cv
344.926 204.589 342.406 204.355 341.917 202.531 cv
341.38 200.53 342.944 200.15 344.465 201.123 cv
345.526 201.801 346.608 203.279 348.089 202.804 cv
349.672 202.295 348.805 201.889 348.876 200.777 cv
349.023 198.512 352.551 200.769 351.845 198.479 cv
351.009 198.468 350.064 198.042 350.122 197.079 cv
350.201 195.766 350.914 196.509 351.694 196.371 cv
352.493 196.23 353.272 196.892 353.437 195.506 cv
353.757 192.785 341.066 183.796 347.065 181.98 cv
351.25 180.713 353.242 187.881 355.327 190.012 cv
358.012 192.756 357.257 188.173 359.343 188.545 cv
360.337 188.722 360.131 190.201 361.405 190.123 cv
365.266 189.887 358.728 185.234 358.184 184.815 cv
356.793 183.745 354.86 182.13 355.428 180.114 cv
355.861 178.577 357.252 178.1 358.547 178.919 cv
361.374 180.707 361.112 185.487 364.199 187.345 cv
365.119 187.898 366.407 187.116 366.66 186.286 cv
366.932 185.395 365.924 184.247 365.801 183.392 cv
365.479 181.152 367.564 181.625 368.236 183.395 cv
368.649 184.483 369.143 187.451 371.186 186.37 cv
372.125 185.873 372.003 183.729 373.106 183.363 cv
375 182.734 373.837 186.679 376.125 185.669 cv
378.128 184.786 374.722 178.262 374.566 176.665 cv
374.37 174.665 374.417 171.943 376.166 170.569 cv
377.724 169.346 379.364 169.888 380.085 171.656 cv
381.668 175.537 378.339 180.185 379.915 184.002 cv
380.515 185.454 382.602 184.785 383.767 184.72 cv
384.828 182.601 381.269 181.597 381.568 179.398 cv
383.352 178.647 384.187 179.746 384.671 181.223 cv
385.292 183.116 387.322 186.962 389.616 187.173 cv
392.386 187.428 391.982 183.895 391.689 182.081 cv
391.161 178.813 391.008 176.354 394.235 174.348 cv
397.791 172.138 398.749 174.708 397.577 177.878 cv
396.64 180.412 393.769 183.256 393.773 186.024 cv
393.775 187.242 394.699 189.471 395.956 189.88 cv
397.414 190.354 399.071 188.463 400.195 189.578 cv
401.392 190.765 400.072 191.658 401.978 192.401 cv
402.817 192.727 403.661 192.818 404.299 193.484 cv
405.083 194.301 404.996 195.524 405.888 196.228 cv
406.851 196.988 411.209 197.34 409.029 199.444 cv
408.323 200.125 406.872 199.184 406.245 200.062 cv
404.708 202.214 410.022 202.463 411.059 202.391 cv
415.22 202.104 416.039 198.89 419.073 196.891 cv
422.266 194.787 425.284 198.424 423.635 201.589 cv
421.533 205.623 415.872 204.055 412.266 204.433 cv
410.895 204.577 405.411 206.524 408.512 208.553 cv
409.634 209.287 413.71 207.714 412.849 210.397 cv
412.221 212.352 409.496 211.486 410.996 213.579 cv
411.475 214.247 412.444 214.249 412.605 215.225 cv
412.747 216.083 411.846 216.696 411.628 217.434 cv
411.245 218.732 411.82 219.462 412.879 219.949 cv
cp
level3{
gsave
clp
[3.83147e-009 85.1437 -85.1437 3.83147e-009 366.671 177 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .870588 .368627 ]
/C1 [1 .8 .00392157 ]
/N 1.08173 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.83147e-009 85.1437 -85.1437 3.83147e-009 366.671 177 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
255 <~hVI#Dh;-oCh;-oCh;-oCh;-lAgt^]?gt^]?gt^]?gt^Z=gY:K;gY:K;gY:K;gY1B8g=k97g=k97g=k97
g"G'3g"G'3g"G'3g"G'2f\"j/f\"j/f\"j/f[na,f@SX+f@SX+f@SX*f%/F'f%/F'f%/F'f%&=$e^`4#
e^`4#e^`4"eC<!teC<!teC<!teC2mqe'ldpe'ldpe'ldodaHRldaHRldaHRldF$@hdF$@hdF$@hdF$=f
d*U.dd*U.dd*U.ccd0q`cd0q`cd0q`cd'h]cHa_\cHa_\cHa\Zc-=MXc-=MXc-=MWbfn;Tbfn;Tbfn;T
~>
<~?<piB>[1N=>?b<8>$>'3=]nj/=BAR*<`W7$<E3!t<)Z^o;GpCi;,L.d:esk_:/4PY9he;T9M8#N8kMZH
8OuBC7n6'=7Rfg86psF16UO1,6:!n'5X7Ou5<_7p4Ztqj4?GVd3]];^3B9&Y2`EZR2E!EM2)I-G1G^dA
1,1L;0JG.50.nk//M/M)/1W5#.Olkr.4?Sl-RU5f-7'r`,U=TZ,9e<T+X%sN+!2RG*Zc=B*#oq;)]K\6
)&X;/(`*u)()@Z#'bh>r',(uk&eP]f&.f?_%h9'Y%1N^S$O[=L$47(G#RC\@#6kA:"U,#3"9S`-!WiB'
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
150.622 395.281 mo
150.319 394.123 150.341 394.289 149.305 393.8 cv
148.317 393.334 144.678 391.733 145.743 394.267 cv
146.137 395.203 147.135 395.319 147.853 395.882 cv
148.474 396.368 149.115 397.968 149.84 398.181 cv
151.595 398.695 150.862 396.195 150.622 395.281 cv
cp
142.894 393.448 mo
144.289 393.335 144.252 391.823 145.322 391.335 cv
146.5 390.799 152.611 393.634 150.81 389.618 cv
149.408 386.491 144.463 389.041 142.017 388.59 cv
140.78 388.362 136.298 386.912 135.185 387.817 cv
133.575 389.124 137.886 390.171 138.637 390.682 cv
139.755 391.444 141.39 393.57 142.894 393.448 cv
cp
21.5463 392.69 mo
20.9733 393.361 20.1759 393.364 19.5664 393.83 cv
19.4964 393.884 19.4288 393.943 19.3643 394.011 cv
18.6263 394.784 19.2814 395.582 19.6122 396.01 cv
20.1928 396.761 21.8976 398.069 23.0733 397.375 cv
23.7816 396.957 24.109 395.692 24.1934 394.996 cv
24.3433 393.759 24.2116 391.924 23.2685 391.529 cv
22.5457 391.226 22.1389 391.996 21.5463 392.69 cv
cp
11.4996 398.838 mo
11.5605 399.176 11.758 399.438 12.1004 399.511 cv
12.8706 399.677 14.1439 398.941 14.9072 398.249 cv
15.3585 397.84 15.5949 397.714 16.0919 397.615 cv
16.4663 397.54 17.3391 397.626 17.6879 397.122 cv
18.1268 396.489 17.4414 396.291 17.0785 396.29 cv
16.3413 396.287 15.6052 396.851 14.8714 397.312 cv
14.2427 397.707 13.9177 397.438 13.6186 397.148 cv
13.2753 396.816 12.9661 396.455 12.2707 397.037 cv
11.8203 397.414 11.5702 397.918 11.5039 398.375 cv
11.4545 398.141 11.3252 397.924 11.0816 397.751 cv
9.73694 396.795 7.78731 399.484 9.11746 400.333 cv
9.9698 400.878 11.3007 399.838 11.4996 398.838 cv
cp
26.7663 395.635 mo
27.9633 396.399 30.1166 394.038 28.7304 393.052 cv
27.3858 392.096 25.4361 394.785 26.7663 395.635 cv
cp
34.5128 397.157 mo
33.0166 397.958 31.6937 398.439 30.179 398.906 cv
29.7069 399.051 26.3238 399.936 26.7437 400.753 cv
27.3349 401.902 32.9083 398.672 34.0741 398.214 cv
35.3918 397.697 37.0071 397.055 38.2555 396.057 cv
37.566 395.471 35.4938 396.631 34.5128 397.157 cv
cp
27.5357 401.902 mo
27.178 401.383 25.498 401.783 25.7147 402.836 cv
25.9694 404.073 27.4331 401.753 27.5357 401.902 cv
cp
33.3191 403.058 mo
32.9427 404.302 33.0837 405.057 33.5243 405.432 cv
35.1878 406.847 41.1223 402.845 39.6054 399.324 cv
38.5616 396.901 34.1092 400.445 33.3191 403.058 cv
cp
20.8276 369.1 mo
22.0837 368.433 23.6247 369.248 24.9056 369.003 cv
25.0529 368.974 25.1968 368.932 25.3364 368.872 cv
26.934 368.183 25.8463 366.012 25.3027 364.869 cv
24.3484 362.863 21.3462 358.658 18.9209 358.747 cv
17.4597 358.8 16.5457 360.834 16.2276 362.052 cv
15.6626 364.217 15.5086 367.791 17.2423 369.503 cv
18.5711 370.814 19.5284 369.79 20.8276 369.1 cv
cp
41.6054 367.093 mo
41.387 366.428 40.8979 365.841 40.1493 365.53 cv
38.4651 364.831 35.9455 365.565 34.5006 366.473 cv
33.6465 367.01 33.1759 367.128 32.1432 367.063 cv
31.3653 367.013 29.4836 366.412 28.8723 367.178 cv
28.1033 368.14 29.615 368.855 30.3884 369.041 cv
31.9596 369.418 33.38 368.735 34.8223 368.244 cv
36.0581 367.823 36.8207 368.489 37.5337 369.181 cv
38.3522 369.976 39.1053 370.807 40.4342 370.069 cv
41.2948 369.591 41.6959 368.777 41.7174 367.955 cv
41.8838 368.417 42.216 368.888 42.7803 369.334 cv
45.895 371.8 49.344 367.757 46.2881 365.498 cv
44.33 364.05 41.7672 365.323 41.6054 367.093 cv
cp
11.4 358.205 mo
9.25811 355.539 4.57314 357.746 7.03124 361.022 cv
9.41566 364.199 13.7803 361.167 11.4 358.205 cv
cp
34.9176 357.979 mo
36.9184 357.091 37.814 355.809 37.9395 354.427 cv
38.4134 349.208 27.9106 342.556 24.4737 350.264 cv
22.1086 355.568 30.718 359.842 34.9176 357.979 cv
cp
136.258 362.937 mo
132.996 363.404 129.763 364.126 126.534 364.596 cv
126.513 364.599 120.025 365.998 121.619 366.42 cv
125.098 367.341 131.383 365.785 135.086 365.56 cv
139.341 365.301 143.606 365.296 147.794 364.381 cv
152.946 363.255 153.78 358.401 147.642 360.108 cv
143.524 361.253 140.63 362.312 136.258 362.937 cv
cp
134.424 379.513 mo
134.254 380.366 134.586 381.289 135.697 382.08 cv
138.551 384.114 145.338 379.199 139.867 377.025 cv
137.575 376.114 134.797 377.647 134.424 379.513 cv
cp
130.366 402.514 mo
127.517 400.025 122.656 395.777 118.708 396.653 cv
119.217 399.136 120.534 401.73 122.867 402.967 cv
124.185 403.665 125.901 402.811 127.267 403.734 cv
128.681 404.69 128.6 407.119 130.107 407.978 cv
135.526 411.071 132.728 404.578 130.366 402.514 cv
cp
106.749 315.38 mo
108.323 315.118 110.16 316.574 111.092 317.706 cv
111.615 318.343 112.343 319.61 111.81 320.406 cv
110.924 321.727 107.539 321.702 106.108 321.437 cv
105.293 321.286 103.722 321.029 103.971 319.916 cv
103.993 319.819 104.026 319.726 104.068 319.637 cv
104.43 318.863 105.455 318.359 105.584 317.437 cv
105.718 316.482 105.542 315.58 106.749 315.38 cv
cp
97.7058 332.329 mo
95.3324 333.081 94.5135 329.697 97.0192 328.993 cv
97.4732 328.865 97.8506 328.87 98.1596 328.959 cv
97.732 328.632 97.454 328.106 97.5314 327.466 cv
97.651 326.477 98.3811 326.397 99.1176 326.268 cv
99.7592 326.156 100.406 326.008 100.657 325.19 cv
100.951 324.236 101.135 323.22 101.939 322.531 cv
102.335 322.192 103.296 321.665 103.511 322.444 cv
103.682 323.062 102.639 323.829 102.314 324.223 cv
101.883 324.746 101.764 325.041 101.72 325.7 cv
101.647 326.816 101.067 328.435 100.049 329.06 cv
99.5964 329.337 99.0965 329.371 98.6602 329.231 cv
99.5366 329.997 99.2266 331.846 97.7058 332.329 cv
cp
115.174 313.223 mo
117.857 313.179 117.227 316.513 114.989 316.624 cv
112.502 316.748 112.571 313.267 115.174 313.223 cv
cp
78.9677 317.416 mo
77.4411 315.806 72.8022 312.007 75.2346 309.422 cv
77.5213 306.992 79.4937 312.195 80.2801 313.533 cv
82.6216 317.514 83.1683 311.776 85.8324 313.054 cv
87.1946 313.707 86.9413 315.257 88.762 314.289 cv
89.3132 313.996 89.7876 313.373 90.4784 313.532 cv
91.2392 313.707 91.759 315.017 92.0401 315.625 cv
93.1283 317.981 92.4307 319.644 90.9001 321.517 cv
90.3801 322.153 89.0888 322.992 89.1783 323.912 cv
89.2726 324.881 90.0951 324.568 90.7511 324.907 cv
91.3974 325.24 92.1315 326.185 91.9932 326.969 cv
91.6944 328.663 89.1533 327.795 88.2349 328.52 cv
87.086 329.426 88.933 330.464 89.5376 330.959 cv
90.4573 331.712 91.9288 333.71 89.658 333.549 cv
88.279 333.451 87.2803 332.392 86.5632 331.306 cv
86.2027 330.76 85.9986 330.067 85.618 329.55 cv
85.0945 328.838 84.9457 328.965 84.0314 328.73 cv
82.156 328.248 82.4395 325.499 82.3107 324.077 cv
82.0953 321.697 80.5959 319.138 78.98 317.429 cv
78.9759 317.425 78.9718 317.42 78.9677 317.416 cv
cp
52.3959 405.965 mo
50.9619 405.786 49.6536 406.802 49.4736 408.236 cv
49.2937 409.67 50.3103 410.978 51.7443 411.158 cv
53.1783 411.338 54.4866 410.322 54.6666 408.888 cv
54.8465 407.454 53.8299 406.145 52.3959 405.965 cv
cp
42.8365 410.92 mo
38.7736 410.41 35.0666 413.29 34.5568 417.353 cv
34.0469 421.416 36.9273 425.123 40.9903 425.633 cv
45.0533 426.143 48.7603 423.263 49.2701 419.2 cv
49.7799 415.137 46.8995 411.43 42.8365 410.92 cv
cp
134.301 350.607 mo
133.568 347.747 130.655 346.023 127.795 346.757 cv
122.883 348.016 117.881 364.795 110.868 360.678 cv
107.949 358.964 112.416 354.998 109.351 353.666 cv
105.804 352.124 107.554 358.695 104.454 357.703 cv
100.429 356.416 106.84 344.474 107.821 342.86 cv
109.004 340.914 110.716 338.954 110.322 336.446 cv
109.373 330.397 102.33 334.619 100.422 338.064 cv
99.2832 340.121 100.539 344.946 98.3251 346.127 cv
96.7549 346.965 95.4708 344.779 93.9513 345.709 cv
92.447 346.63 92.7752 349.872 91.2472 351.005 cv
88.581 352.968 87.5545 346.624 85.2476 349.362 cv
83.3988 351.556 88.4913 355.696 86.5466 358.07 cv
82.0231 363.591 79.1641 346.257 78.9327 344.54 cv
78.0583 338.052 78.462 330.593 76.4644 324.327 cv
75.2353 320.473 72.5582 309.122 67.4332 308.293 cv
60.6597 307.197 60.6812 319.576 61.3447 323.373 cv
62.8038 331.723 68.2976 338.762 73.098 345.439 cv
68.0625 340.786 73.4635 350.981 74.6153 352.453 cv
75.8515 354.032 77.451 357.547 75.9106 359.384 cv
73.5749 362.168 71.2467 358.716 69.5046 357.416 cv
68.5276 356.687 66.8792 355.466 65.7246 357.077 cv
64.574 358.682 66.4605 359.295 66.8091 360.493 cv
67.3375 362.309 68.9665 362.611 66.6067 363.665 cv
64.6792 364.526 59.7455 362.403 58.1781 361.222 cv
56.4622 359.929 51.5749 356.26 49.8886 359.494 cv
46.7455 365.522 62.1001 364.865 60.4131 371.138 cv
57.9936 369.559 56.0361 369.697 56.9978 372.553 cv
57.9633 375.42 61.6702 374.733 58.4909 378.13 cv
54.1472 382.771 45.9642 377.944 40.7887 378.2 cv
35.3261 378.47 24.652 385.029 30.6017 391.58 cv
35.1033 396.533 43.403 393.057 48.54 391.192 cv
50.478 390.488 59.4382 385.936 59.0177 391.305 cv
58.8215 393.811 54.4636 394.59 58.5088 396.175 cv
61.599 397.385 64.0717 393.798 65.2384 398.572 cv
66.118 402.171 62.3314 404.393 62.4523 407.453 cv
62.6874 413.4 66.5271 406.567 68.0263 405.495 cv
69.6573 404.328 72.9447 403.842 74.0073 405.997 cv
75.0144 408.039 72.5986 410.51 71.5007 411.973 cv
69.2154 415.018 63.0439 419.384 64.7594 423.912 cv
67.7597 431.832 79.867 424.541 78.8202 417.298 cv
78.5593 415.493 76.3744 398.819 82.927 402.688 cv
86.0379 404.525 81.8384 411.456 84.6186 412.374 cv
89.6917 414.05 85.0066 404.998 85.1518 404.128 cv
86.0701 398.625 89.1513 406.305 90.51 406.58 cv
91.8149 406.843 90.0218 401.713 94.0914 405.354 cv
97.5482 408.447 100.725 413.276 102.267 417.634 cv
103.521 421.178 104.256 427.475 108.666 428.555 cv
114.114 429.889 106.948 419.823 105.897 418.164 cv
105.257 417.154 103.073 414.192 104.732 413.059 cv
106.394 411.925 108.58 415.734 109.407 416.635 cv
112.545 420.058 119.619 423.278 123.525 419.086 cv
128.165 414.106 121.721 407.847 117.88 405.067 cv
112.923 401.478 102.496 399.554 100.803 393.094 cv
99.7991 389.26 103.709 388.353 106.231 390.287 cv
107.786 391.479 111.903 395.723 111.841 390.06 cv
111.829 388.961 110.197 387.247 109.147 385.585 cv
108.134 383.984 107.663 382.431 109.707 381.527 cv
112.701 380.204 116.946 389.171 120.12 389.938 cv
125.2 391.165 128.591 384.582 127.586 380.394 cv
126.385 375.387 120.99 373.077 116.878 370.781 cv
114.966 369.713 114.792 367.635 114.851 366.562 cv
115.226 360.041 121.463 355.484 127.79 357.112 cv
128.635 357.33 129.546 357.346 130.451 357.114 cv
133.311 356.38 135.035 353.467 134.301 350.607 cv
cp
59.4901 345.559 mo
61.4945 347.951 61.1808 351.514 58.7895 353.518 cv
56.3982 355.523 52.8349 355.209 50.8305 352.818 cv
50.1961 352.061 49.7955 351.186 49.6179 350.281 cv
49.6175 350.282 li
48.2816 343.507 41.0912 339.642 34.7046 342.261 cv
30.9621 343.808 26.4968 342.842 23.7572 339.573 cv
20.3749 335.538 20.9042 329.525 24.9395 326.142 cv
28.9748 322.76 34.9879 323.289 38.3702 327.325 cv
39.8187 329.053 40.5443 331.144 40.5898 333.235 cv
40.5948 333.228 li
40.7551 340.135 47.1889 345.174 53.9337 343.674 cv
53.9313 343.677 li
55.9242 343.235 58.0882 343.887 59.4901 345.559 cv
cp
level3{
gsave
clp
[5.83506e-009 129.668 -129.668 5.83506e-009 79.1459 315.469 ]ct
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.407843 .266667 .517647 ]
/C1 [.321569 .243137 .478431 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.83506e-009 129.668 -129.668 5.83506e-009 79.1459 315.469 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~BP1sjB4kjiB4kjiAnGXeAnGXeAnGXeAS#FaAS#FaAS#F`A7T4]A7T4]A7T4\@q0"Y@q0"Y@q0"X@U`eU
@U`eU@U`bS@:<SQ@:<SQ@:<PO?smAM?smAM?sm>K?XI/I?XI/I?X@&F?=$rE?=$rE?<piB?!U`A?!U`A
?!LW>>[1N=>[1N=>?b<9>?b<9>?b<9>$>*5>$>*5>$>*4=]nm1=]nm1=]nm0=BJ[-=BJ[-=BJ[,='&I)
='&I)='&F'<`W7%<`W7%<`W4#<E3%!<E3%!<E3!t<)cgr<)cgr<)Z^o;c?Un;c?Un;c6Lk;GpCj;GpCj
~>
<~6pj=/6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4-6:+"*6:+"*6:+"*6:+"*6:+"*
6:+"*6:+"*6:+"*6:+"*6:+"*6:*t(5s[e&5s[e&5s[e&5s[e&5s[e&5s[e&5s[e&5s[e&5s[e&5s[e&
5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S!5<h@s5<h@s5<h@s5<h@s5<h@s
5<h@s5<h@s5<h@s5<h@s5<h@s5<h=q5!D.o5!D.o5!D.o5!D.o5!D.o5!D.o5!D.o5!D.o5!D.o5!D.o
~>
<~KS+o0K7ef/K7ef/K7ef/K7ef/K7ef/K7ec-JqAT+JqAT+JqAT+JqAT+JqAT+JqAT+JUrB'JUrB'JUrB'
JUrB'JUrB'JUrB'JUi9$J:N0#J:N0#J:N0#J:N0#J:N0#J:N0"It)rtIt)rtIt)rtIt)rtIt)rtIt)rt
IsuiqIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ]nI=6NlI=6NlI=6NlI=6NlI=6NlI=6NlI!g<hI!g<hI!g<h
I!g<hI!g<hI!g<hI!^3eH[C*dH[C*dH[C*dH[C*dH[C*dH[C*cH?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
275.597 339.404 mo
275.03 339.891 274.145 339.65 273.515 339.924 cv
273.443 339.955 273.374 339.994 273.309 340.041 cv
272.569 340.578 273.377 341.568 273.788 342.091 cv
274.509 343.011 276.535 344.824 277.769 344.499 cv
278.513 344.303 278.748 343.153 278.771 342.492 cv
278.811 341.315 278.478 339.463 277.391 338.784 cv
276.558 338.264 276.185 338.9 275.597 339.404 cv
cp
281.692 343.91 mo
283.099 345.032 285.249 343.359 283.61 341.96 cv
282.02 340.604 280.129 342.664 281.692 343.91 cv
cp
269.647 346.736 mo
268.722 347.422 268.41 348.184 268.505 348.908 cv
268.863 351.641 275.021 353.845 275.897 349.493 cv
276.499 346.497 271.588 345.296 269.647 346.736 cv
cp
231.951 424.917 mo
231.275 427.012 226.573 421.832 228.9 421.639 cv
229.919 421.554 232.453 423.362 231.951 424.917 cv
cp
233.364 421.593 mo
232.482 424.328 226.347 417.568 229.383 417.316 cv
230.713 417.205 234.019 419.564 233.364 421.593 cv
cp
227.829 421.339 mo
228.228 422.853 226.184 426.217 224.852 425.361 cv
222.036 423.552 223.941 420.064 224.53 419.662 cv
225.198 419.205 227.158 418.794 227.829 421.339 cv
cp
300.338 387.276 mo
297.992 387.039 298.413 383.515 300.54 384.996 cv
301.472 385.645 302.079 387.451 300.338 387.276 cv
cp
304.346 387.87 mo
301.285 387.562 301.833 382.963 304.609 384.896 cv
305.825 385.743 306.617 388.099 304.346 387.87 cv
cp
299.89 384.277 mo
298.945 384.679 294.37 383.681 293.971 382.741 cv
293.127 380.753 297.689 381.649 298.527 381.991 cv
299.477 382.378 301.48 383.602 299.89 384.277 cv
cp
288.229 376.557 mo
287.206 377.727 281.483 376.865 281.014 375.5 cv
280.375 373.64 285.886 373.277 287.125 373.483 cv
288.429 373.7 289.328 375.3 288.229 376.557 cv
cp
279.308 381.946 mo
276.656 381.293 266.869 379.77 266.398 376.408 cv
267.572 376.154 268.865 377.1 270.062 377.352 cv
272.426 377.849 274.947 377.7 277.346 377.904 cv
282.505 378.34 287.264 380.23 291.387 383.365 cv
292.979 384.576 297.332 389.065 292.459 387.35 cv
287.932 385.756 284.045 383.112 279.308 381.946 cv
cp
237.208 327.061 mo
236.739 323.316 238.625 320.524 239.319 317.059 cv
239.564 315.834 239.996 309.071 236.267 310.163 cv
232.136 311.373 234.893 317.721 235.432 320.267 cv
236.68 326.171 233.997 331.049 233.561 336.539 cv
239.182 334.707 237.684 330.852 237.208 327.061 cv
cp
214.578 328.963 mo
215.231 327.099 211.75 325.574 211.017 326.822 cv
209.986 328.577 214.054 330.457 214.578 328.963 cv
cp
218.25 334.618 mo
219.441 332.738 215.238 331.867 215.308 331.478 cv
215.063 332.835 217.237 336.218 218.25 334.618 cv
cp
241.309 301.099 mo
245.417 300.908 241.087 296.941 237.77 296.789 cv
233.106 296.574 238.016 301.253 241.309 301.099 cv
cp
239.675 307.045 mo
244.838 307.357 238.121 302.99 238.854 302.887 cv
236.302 303.245 235.28 306.78 239.675 307.045 cv
cp
178.1 409.405 mo
178.136 410.233 177.421 410.456 177.256 411.09 cv
177.237 411.163 177.225 411.241 177.223 411.326 cv
177.195 412.302 178.442 412.919 179.092 413.255 cv
180.232 413.845 182.843 414.68 183.33 413.662 cv
183.623 413.049 182.877 411.696 182.38 410.977 cv
181.496 409.7 179.868 407.904 178.694 407.769 cv
177.794 407.667 178.062 408.548 178.1 409.405 cv
cp
174.117 418.319 mo
174.451 418.641 174.844 418.847 175.213 418.826 cv
176.042 418.779 176.582 417.692 176.7 416.791 cv
176.769 416.258 176.878 416.066 177.244 415.829 cv
177.519 415.651 178.376 415.496 178.275 414.897 cv
178.149 414.143 177.369 414.135 177.041 414.234 cv
176.375 414.434 176.177 415.201 175.896 415.864 cv
175.655 416.432 175.142 416.254 174.634 416.047 cv
174.051 415.809 173.476 415.534 173.329 416.308 cv
173.234 416.809 173.424 417.381 173.74 417.856 cv
173.503 417.636 173.209 417.455 172.847 417.349 cv
170.849 416.765 171.308 419.99 173.204 420.471 cv
174.42 420.779 174.761 419.373 174.117 418.319 cv
cp
185.221 410.905 mo
186.928 411.338 186.923 408.385 184.863 407.783 cv
182.866 407.199 183.325 410.423 185.221 410.905 cv
cp
193.446 410.286 mo
192.759 411.5 191.964 412.345 190.985 413.229 cv
190.68 413.505 188.363 415.323 189.413 416.022 cv
190.891 417.007 193.249 412.243 193.921 411.463 cv
194.681 410.582 195.607 409.495 195.909 408.154 cv
194.806 407.759 193.896 409.49 193.446 410.286 cv
cp
191.072 416.952 mo
190.323 416.532 189.14 417.396 190.201 418.387 cv
191.449 419.552 190.857 416.831 191.072 416.952 cv
cp
197.228 416.509 mo
197.914 417.856 198.662 418.571 199.367 418.824 cv
202.029 419.778 204.076 414.142 199.813 411.044 cv
196.879 408.912 195.789 413.682 197.228 416.509 cv
cp
196.969 343.019 mo
196.615 345.483 193.211 344.749 193.666 342.187 cv
193.749 341.722 193.917 341.385 194.132 341.145 cv
193.651 341.388 193.057 341.41 192.514 341.062 cv
191.675 340.524 191.92 339.832 192.125 339.113 cv
192.303 338.486 192.45 337.839 191.823 337.257 cv
191.092 336.578 190.256 335.971 189.986 334.947 cv
189.853 334.443 189.796 333.349 190.59 333.494 cv
191.222 333.608 191.459 334.881 191.672 335.345 cv
191.956 335.961 192.17 336.196 192.745 336.522 cv
193.717 337.073 194.923 338.299 195.043 339.487 cv
195.097 340.016 194.91 340.48 194.594 340.813 cv
195.665 340.356 197.196 341.439 196.969 343.019 cv
cp
292.609 392.186 mo
294.302 392.286 299.207 391.922 297.646 394.921 cv
296.178 397.741 293.3 395.695 292.316 395.331 cv
289.385 394.249 290.172 398.088 287.555 398.852 cv
286.217 399.243 286.097 398.144 284.715 399.796 cv
284.296 400.297 284.018 400.955 283.377 401.259 cv
282.672 401.593 281.927 401.092 281.547 400.882 cv
280.073 400.069 280.317 398.643 281.245 396.604 cv
281.56 395.912 282.507 394.647 282.225 394.134 cv
281.929 393.594 281.277 394.264 280.627 394.438 cv
279.987 394.609 279.135 394.455 279.083 393.894 cv
278.971 392.681 281.39 391.737 282.035 390.759 cv
282.842 389.535 280.994 389.971 280.355 390.019 cv
279.382 390.091 277.652 389.721 279.677 388.5 cv
280.908 387.758 282.017 387.828 282.885 388.077 cv
283.322 388.203 283.654 388.509 284.101 388.606 cv
284.717 388.738 284.82 388.574 285.673 388.187 cv
287.423 387.392 287.781 389.244 288.208 390.042 cv
288.923 391.377 290.802 392.076 292.595 392.185 cv
292.6 392.185 292.604 392.185 292.609 392.186 cv
cp
175.393 353.411 mo
173.28 354.086 167.842 356.612 166.571 353.298 cv
165.377 350.182 170.921 350.668 172.467 350.541 cv
177.07 350.163 172.14 347.176 174.449 345.332 cv
175.63 344.39 176.916 345.292 176.835 343.231 cv
176.811 342.607 176.456 341.909 176.899 341.356 cv
177.388 340.747 178.793 340.848 179.463 340.86 cv
182.058 340.904 183.252 342.255 184.273 344.447 cv
184.62 345.192 184.814 346.72 185.682 347.039 cv
186.596 347.376 186.672 346.499 187.262 346.055 cv
187.843 345.618 189.013 345.368 189.659 345.833 cv
191.054 346.839 189.168 348.75 189.421 349.892 cv
189.738 351.32 191.476 350.109 192.185 349.779 cv
193.263 349.278 195.701 348.821 194.569 350.797 cv
193.882 351.996 192.494 352.435 191.204 352.609 cv
190.556 352.696 189.843 352.579 189.212 352.696 cv
188.343 352.859 188.393 353.048 187.784 353.769 cv
186.535 355.249 184.182 353.798 182.845 353.296 cv
180.608 352.455 177.652 352.693 175.411 353.406 cv
175.405 353.407 175.399 353.409 175.393 353.411 cv
cp
275.49 324.627 mo
273.978 324.201 274.18 324.286 272.938 325.133 cv
271.753 325.94 267.522 328.994 271.098 329.474 cv
272.419 329.651 273.214 328.598 274.328 328.16 cv
275.292 327.782 277.529 328.12 278.252 327.442 cv
280.001 325.797 276.684 324.964 275.49 324.627 cv
cp
268.276 332.153 mo
269.076 330.499 267.339 329.535 267.5 328 cv
267.677 326.311 274.949 321.282 269.207 320.648 cv
264.736 320.154 264.333 327.446 262.196 329.914 cv
261.114 331.162 256.493 335.269 256.776 337.131 cv
257.184 339.822 261.236 335.64 262.315 335.13 cv
263.92 334.371 267.413 333.935 268.276 332.153 cv
cp
246.874 332.468 mo
247.726 333.227 248.991 333.465 250.625 332.735 cv
254.825 330.858 253.777 319.909 247.679 324.654 cv
245.124 326.642 245.01 330.805 246.874 332.468 cv
cp
204.14 395.884 mo
203.985 394.766 201.783 393.661 200.503 393.838 cv
199.223 394.015 198.31 395.066 198.465 396.185 cv
198.619 397.304 199.783 398.067 201.063 397.89 cv
202.343 397.713 204.294 397.003 204.14 395.884 cv
cp
194.415 395.648 mo
190.913 393.9 184.897 395.125 183.821 397.28 cv
182.746 399.436 184.713 402.6 188.215 404.348 cv
191.718 406.095 195.429 405.765 196.504 403.61 cv
197.58 401.455 197.917 397.396 194.415 395.648 cv
cp
272.55 371.173 mo
273.979 371.424 274.421 371.339 275.447 370.135 cv
275.97 369.521 275.768 368.733 276.611 368.093 cv
277.482 367.432 278.447 367.659 279.405 367.417 cv
281.27 366.946 282.448 366.267 283.202 364.292 cv
284.461 360.989 282.878 356.837 279.322 355.888 cv
274.895 354.706 272.918 359.774 270.418 362.333 cv
268.778 364.011 266.861 365.66 264.979 367.057 cv
264.228 367.615 258.248 371.962 262.719 371.825 cv
264.651 371.766 265.663 370.797 267.439 370.444 cv
267.936 370.345 268.436 370.34 268.936 370.391 cv
270.155 370.515 271.372 370.967 272.55 371.173 cv
cp
248.998 408.841 mo
248.219 408.546 247.476 408.201 246.831 407.796 cv
245.287 406.826 243.957 405.574 242.031 405.367 cv
240.197 405.17 240.292 407.12 240.18 408.498 cv
239.954 411.29 239.968 414.549 240.74 417.274 cv
242.051 421.904 245.142 423.841 249.996 422.742 cv
252.518 422.171 256.969 420.548 257.394 417.627 cv
257.861 414.407 256.177 410.647 252.767 409.912 cv
251.584 409.656 250.244 409.313 248.998 408.841 cv
cp
185.357 356.698 mo
180.365 358.121 176.369 366.759 179.449 371.287 cv
182.195 375.325 186.577 373.684 188.523 370.17 cv
189.462 368.475 189.994 365.72 191.685 364.594 cv
192.909 363.779 195.786 364.64 196.556 363.346 cv
198.534 359.998 187.481 356.093 185.357 356.698 cv
cp
226.774 342.534 mo
226.814 344.209 226.592 346.083 228.733 346.125 cv
227.2 346.095 236.591 321.044 224.454 323.074 cv
214.797 324.692 225.814 337.09 226.676 341.451 cv
226.743 341.786 226.765 342.155 226.774 342.534 cv
cp
220.163 349.634 mo
223.878 348.793 226.865 355.923 230.893 351.784 cv
232.398 350.237 232.467 343.681 235.749 344.761 cv
237.107 345.208 236.217 347.323 238.134 346.894 cv
239.51 346.587 239.684 344.23 239.955 343.216 cv
240.454 341.35 239.931 334.578 242.085 333.915 cv
246.326 332.61 242.896 340.581 243.029 342.067 cv
245.163 342.482 246.908 341.104 248.934 340.875 cv
250.872 340.656 253.137 341.111 254.985 341.663 cv
258.562 342.732 261.997 344.941 263.659 348.389 cv
265.626 352.471 264.083 356.011 261.532 359.375 cv
259.548 361.993 254.624 365.773 255.482 369.459 cv
256.105 369.476 256.608 369.904 257.253 369.884 cv
258.279 371.653 255.913 371.777 256.265 373.769 cv
256.554 375.406 259.063 376.763 259.767 378.328 cv
260.828 380.691 260.148 381.387 263.14 382.082 cv
264.62 382.426 267.755 381.584 268.636 383.157 cv
269.797 385.23 266.72 385.911 267.003 387.837 cv
270.259 389.259 273.127 393.526 273.832 396.914 cv
274.812 401.625 272.045 402.823 268.617 404.896 cv
266.283 406.307 267.222 405.551 267.079 408.296 cv
266.881 412.108 264.616 413.886 261.162 410.402 cv
258.943 408.163 258.217 402.547 255.101 401.256 cv
249.974 399.131 255.223 405.615 253.682 407.369 cv
251.697 409.631 250.186 403.732 249.397 402.75 cv
247.666 400.597 245.429 400.388 242.993 399.13 cv
241.399 398.307 239.207 395.523 238.031 398.839 cv
236.789 402.343 240.134 401.877 235.976 403.158 cv
233.606 403.888 233.566 403.936 232.643 406.017 cv
232.227 406.954 232.727 407.819 232.091 408.912 cv
231.558 409.828 230.307 410.271 229.623 411.08 cv
228.521 412.384 228.084 413.972 227.149 415.384 cv
225.321 418.143 222.669 419.791 219.298 418.795 cv
214.296 417.316 216.814 412.024 218.154 408.778 cv
218.842 407.11 220.048 404.952 218.536 403.293 cv
216.975 401.58 215.525 402.375 214.579 404.043 cv
213.369 406.177 214.74 408.706 212.566 410.628 cv
210.704 412.275 207.126 412.36 205.878 409.941 cv
204.151 406.592 207.933 402.942 209.853 400.628 cv
210.737 399.562 212.448 398.444 211.784 396.848 cv
211.453 396.053 208.516 394.859 208.159 395.929 cv
208.873 393.791 210.602 390.832 208.373 389.629 cv
207.667 389.249 205.998 390.084 205.021 389.724 cv
204.024 389.357 203.769 387.892 202.652 387.62 cv
200.743 387.155 198.09 389.104 196.004 389.198 cv
193.571 389.306 189.286 389.133 187.465 387.294 cv
181.822 381.592 196 376.639 199.471 375.11 cv
201.182 374.357 204.854 372.926 203.222 370.852 cv
201.924 369.203 197.86 371.043 200.519 367.182 cv
201.572 365.653 206.645 365.421 206.754 363.825 cv
206.888 361.863 203.61 362.215 203.737 359.827 cv
203.864 357.433 207.545 357.343 205.85 354.679 cv
205.183 353.63 199.85 352.077 202.529 349.589 cv
204.204 348.034 206.344 351.81 208.374 351.72 cv
210.168 351.64 206.498 344.964 206.199 344.503 cv
204.378 341.696 202.316 339.069 202.574 335.457 cv
202.822 331.997 204.857 331.429 207.505 333.641 cv
212.175 337.542 210.595 351.141 218.822 349.887 cv
219.356 349.806 219.794 349.717 220.163 349.634 cv
cp
level3{
gsave
clp
[5.50805e-009 122.401 -122.401 5.50805e-009 236.098 294.477 ]ct
/7 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.886275 .258824 .133333 ]
/C1 [.752941 .133333 .133333 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.50805e-009 122.401 -122.401 5.50805e-009 236.098 294.477 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~io/kTiSibSi8EPOi8EPOhr!>Khr!>JhVR,GhVR,Fh;-oCh;-lAgt^]?gt^Z=gY:K;gY1B8g=k97g=b04
g"G'3f\"j/f\"j/f@SX+f@SX*f%/F'f%/F&e^`4#e^`1!eC<!teC;sre'ldpe'c[mdaHRlda?IidF$@h
dEp7ed*U.dcd0q`cd0q`cHa_\cHa_[c-=MXc-=MWbfn;Tbfn8RbKJ)PbKJ&Nb0%lLb/qcIaiVZHaiMQE
aN2HDa2c6@a2c6@`l?$<`l?$;`Pog8`Pog7`5KU4`5KR2_o'C0_o'@._SX1,_SO()_83t(_8*k%^qdb$
~>
<~6:!n'5s[e&5X7S"5X7S"5<h@s5<h@s5<_7p5!D.o5!;%l4Ztqk4Zkhh4?P_g4?GVd4$,Mc4$#D`3]];_
3]T2\3B9)[3B/uX3&ilW3&`cT2`EZS2`<QP2E!HO2Dm?L2)R6K2)I-H1c.$G1c$pD1G^gC1GU^@1,:U?
1,1L<0ekC;0eb:80JG170J>(40/"t30.nk0/hSb//hJY,/M/P+/M&G(/1`>'/1W5$.k<,#.k3"u.Olnt
.Oceq.4H\p.4?Sm-n$Jl-mpAi-RU8h-RL/e-71&d-7'ra,pai`,pX`],U=W\,U4NY,9nEX,9e<U+sJ3T
~>
34 ]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
331.829 413.115 mo
328.97 415.581 325.601 415.557 322.332 416.899 cv
321.176 417.373 315.307 420.76 318.282 423.26 cv
321.577 426.028 325.335 420.217 327.156 418.358 cv
331.38 414.048 336.927 413.58 341.74 410.901 cv
337.101 407.237 334.722 410.62 331.829 413.115 cv
cp
307.943 424.083 mo
305.508 420.769 304.604 426.571 306.314 429.417 cv
308.719 433.419 309.895 426.74 307.943 424.083 cv
cp
313.798 422.149 mo
311.197 417.678 311.282 425.69 310.791 425.137 cv
312.502 427.063 316.012 425.955 313.798 422.149 cv
cp
350.491 413.231 mo
351.863 412.27 353.546 411.417 352.395 409.611 cv
353.219 410.904 327.161 416.963 335.575 425.943 cv
342.271 433.086 346.49 417.046 349.643 413.912 cv
349.886 413.672 350.18 413.449 350.491 413.231 cv
cp
432.761 363.874 mo
431.7 362.715 431.827 362.895 430.325 362.96 cv
428.893 363.023 423.687 363.39 426.475 365.682 cv
427.505 366.528 428.735 366.052 429.912 366.266 cv
430.931 366.451 432.655 367.917 433.626 367.721 cv
435.98 367.244 433.598 364.79 432.761 363.874 cv
cp
422.665 366.473 mo
424.216 365.488 423.248 363.755 424.192 362.534 cv
425.232 361.191 434.063 360.745 429.516 357.183 cv
425.975 354.409 421.791 360.396 418.676 361.368 cv
417.098 361.86 411.008 362.917 410.267 364.649 cv
409.197 367.152 414.844 365.73 416.03 365.865 cv
417.793 366.065 420.993 367.534 422.665 366.473 cv
cp
416.873 415.593 mo
416.192 415.126 416.01 414.152 415.49 413.569 cv
415.43 413.502 415.365 413.441 415.295 413.385 cv
414.494 412.753 413.984 413.833 413.706 414.387 cv
413.219 415.36 412.527 417.902 413.362 419.098 cv
413.866 419.818 414.98 419.777 415.571 419.637 cv
416.623 419.388 418.102 418.585 418.215 417.294 cv
418.302 416.304 417.576 416.075 416.873 415.593 cv
cp
409.222 405.655 mo
409.029 405.928 408.955 406.318 409.077 406.77 cv
409.353 407.788 410.477 408.872 411.316 409.374 cv
411.812 409.671 412.014 409.878 412.329 410.413 cv
412.565 410.816 412.945 411.908 413.453 412.027 cv
414.091 412.176 413.879 411.241 413.698 410.807 cv
413.331 409.925 412.59 409.38 411.918 408.777 cv
411.342 408.26 411.357 407.714 411.399 407.185 cv
411.447 406.579 411.531 405.996 410.798 405.51 cv
410.323 405.196 409.865 405.195 409.53 405.386 cv
409.66 405.189 409.738 404.907 409.731 404.513 cv
409.69 402.343 406.937 401.606 407.041 403.696 cv
407.108 405.035 408.461 406.009 409.222 405.655 cv
cp
415.625 423.007 mo
415.265 424.738 417.691 426.547 418.191 424.507 cv
418.675 422.528 416.024 421.083 415.625 423.007 cv
cp
407.783 411.255 mo
406.769 410.469 405.961 410.335 405.367 410.612 cv
403.125 411.658 403.928 418.568 408.141 418.397 cv
411.041 418.279 409.912 412.905 407.783 411.255 cv
cp
422.167 395.543 mo
420.538 396.077 418.282 396.183 416.418 395.394 cv
415.303 394.921 413.255 393.608 412.514 394.829 cv
412.153 395.424 412.22 395.587 411.571 395.697 cv
411.1 395.777 410.529 395.653 410.039 395.706 cv
409.065 395.812 408.056 396.141 407.707 397.142 cv
407.133 398.789 408.954 398.479 409.713 398.087 cv
410.212 397.83 411.374 396.853 411.839 398.081 cv
412.211 399.063 411.042 400.632 412.279 401.535 cv
412.851 401.952 413.72 401.777 414.104 401.423 cv
414.494 401.064 414.418 400.319 415.178 400.636 cv
415.9 400.937 416.286 402.246 416.669 402.892 cv
417.798 404.795 418.932 405.986 420.952 406.109 cv
421.473 406.14 422.579 406.273 422.864 405.769 cv
423.123 405.312 422.74 404.705 422.626 404.172 cv
422.247 402.413 423.383 403.224 424.154 402.458 cv
425.662 400.962 421.378 398.254 424.891 398.082 cv
426.071 398.024 430.445 398.619 429.04 395.923 cv
427.546 393.056 423.715 395.032 422.18 395.539 cv
422.176 395.54 422.172 395.541 422.167 395.543 cv
cp
367.546 313.219 mo
367.992 311.371 368.979 308.89 367.588 306.652 cv
364.855 302.256 363.162 310.49 363.269 311.774 cv
363.405 313.392 364.117 315.06 364.469 316.695 cv
364.701 317.777 364.289 319.642 365.592 320.64 cv
365.436 320.52 366.132 318.052 366.738 315.984 cv
367.128 314.654 367.48 313.49 367.546 313.219 cv
cp
364.576 327.163 mo
363.36 325.815 363.05 326.999 361.528 326.753 cv
358.878 326.324 358.135 323.368 357.374 321.098 cv
355.84 316.518 355.174 311.286 352.743 307.056 cv
350.913 303.87 348.967 304.013 348.031 307.663 cv
346.719 312.784 348.347 318.904 350.315 323.626 cv
352.748 329.465 356.41 334.645 359.769 339.967 cv
361.298 342.389 362.923 344.875 364.294 347.366 cv
365.211 349.031 365.951 352.824 368.173 353.287 cv
369.509 353.565 366.194 336.584 366.01 335.424 cv
365.701 333.472 365.975 328.715 364.576 327.163 cv
cp
387.48 337.808 mo
387.489 339.729 387.636 341.994 388.671 340.671 cv
389.253 339.927 389.472 337.065 388.94 335.481 cv
388.145 333.121 387.397 334.463 387.481 335.724 cv
387.503 336.061 387.476 336.896 387.48 337.808 cv
cp
398.462 338.031 mo
397.22 336.964 396.48 339.224 396.179 340.114 cv
396.016 340.594 395.319 342.396 395.932 343.21 cv
396.659 344.175 398.384 342.165 398.819 341.833 cv
399.473 341.334 400.022 339.372 398.462 338.031 cv
cp
393.04 337.058 mo
390.623 334.292 390.423 341.544 389.959 342.859 cv
389.388 344.477 385.216 346.905 387.492 350.369 cv
387.834 350.89 389.41 347.417 389.699 347.187 cv
391.331 345.89 392.946 345.686 393.707 343.053 cv
394.112 341.655 394.841 339.12 393.04 337.058 cv
cp
329.204 379.133 mo
332.049 377.856 335.149 376.15 331.253 375.499 cv
329.065 375.133 324.395 376.694 323.026 378.518 cv
320.989 381.239 324.378 381.455 326.1 380.503 cv
326.56 380.249 327.853 379.739 329.204 379.133 cv
cp
309.124 362.845 mo
309.843 365.371 314.585 364.973 316.469 364.83 cv
317.486 364.753 321.465 364.592 321.538 363.155 cv
321.624 361.453 315.425 360.239 314.122 359.817 cv
312.162 359.184 308.221 359.669 309.124 362.845 cv
cp
317.753 371.455 mo
318.127 376.828 329.298 372.35 332.12 372.167 cv
335.589 371.941 346.961 376.476 347.888 370.852 cv
348.027 370.005 339.925 369.974 339.045 369.7 cv
334.082 368.155 330.776 365.916 325.44 366.529 cv
322.606 366.855 317.476 367.45 317.753 371.455 cv
cp
322.637 342.216 mo
323.145 341.488 323.014 340.887 322.591 340.42 cv
321.989 339.754 320.793 339.362 320.014 339.268 cv
316.738 338.876 320.578 345.169 322.637 342.216 cv
cp
334.236 355.009 mo
334.009 354.152 333.465 353.863 332.836 353.884 cv
331.938 353.913 330.866 354.573 330.291 355.107 cv
327.875 357.354 335.159 358.489 334.236 355.009 cv
cp
312.453 336.779 mo
313.1 337.69 313.87 337.79 314.603 337.488 cv
315.65 337.056 316.624 335.803 317.066 334.918 cv
318.924 331.196 309.823 333.079 312.453 336.779 cv
cp
336.976 354.27 mo
335.761 355.629 335.88 356.888 336.625 357.944 cv
337.69 359.452 340.032 360.548 341.598 360.931 cv
348.183 362.542 341.907 348.757 336.976 354.27 cv
cp
340.488 313.38 mo
339.996 311.592 335.745 297.56 332.677 301.399 cv
330.775 303.779 333.984 310.695 334.886 312.879 cv
337.094 318.225 340.155 323.17 343.497 327.873 cv
345.314 330.43 347.239 332.58 348.24 335.58 cv
348.869 337.464 349.278 340.905 351.258 341.937 cv
351.645 339.343 349.873 337.246 348.964 334.986 cv
348.072 332.771 347.539 330.52 346.505 328.327 cv
344.141 323.315 341.965 318.754 340.488 313.38 cv
cp
399.867 412.47 mo
398.109 412.274 396.526 413.539 396.33 415.297 cv
396.133 417.054 397.399 418.638 399.156 418.834 cv
400.913 419.03 402.497 417.765 402.693 416.008 cv
402.889 414.25 401.624 412.667 399.867 412.47 cv
cp
418.811 381.595 mo
416.378 381.323 414.186 383.075 413.914 385.508 cv
413.642 387.942 415.394 390.134 417.827 390.406 cv
420.26 390.678 422.453 388.926 422.725 386.493 cv
422.997 384.06 421.245 381.867 418.811 381.595 cv
cp
409.327 384.567 mo
407.921 384.41 406.654 385.422 406.497 386.828 cv
406.34 388.234 407.353 389.5 408.759 389.658 cv
410.164 389.815 411.431 388.802 411.588 387.396 cv
411.745 385.991 410.733 384.724 409.327 384.567 cv
cp
395.534 407.476 mo
394.777 407.392 394.095 407.937 394.011 408.694 cv
393.926 409.451 394.471 410.133 395.228 410.218 cv
395.985 410.302 396.667 409.757 396.752 409 cv
396.837 408.243 396.291 407.561 395.534 407.476 cv
cp
415.8 357.524 mo
415.37 357.596 414.95 357.578 414.541 357.517 cv
414.558 357.538 li
411.348 357.077 400.745 363.275 401.977 370.727 cv
403.335 378.944 404.393 388.051 400.265 394.866 cv
395.835 402.18 388.03 404.987 380.283 406.778 cv
374.156 408.194 375.83 415.363 376.942 416.647 cv
376.933 416.646 li
377.561 417.367 377.649 418.445 377.076 419.263 cv
376.401 420.225 375.073 420.458 374.111 419.783 cv
373.148 419.108 372.915 417.781 373.59 416.818 cv
373.721 416.631 373.883 416.48 374.056 416.35 cv
374.056 416.35 374.039 416.35 374.042 416.348 cv
374.987 415.589 378.385 408.261 372.432 405.896 cv
360.619 401.202 354.847 419.077 355.725 422.882 cv
355.719 422.878 li
356.23 425.077 355.21 427.422 353.109 428.494 cv
350.634 429.757 347.603 428.775 346.34 426.3 cv
345.077 423.824 346.059 420.794 348.534 419.531 cv
349.007 419.289 349.501 419.131 349.998 419.048 cv
353.887 418.403 365.958 408.276 359.162 396.769 cv
358.011 394.819 357.184 392.734 355.943 390.878 cv
350.138 382.192 338.728 387.051 336.856 389.569 cv
336.854 389.552 li
335.772 391.017 333.803 391.624 332.046 390.894 cv
329.978 390.035 328.999 387.662 329.858 385.594 cv
330.718 383.526 333.091 382.547 335.158 383.406 cv
335.561 383.574 335.907 383.811 336.222 384.08 cv
336.219 384.053 li
338.529 386.005 349.922 388.74 353.959 379.446 cv
364.125 356.046 336.86 342.277 329.996 342.407 cv
330.005 342.399 li
326.155 342.478 322.599 339.951 321.547 336.067 cv
320.309 331.491 323.015 326.778 327.591 325.539 cv
332.167 324.301 336.88 327.007 338.119 331.583 cv
338.355 332.457 338.446 333.337 338.409 334.197 cv
338.121 340.874 351.251 363.878 371.936 357.436 cv
385.025 353.36 379.859 331.775 376.425 328.31 cv
376.434 328.31 li
374.327 326.19 373.84 322.839 375.459 320.167 cv
377.365 317.019 381.463 316.013 384.611 317.92 cv
387.758 319.827 388.765 323.924 386.858 327.072 cv
386.493 327.674 386.048 328.196 385.545 328.636 cv
381.533 332.147 373.933 350.061 393.619 361.986 cv
403 367.668 410.836 356.385 411.093 353.199 cv
411.104 353.213 li
411.244 351.397 412.591 349.838 414.469 349.525 cv
416.677 349.158 418.766 350.65 419.134 352.859 cv
419.501 355.068 418.009 357.156 415.8 357.524 cv
cp
level3{
gsave
clp
[5.15835e-009 114.63 -114.63 5.15835e-009 370.035 310 ]ct
/8 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.290196 .764706 .941176 ]
/C1 [0 .584314 .913725 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.15835e-009 114.63 -114.63 5.15835e-009 370.035 310 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~8kDTG84Z9A7n6'=7Rfg877BU46pj=/6UF++5s[e&5X7S!5<h@r5!D+m4Zkhh4?GVd3]];_3B9)Z3&ilV
2`EWQ2E!EM2)I-H1c$pD1,:U?0ekC:0JG.50/"q1/hJY,/M&G(.k<,#.Olns.4H\o-n$Gj-RU5f-7'ra
,pX`],9nEW+sJ3S+X%sN+<VaJ+!)IE*ZZ7A*#oq<)]K_7)B'M3)&X8.(`*u)(D[c%'bqGu'GM5p',)#l
&eYcg&J5Qc&.]9^%h9'Z%1NaU$k*OP$O[:K$47(G#m^eB#R:S>"pP89"U,&4"9\i0!s8T+!WiB'!<<*"
~>
<~_ns:-_SX.*_83t(^qdb$^q[Y!^V@Ot^:q=q]tM+m]tM(k]Y(nh]=Y\e]=PSb]"5J`\[f8]\@B&Y\@B#W
\$riT[^NWQ[^ENN[C*BK['[3IZa7!EZa6sCZEgd@Z*CR=Z*:I:Yct=7YHP.5Y-+q1Y-"h.Xf\_,XK8M)
XK/D&X/i8#WiE)!WMukrWMlboW2QYmVl-GjVP^5fVP^2dV5:#aUnjf^Una][USFTYU8"BVTqS0RTqS-P
TV.sMT:_aJT:VXGSt;LDSXl=BS=H+>S=H(<S"#n9R[T\6R[KS3R@0G0R$a8.Q^=&*Q^3r'QBmi%Q'IW"
~>
<~nF,i7n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*]W3mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
mdBN2mdBN2mdBK0mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs9,m-O**m-O**m-O**m-O**
m-O**m-O**m-O**m-O**m-O*)lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m%lK[["lK[["
lK[["lK[["lK[["lK[["lK[["lK[["lK[["l07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hs
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (\700\755\762\756\755) ()
%%Title: (1511.m00.i125.n066.P.c25.285392033 Colorful ink spots set vector.eps)
%%CreationDate: 11/25/2015 8:57 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KCKhHDoCqj&YA:m?4J8VaVgE`9AcS)9&HtV=o)V2k+;0j)K7!(cir@](qGm88'*p:nH7*70ZYIqQl)s<SF&gQ1c"3BX7]"Zq
%bVoL-PZed#7HHNYr,M`6@rC^KD7eL>mc($*gI[+kOh9_Ejk`S:dG8OrbLK?8f;ppcSY]<RmntC<=ZW?c8u_R8HG0,U.U+QkO6N7[
%]!kbBeZ6Z$qkV_9l*S?fmN19`\jL\h!;Oe*rndJX2=4AT?%RaLk'=GfZLKBCQ*:"ET6r(Oq4@TH.nTajqUbW*qni9siK&W;TC63U
%bdo^]mSmDeG,\\]2JAh]Pb;f`ISAk(#Gkb?CZ%bnHI9e$]bH3GOF#SH98Dua"GG^VZ'Y85Jpp(/@EIQcc@3WCR;u6Kbd4^B`uNNL
%d+BoG=kXh5R0h4qcTkr^GH3*nHDt-1]p+\gP5_1m*.3]+db^?#pY@YL[&B7V%X#pX&mn(`Dmo+Bql;qre\@DJ:TL<a[;C+Je*cYR
%r_'k;.EaVfpZg<&lUJ!L94eA8bpI6b/(H\S34QY(0Cb@K0]]ucO53_2YhCBiD:X'dK;DQ*7)-G!SSXPiY(@RGS`F@_g=U8V@6bWW
%a%<nsF]5H<dVe!k\7r(QT+Z#a;PE,?H_pk*g2qgbd@VK?@C0\h+8`E6`;6cF401<*(29F1/VU%][<AZ-+CecU!qR4<PR_/P_W[$a
%S<fl'XYq@sK\Xaf`YcQaDsh#u6DK]ZSmXcDpmS;t&B#mfk+V`rn:c@e+aP_u$TIFcB[R?t"pY(uNu-rf?uN+&UEA+Ac!G2!ER=XT
%O82JG\R/(EWKt0@2XPH0olC'OICY]5s5ZfJajnZa=4&*AbTG.cD8_bnnYPPCr15Z..,Y"H"ue#ZpScn(I=.[,ma%4PeQV]"!KPa4
%>tp_ol!F?]ruU+U,khu8PCOP[nB#gKJHp/ic2]au!"ie)TRX@BTBVE?;J*!sj%$N6Cgm>,A#e%WUu%EkXX(,eeOtm"42jG^,UbV9
%Am/j)[@7ia/Dj6kc+k.N`1,65Xd_0=7dUFH;^)Q?"?(6gMtW*Ji]_c)0's5I.FD+kmLa0#C895Qq#qDF\WI[4s*@QBrYh0'P!HJI
%pW7lj?L++8>f+>j?[DuC%Hq(jb</NAAht-LA6):@pd>tGp`9r1Lt$t:GZ8C'!(gbV4GSIO".!nS]@D)bA]$'@]@T&8m5CI,T3lF!
%%O;%XL*aWK'ppI:JY"Z"2P52F'SHMNhgn).o.Pf(=NTl%97bLka90_\\'X;1om6#0?"tD1b.e\m)3_Olb]RD6<*@iuR3Wu%Hm*On
%^mdl&Q'kQG@jrT/O%Cu'mMh+Y;%1I,^ep6,Z:eYL^E3b0BiY8/kff8i"fN/!WC!FNp<,IrnA7@NJ!IV,UXVbM^KkU+Wg>+T&G8>k
%6&'W!VcW1bNEIT_QUO?ch(FQ3*\'X1Q3r&LO$3b#`WdK7iU)bQ))iWR(]XCX9P#/_o5^s=Wmo*N>tWAVDDXs5A2bR`VN_WKd)]h)
%Nb'\Eq=BZ.J,Z]>KDK"A<u>Q5b0cIb$Zm-$@`G*7A0bN"7a^>FV)(;@gc^;iZ@(ctb%D'Lih(^2MHP]e_3`BWF=Fd`^9kS$\cTT4
%HXW<*^YGH24D*dsm0%Nb!!S!93@@U(;$c+d8XCqi\pP+<Pnb1!'*V6p%XsSDoV@Y=Y!@_`AL*6cF#$NmdA:&QQZbjGc3/5$MJg]k
%\-:tB\kV-JXTIUb&E'TO>m8QJ9D5(V`W,n*&K*Wb!Mhjd)$TRk#ot3d-'[F*$-bRURjF:d6J\Ocn7WtMd_17nDc%9`M/k@E9,>t8
%q6Yg4QBMlXAT^D'(-,/`N<Kh]5g-?F',7RI`5Xc*Va-`9U[?4Nech(0gZUXSYsUHS!"$6,S"iPq,)<<i\dI+Q>ra54O@.(li\SE$
%GSCgTAAW@B7CihJjdGnLR1,3aL<22Y'%K[Y$N%sk/3lQjfHBWF>redo9Si_a!e.*4nfm:TcJU/d7pMhhbE'/R\GlEDr7eul,Ho=I
%.i_e&SP%/oA_YGF:>2W5@rIk1LNYH\=/<Mp\O+-u'r9+eg@32:Fr]9FpNH!Igm[V<7PC!tLS#UO.?`icJXA0RI'3r!&X%@1p9gWC
%`umt[?^j@@ZiAN/J0^U+aN@$h-C9ea*!%Ka91U8]X'?ot@\6+p1u^O1r6oH"La4$OT41kihCLC@e;UO=bKn"iO'RJ'MG6rY.;LPl
%L;A@Ws&-*ppFeaS"oTt<?WgVj,6#j+Y'g7!7[I9C#chbR_M!H+,[B,pb'?"<oD&_a\Rfg7>V;A@X,nhuOUu7_mm=DE4h>alcNfO@
%q$]ih>b23PO8fR_@_Pr`bQ:$u'YK#Mpk=6d1.,kn=;oCi-koftOH]lmF=Ff6U?9WH_;Z75\lcrBQ*j\RY.VFj@>^0m(Q;R*SdbXc
%Md>#gQ0DXaljES*5sj3nQgS3elr*f*NEq0R(_?tRAJu/$^DOQennnFSrtk'i=5^&u,i9cK6SIqV:ODk4H"8FgH?ZTDW^'tQ8.S3?
%m2Vtrk9&%_#o/q,D4XUBkG^@Cs2<(IXE\n.2q1%50+ecF*/+e':Rf/.#u@:RPbSBR5IfC&BL`=KnBYP,nd)r:I'Q?2NP=HCc`Rb6
%)f`>\dg^=g5l\bF5:`>%2c;\8o4d/g?t7QNJr2HYe#%i+Gn=X#@7FW2(.sImg10Y_`!sqBXR).FAaBG5B36DA$rcoR>/jZ*@c`P[
%i&m'3pbaCNAP><:^-&,.9sb#W2R74ACu#.9g^9k45%p*)O$eMm^`8tXXq$h;4m#M]Hrj_Db*&8&8`'7gq`L$mXtd5VYn@n)kF7$/
%A-bLWV-u[%mO=#0eB\q)X,ca2*hRV'66-3i8^cXukg%#"&]F]jj&eM7[$$p`#Qd5TAdl_$H/&C1lbV3r3gT'\+@D[g1W0,A0.:HY
%02V6h?=5/(B9rt.<0"<ce=l4Z6E%]HW5+3+=@#>)_oV"m<@d4hU/a7MPG3D+p(KmgeZX'(`c.e;+sTh#"ICT[_nN/c>!gR/#p#gJ
%J3XjDcb[iCd6/aUI'#9.4UijJ+?<XOp,&dYTI<o:oSHeW8hcU:4+t;7n(aYNLtSPM!n&FrQ`Uf3+7M7<@VqaU!,G*W&+E]CWAlEd
%"!UM!Yrl"""=]M4+]B+$66dr$p9jBH`4%#0g;QiUd.D;lg&IN2%/H*)1Aq:#,7+Y(Ud:,C9foMY6aS6H[pgo5q)U:T"cVlU>js75
%qcRP#gl]fGc)6q[2B4on7of\*/[?6Lm)'W1DNb<$,bp0;1m(U"Um*$cb)mE:nG5Oj283l!^0le6oY:&*fa]]ck:K9ShiRso%es^/
%CgGkuF`DhQDj>H^iRmiq1N"r#s0DSRe%`cP(#ZCgg#:aH7Bj_#jRH^.Pa7?8q,/5(ia%AkaS@VNO!;u$3eAMIo(k]!@puNg]#!/r
%@T@ZGQbXFp_fs.6s(D*+/E,j@KW!--*h1'1h28^PU"RX"fY,?omR8C(qlYVm[R'afc!b)42Ah],+r3khR`IETUg"sW!ZW$?N6]j^
%73AV1rIAEZNWsMpZDiA5ZQS!Ee!SY<;_]JZQe!uIL4M&d8-2q8?sjDY'Hj.g-?EP:O*4>QF-k3ZOeZ[$M"HKK=4JHuX$A2&$aN&F
%#bd._-'*a=$#UO2Go"pJ5:"a,cj).T95^ULiDnA2S[Y,_4XUY50a:@F4cm(L>l"m)7eT'UOL!ILb)gS*9OP#@^_!9nj6+E:9L;o2
%?ljpAb4-"/N(G708IV(B%0Z!b&^nT&,-F^jEho==*.Kg*ph(G!AZ:fhO[M?ZAWpIXiY?d3HZ9n8D_B"=##W#UcH["X&#'3HR5"%s
%'Ih+EW/r!V5Q>,H,)R%YK/c.J8h_54Lg973S=gFO(4`[+aH:*tYk=!`T8S!8ELYj1aN!L(N,C1r@WsU&9N9%,bJ&tpG^LAJbJ\_$
%s.YlW/5d0f&Q9?G,+]U<&:ct+m%8IoY7SAOn8+eYFBbmh]scoeKhs:t?$f"L8fO\`n_$X',\V&n&`^p/&U]jC1r`'Fs5sTD>THuM
%<e)lIfcTaL)[+'2\-V;EVZn#^FadeeT9U.B)C[28q37s'q4ArrO=/$tP$]Ag4P`hf*bVg@bK:;M=e*BM3I?J8<PWl1PI'8-(%P?-
%[`MM]eb,21L.Pe2YWt5aD=1!fX[C'9#K9goc/]#%b1LN0ej`P?8TN%>_\%<B&rsK]/m1;sGM,FZg(=GYq'WIIiqt=0k5-cq@$`<n
%rma"a;8RBZ]-n.[YRfO$IV^shB(,!F:m<#!rU^Y*d6e574=>rjS?M9,M#R=)keSU&/=X6m!I!1'p)P54MdX]Sq"NiE#[u5.k]$11
%75t?<ViD`P1XsLIb:aaZVIEpNnsuq%C^q@V.O-r9`9/D$m5T5D4NL>Kk%BGE=f)`&8>`<Idfr-Zif+4'Z9G%V>828P@ke0ibW-lk
%!]:?0<^fFB'D[B!46QLlZUa.i5_:B8(HP%HBG*?;3W1q3<SUH-5>pFm1P(!UgDBna4&X=O3:S(u!%c-g!-B(dF3&UA&:m.,nV+J#
%9GNb<JO[-%d:c4CETM!ek?:TO28_FTA6:uu1\Yp"*oa!aMW[K7\HH"-lnotP0?GdI<GO#A.(8<#^BK==9$\*u)K$Cg`IDbJAn[3t
%OEV(U$d!$h]uu/@nf;=9&PL4YD\BgrC&l1:]KZ]1O"=lYNqm\Xc!%AQn"Ne[@K1C`M8$[Xgj%5J<;CUL<^p5;WVuQ;5:reqs)V(V
%d#X*]DRWp+mrb\%H`726Qta$&Vu)^>C@t32g>F#-ol-J?8,l*WebpH+_XukNXn:D^eAE:FZuJ(\ksq`0Zb?@<<Ot]`FG#t??3GfG
%[kQ4N**$d08)4=#6lj=%:(h+:P5p[D9K!6--U?YZnY+=jUBe'!8sa%0_!K?::_M\Ee9bG&B%H]?\W.=<OIB'1jm7iIZ)q"=+Gii$
%aUjgr&_ZQZpNuRJUKkK[/^.LeY"!p1YoqP0mW<7#np(:"L/*O$iP\b066>DT0''6@QQt(aG'`g,3[!]I2?B7i]Z\^U06O;6G4g3C
%W&0>j4k5$eaN;U[C\1A.QFit8M$Pfl3MEZ;%rcM#i0PsElL&4M,6mn]b<M;`fkL06jm&9`n5#\Y)G*mnA(%2?X`5CN%c\_QLWI"V
%*CHUTWjYRVAig#GK<A_HQX'-Xea2d6JctH2S"O.VluE(Ik,S`djdBa?EQH?d]?*BJk1NJ5B;]@5h*JY@k$n9XZdtQ?Fu/%DIkF(:
%$)/s%e?qpl?"U7qbdEqNFu.`fk1X++;EQ=\8$!t'H977:NV/j1j1jIk5P5:''g8uqmb)5A3;-K"_EN/hH?;[LlkaO9bVD"knXVLd
%,d?3`!:%\iUcqN]^6&D\;RtREl/@2?#nVu<*Z&"H$)9ItdEF6\LWe'amQW<4Kp)MG8hZ%hk$I)bUXQ6pP)s(^<%m9oM@&biF<)/q
%m:r\.8s7"B<@Tjg'eTgKot-4lX&Ao"dbbA0N]c-8WL_B`2Ef+#74GJmSWrX-D^Ru'QK^4(]8Xe#?B-Ia9O\Du*QR=?-ePm+l<tn2
%bOumIj&2ite/ILSpd::uWg:6l6rG_iGH<DjWDP`KUhD.&g\6m7!\=*3NuC6,3)LqThL/WcB;-62HL%Ld"Yku7qRI#S*<VeQd.u3u
%amY*oXHe+&:9E$eSr_E4bCG9#1$MAPjhTum3oW(6KZ[/jmq(rM3VAU,m.pi?-VXpnL_CdViL&X[1/&<#ga"kh@l4)si,E#rC^:8'
%ff5M2=$ns'lQWC4M0;R/&5TrV/@B9LUQ]FOM5n>!3\l7Kqq!=>l^3L<ine!1W/Pdn2ll>`.Md)q)-d9_/;H@2+jY2M^H..?i#p;r
%LYO8D=Uo_C6iL@$mZcdoO[1TG#Wg7OaKllWDmF5A7@)5>69AhG2]bKaH^6Tci!@["`j<>J3S;RH`kT;&RH9FS1I`%FU:#W+?Dj6-
%2FupgP0hjL42tkX,`luYp&Q%Y4(NXaZ/p_PNsi/+q/tnf,?MntB^2g(`k/JhTQg6eZ2$p^-!o#J)sTTFZ>\/KP%F)2;G)d#RRP<o
%;4:X@Ci"*X"@@MD_IVLS9K!9Bc,+#+_GXW&CfdZsA[4P#bI'g9G1^(!;/=a`h;rgfZJ98_)Wt^<BCW<2r+m-5)n@mg6-QlCVf)m:
%B<f0\;n>6rS4`g`Sb*OX;68Yrb[HrfN<9b3aW;J2n2gYZ7q9H*E7^9>`O&*78/G$@87bDF&"Qb/9Fb2%\",^M>b86g(]Ml-a#6d;
%p?XA@6SO'tM4hOKV"s@/ZbXa8n1kBabQ9H(^rn:u1=![n%C;G;MiGSmr+-XgR0?o/JX<!1`4n352[^bQ!_CodJ@&f,Snf?4\rmRg
%nI^Ul4-_mM:TX?Y+es$LVX+2rMBi]MR.LVa,f*p_^l!uI)4^I,<_V8#gQNH)9tjr(g8@s#CYc*jmG)s`9K>kP5aulW3.%+CA15K4
%Ga_QO3Ap>QnVSCW9K/!$k%7D/R]`PJ?"%)Q:N2ac_.d^4TJoRuGYNk8[<]USU6pO6]I$!Tp6+$!H6S`Sm=W-[H2&2I#j,jt;(;+8
%0K]Y88b4U,%-H6`LAC"X>5t<1NX9#qH&Wnl0g1Z:fjc[a!V?7B,Oa>Np0pXOiL:&WSSAtQd&pC^AtZ=:b8B<;TZed7b,HYkYUYk8
%Y3/Ci;n)=iYm[b%(X^cDMlhVXZWT$Ek=b^F;YbPtAX]'i;RtBWHc\i,Z>]_;Ft1]-)]-UBXKoT!ngkqJf>RqBK(,oh(F@mnC"3.6
%+I=d)ok.3?V0.ejQ0)Gal&om^?T0ZcVVf=_56'psd92ZKHiAEd8A>Hh-"`51S(`BOoD^Imq8_j/e1ZuAD?=Z54"^+=J6`,pmEFpf
%lY5f]M.JB;ceH"Ij(PUYo6-;WpMYH7cKk]0bU31Qg-i7\j:eG$B.(bJ4G#dZ5sDQ:@!7-LG"?LoJp_n15\DIcYCV.mSKOOujZ#=f
%5#[KJ'BHJ5j>5V:*GFkJWuJ6P"SnZ)?R?R=j4r:fSKsi7SbYE8rqc!%Dh[1S;T(l5<:6(;0:K9oNhj5S;S)'&IiUkq'5l#NRQK>/
%[sVLGBB\[hqX)l!M4TJde9bHAmIo92]m@)KjJi+0-@qb3&nL8#9:]h&?2`V)jHCR&44Sgs*bPOUVpRSO8M]Bt+u5+$*j[?,PSbcP
%P+RtP\-.k:\/$i)U`=`@qUBGo*8>9#IYb%\_MM>tCNOd`Js*`]mFg$ZmELQ6D6h.!F?ehr>-,HqIj/d#4ETt_On&<X)e21sjYWUH
%>YJOb:]*!q(2"/GQit.<JmC0t9RdM7,u[lQLK"=u#nFiER0)!QL`i8L#h!iPVlrR4'//_3kTi.WH/6!og)JPjUf]oumgcAb@]_f5
%prB2tE4<3HA9Y4GFAetKKY\Pb2bCoJ6bUMk9o?VRH2Cd&O_H#F[%DA:dnXLj1GTn.R>L/EB%aF)LTl\h,L=!h;PS;pj:)M28Fooh
%C*qe.]CK*d=l<d0'PFjg]U&1@oJ(*)\E#5?YKo>$InHoN'$K02@elK9R&ZK#rJOti,CKAL(hMV$Jlff70R9SpiHJ4&q-3j;YH43.
%r;Q7-qG"g#nJqF!P5Ud`qAR"A(&CZVohE'NDc]`'58"6L;W-`kp8@P1I@RUKOT:YE\_K:2eOrIrXeF&#67[o:LuT;rrds[M*6$n9
%j205+:MdsbRZc_f9s8Q1;6MjWV$)jc/=5Y`c"7SA.b8`I8@>M#H7;E7HDsfAF_g.IPTd?uG9%K#V>=Pq^CsEa)&D%+4.usiHB&B0
%>,+tYW&52N0:"N(>3b5`YuIgnprk6QJR?i!ifu>JgdjP@2c#Sb>OIg(nG#.TOA_isP":`7^-Knb5H'jg$Cu8lFnT([jOoa_P@U&7
%:+rLZ%Ot)`8fE2,'3On_:Tg#GFjeFMbG\^q6+c8Be+f].]`_pEe*_bc%h>7lPMrZLME0_-hop-JXN5,=\HGPZj1-&RS^2@b-/UGi
%VB(jko=R9USbJ5^Ih@T5hns"Y#aerMP+i)$g+HB?]d*oDW8j7Vhe'4N3bm68LC',:1WfC7-(gc#^7"&o#*LV?S^&M<^L$I;jih"*
%."BbsM;Bmrqi-NpP9G!H:%m;7I`HH%ZRD$1PN3Sms-[sSP17U4Yr9VS#@nWqdZbODEP'"BG(]8PRIEW:K<P!3Pc%6dYqUP&e9*Hr
%P.dO[\fJ;jp8?uLjLqOFkCZQ-0kc^T1emgFVIg@,RKP5bIS991_O!Q4\pl)S_mS_f/eXZ)=*@ArBZ@)OB!8O96?TWd=^M\pA'o@f
%"=,\cI^<u+TeYMt1V*OBd.hM\2#]R[)e5pOS%Z6+J$!rB?A6ZS,:>Sgnlot$EQY'BrBQ4m$TV]V\DtJ8p-R%A%^WWEO$gf\]M>!1
%On7J2*3Z+NI$KNbF?Z"(dWT0p-I1KS`N1+op6_d/f5o/.2,5_rJn(ge;N7rNe[&/5M:CumOq7I<YB%B9WPM`Z`Y=_T>XqNc:Uk4%
%h1A5QRGSj7]0;]>o@:!rY;T[!2r*XY]-4fikY-@58eNBr]E73P)pt$9q_ZD<aB:o@losS`U+qe-n1::gq%8To$6gB[E0s'N-=#$F
%+rZXp`b,mC=[_;]6o:EJMJ+8%k1W3[VVkSk;t)&iIp"U\+7+hsD$]adEsE9eXj&Z4I"1iH_E[1pQTZNUrWmqdldF>I%mHjL]hIs#
%Z*7G2jFoX/B6mpDQ,#Q]RJ10MdtYU!mo;ou72$c9R[kNoIR[e:gbO5__T^o,q0OoIDs$MJgYYY3CehUW2h`o+Sp>_8al?#jLO;f:
%^''hJ*52_kU7&nXF80>Whdecq@[\:N.=9kJ1fQ"Rg6.lM2_dLgB:c"357dcDAZM0fI<Hf]b3FAPni](`<)&g7aKE<uj3c$6"Qpi'
%r67`q-H9Z7CI3a,1kh`g6j@8?CF6]C#@1'8nCgZG94&c1s2C#7Qoro+HZEbh%"=1C]eY:UZpa78klPY#F+O3[Pl,Zd`_I/1jdKc_
%'@[ot9I=^fM=4N$eRn'il'9bTk\9U/R/738OB``mS-57:[u`BP&imLt;PR*kmo8W'EjD(UfiuIMhfaTfgXYgUHcrqg90e-#Ui61s
%^Zoa-g*U1m[-FK.oq^=*DO+JX;WXF5BXe0O`G=Gs32u+6SbX[g5$j7'InX=h73*aZ[SOQ`O<FC>IC*hmA?LhZS\lC[2_PdVP:b[T
%]GpH'54C'7ND2Oe-h+%;&(f,;+j;%8X4@4sLmoI8lLe\18bMUjBVX6OJ4ceGm[`u&8-R$GMK^*X=p`,Q*5-%V(Q?Aq(_69^(R!X#
%Q<QJ@P2n?FVUr?)W7Ms<;M&QLOZQP!CaOH";69)nOD7kMCJ$j=PtJ/_qiQ^$qH_-q<N5t!l0eaS7r#&.C*utoVWZUeW<DGO<t>t4
%)7JGTj?WhX\!b1LD2o-^"K(NO]6TQ-YB%+WH5<>Hm3Ih>>khS99Z$s8Vn`Nc:K&Q3&nE=QcG'(3T-6:s7/;VPeC7Km,[ug+(KaUA
%M,KqJ8sCcR$COGH_mjlt-qVMK\jXiIGqI0<aQc1c2#4O-j_:_`8V51)gW6^)Pj;V5P/,&)eY;uF2eBR9;8g5B(+#)ZT6R,>RVG]_
%+ELg>l<,^]);R(\[4$lFCuW!SRVG]_+ELhur`<]GY%(1#U:n2@GE$YsYP3s]&lj2$G2i?]5NMZW`,C?=S.JBE;[rP"B!,bf?-SEb
%o4P6R3rKVrhspicZ/APtT?k7'og(i7,0n[9fU8/#q`-s/i)T)!5rTI!itc_CaE/cmrWe$m0!d1#]gALB(O4`tTkWsaZ`uroFD7De
%7GFD&7</6l5Q>uUqT&>`k-n$r]@6_j?L?*'4`<1WC@F/uf)3Qa^@4A_Ska_)[7_SU^<dtuXQ]uOctAF=d(d<o9UOiG"Rl+\mA*ac
%p4mZd0C`,.!5S91KU-KO/$20G90YieHr$1ADW(=3IIQ(>o0W9r>[Mej&Q3kB>GS16e@Q-D&U*A^J)f9>qXfd$r^mJE[@-mdfh#3C
%U`[(N__cFg!8K'OEaT^CgC[m4@gd>Qb&3L0eS_j2OPAIo2RFH%0J]=3>lNYP.Hs4`#d#YR=Bm<!H7EX[<mb+I_Yb@TX7Bq0J`+0?
%RN4tGe";,+Pt.tPr$UBY]$ik>fN/[Xrjf-bUJ'L'Xt=eol5=W'BN+0AHi!@3O`2:%oN$.>@Jt&R)@pZ63o,9NpLe3\%.k&JPCs#;
%\F]I:I^>'.ra/o4S8(3*#)c[!=mdG#RP/etn`KNd7L``uHlZ*Ge.C)",CVg`aA_99R/^M&o8@3@:E@[H?)U<Wp?(g#3dX(`mEY:!
%.[<'TLJ)c)+.CLEf5&-#M9Zl7^O!56>eSWZAk8Z!$PS*LIZ5FMIsK1pq@_'><4b^3(c"MLm_=o5IXY-H[$^"LOtB,)[%F"!(gnWB
%l*1o=eV1lgO5saNI4'[*JS2OFkr)<a5lCR]&made@*V)o&g&HueGf^0ls,"lj*qNaFKolLi3*H[mqX&f47ud&HGm>aSCGIDC8lX_
%`eiR#`%VVVdr[`,9D6LT"sWchVX`]TkbPmbOh7udaoF+E-mdQM9B0=e^u#fW'$6SYZ[!-HqopbH'cY\Um`Tc*_0LA3k3PeU@m[D9
%1r40\X4:b5&>\#,!fiIZ[o=O2l5'F6r\Q=<.Q0VVLur0[\Z*oTfm:&0!A2$B%IQe6!t/OL4\V-ph>Lrb>tL;Yka@U5rBXfXH*2@?
%?P2aRl+$,pT6tA)_fk^set27g5hBs1HF-;HC-0tFnah4(qTOLE5aQB#eEF83D4DlIR;*K%rnkX2&$WRNlOXic%GZEq-ifP`21CcN
%4+le:!#HeV>O?1'gAXrDm8j899bf.cDJ?jdYB;'-l8nmG"op<'h,^_Kg+INZeTU>pN.5TSg1f,bZ)&#gcqU"[cI$44b^\EL<bf=3
%fIrk,Pf^0'@sV[5pKFO?/Ut7`TY4_Y\uAfm5RdAcm#;s\`aQ&m=A<Wi>J8V@/Z(TRE_k3kRSpUe<*87la2P`Q)pRqnP8<Adh<^2M
%7e,u:13Ad^/KL60[Y]/cU,l@GX4Sn%.]6oC.<UYHDeZ-"m%3WHWn1]\G\0+(l#iKomHClW1t>dC\R2@T='N@aB<XP:r4^p%`S#\7
%a)0I#nXnhEkG/Ua]@Mj1YPFsIDBZ)#_<DJDIcueM"24J^cPWJabRu#7]Ps0W^"+BNJReR!iiGMaWA@usj1!A>iqZ9I0!Rf4SjK9E
%FSnPIEFuo:X4JTEH;eZj\`hX<i/%[,FPG(#^4KB?-F\)V=^Lbni5O28ogcD2m8VG>mk(!87>k%?;-bCiZc>^GpeQ)VV_@6BTfpma
%%^DY[l*[`]S^cDh)U\T.BTLGp9Hj.RM!ReEJ$W#nZ+)iLJ#UhtV$O,"B-d.\fslm&cWQTKfU1?ket88>Zk",#EiBNdd,>J09qQlQ
%K"frFcO]].s1Sjo+&ho`,;@<cG,8@[!E\RFMe72.pLo7=LhJSFDQi4n+Z89A83f9WQuW_P2>>Ss[I-Tmq_B]cqeI&;h`<k[:@D[i
%Rg014@l6`%jkTh_V=nol9RebuSDiFRSLQ30DddHlceMJ`8OmUSllK0](Q9I%>!DaD&p85::En$JJ2l^RgM>KlH6K1TW:clYa.q0t
%k%GgclICdn3>p3:k^hHQFsh.$KU;E`2&a^V+._3omM3!#kG%W+4aW1ZAUVXkUV2PLaSa(SXq[bE7sT`rZ1;N\AUeYmfh^,>\,W1t
%a.GSgZ`O1@V.8ZJW%Fbc*@kOsJp_:@/jOqJ2d;R(AN`*)bBfDB(\`Gr@aR#/oV2\DH:"Z;d\GJ<OkDU$ro.X/f9j-X"):fe__\AY
%0IBP;D4g(H=0&6FSl):.A:pSr9;mu!OWAVFA'BNeh=mjIWOAjoN*$nChPKYZ]k@keS9hfWdg;5nOPh,/Yu*Y8oq+9iNqhq%0S]Lc
%co_R0R-#GIfg2B+S?Un]#X.gZe6D<mk.jA'"d8*dP>qq-Hoi+o9$k9+B@I'TlXXEL=&<m-&p3T^7E/o0LERP;b1NQE0=<GY7s'Cr
%8Sh\t?:%-FgEJSOei:01m[2,N(J;ID2GpBZoZfn;;E]Pe)%X`IQIFWYb_g;?>JF:T)'E(s`O+a;TQX-PE`o;KPr*LtbO%n?hEej)
%9)hH9n`YR]dB?4Bm=k*OSN>kQj$KV"SQb],,QPbr3G82RlIA'"QZbL&'[ubaK&rY#d7C#85PhaUS_>B#N,D$YXeTM*^R'%X[VOqu
%>fITAH99sWq"F$Mo'n#s,>Cd*`eC99FhQ:"K+/hW:!PQ$)7EG`=PHFD`bidop.iB_^($!,3+Sl>W?!lL>tD8ndMuu4O;-(-W+d??
%G=fQa')!8:L0QE;9ENIgEePjXd3#eXfq<FsL*[7&qX03)kn%!l*gs'$RZ:6B\u3h.5V[P#Rn)a^l9^*.'HQ@"7o3'd+gW5UZTp+T
%L6W04Q%aoUCZ!!D/S%d33n!P3f(#OMg>Eb`KA#M?,;>O7qC^7\ERDJMWdkWFYm%Y1ZPiCu`JR%1Wa%T`=g:7g0D*\q*3$,:;+[EK
%3]sn7j^a-Q[1cHLQeD]CN\T;H@Q7*V\=%@l[&3kb+2-Hj\tU`7'D5/?iXD/B#0rQN;/hmJ_Vo&-%eLQ#XT&-(D),GPSLS6daAX0O
%9H)C^EKQfLrgi(QMhHT?38qB68p+6>EQj3)qH7lhS]n>56H91-hB55!<VoS"^/]"l<6IYc=;9$r16l!<Xl2YJ\sF<M)rD_$Qjqr\
%J\YWiD=6D6qo,7M!l(tIF7mZ!D+S?OEgU+MDnmnW0+-R)/gf0In;Rb/Ar"%DiBTF7BEP'B0mEEJ:-1g?e?f*oM#QOQoQU2fkca-o
%)2'=m_u>.K]EIZ90GtI\Q%BDs>Vb`0FN)IC(GFE;TC^Zm]-Uc9U_3URC@O-I/Ckroen>PV"0#IVj7k<2:CF>SZ0_sLgnJBG8!1-c
%8>Kj@EpN%BQRB%AiF<jKlH.42+!7SsI<9\DoPWWUHfsL"G.##,EjTr@\FHYF@q#@SY#\/=DX5nM$i8H&lKbjuS*J,D`i$G<X6j6H
%0,EV\0IN*rjZ&h/\,>3:F*i'*9D\YQb!N/8g3G:mdPS#J)`QJJY@l\XiR:jIX"13]PH-im>gB7rG7W$D[8D3F'DhOaglh\GXdf@a
%3NG=p/n@_G)kG4L:A<tg@stCZbcBK:Zet%lhpO@W"6\A:aO+o&iIV$ke]1IRh-Bg$q6S*</U^r23A,be?0\4]*on."HH#]faoP5S
%lW*kopTg,Mq#&^helV2+Q4C2jh;".m5n'm:f/rf6f_E1lo&T4C1CsTCaaH2Id\KZ_^?=)ulSl,-_7/0eS]+eB"2qfLV+9!fhrZ#F
%$YAeWI-sPm/[&^IgcH%P0,D8c=O#ZM?-H;qpE..qG3`hP>V7&W;scm0@,o=%/Y%SB^KnJMFfG)r=X@:EHZF>8rSUU-Za"T73tSp2
%]):p9V.oSmS'S.'7euJoK1DES&,h\fO(uE/Y]J`7g?!JIi-7icLFhV\Fl(Kfq0/n=>M#i*eT)0n[)leKdJVuj2-]ga:(.X$2s+.^
%lRTI$()B4I-Z/G?+8)bVI]iM._9/7ia!J9GlSFV!\1pK%4kB@G@9Yq\\,'),9D(8kHquD!!e"##E5^pDS,%i9Prlr(%mI?TNQ)K9
%GSKR4dl@4`f+id\n@5u;5HVRM4?*4[$\bcr2#1I\'*Z-l*^"mV=HN>+LQCdeD]c)4=2)BC_RnKVR)XK@oqH0!=8#c=K[0`3`;HBI
%oVsBYo58+1HbA/0C?LH%+8!$_AiKbW62og$oC%B2l0dr?hLGK=j_924EG"sDgs'Zk/oP?FV$dpWpn-I$U73VS$Lb\ml1J-"&FU1<
%IQ8I.(=^h#VpVBTDrqRR$5HlF)RjhW_;ebCDp9nCA=BC"-Q]qBWcudHX6oW.CULPFp'L1ci76PMG4>LJK5<@AEdBTu;3*AYZrCXY
%0bd?gr8:Fj^6l*^XRjY?U;,9LRMk=ohJ]PLmriV]G+Wo(B34]SDT7u+gAQ6_)edu[9`(EaAPOmYD`b$9kO5eGjc9!,LVgd3E^*oJ
%[hkS"et_=j,\BLAbH\=<fm>'5k#N84(;[<&e+rZTI`Y1_Z`CpfpQOd.QX@%f`SA;9^_+oe/&bcTj?6/a&c8euXm8Jq#D;@1`hO't
%Vn9DZSH=D?+ZQJTo4uBf<LW7($A=E)*%\d?SqZo\^G:4@kcV=2mYBbRAbG'4ROkXdRKpB,Vl!U=/q2T=pMR)t*T4>1?+P)D4M?.R
%7(2pLdBaA0U0/!kO\Bi\f=?n<CYc\H8S7/OZi%_pU\UW%i8F$%S_;h8*j361>qZp#_5hc:c,p-dn>X/HXhmErKe2*.9CHQSHXWUq
%r;BAI"#EQ_AAn,2O*<NR<^+*afrhgPa8<P"4XEsM=8CT@pX>Pnmro[,9h_9O*VNNXrAuZR)rGkYO:&OJ-\%5gqdi;EC_r"VpMLs*
%+s_[X<FROus4"4a$)#3+OQMDUI\5-T>-kH;>CJsJq<BQ:pq,8k*^A(*s-hVD=Dd,6[9"(cG6;,oo?X$n>qE,m]R0Q,@rln0@J]G1
%Y0LVEc^Ziclf3LmQ_3Pe.r+b%r^22$l2,>qopViUd:;prNS>=uHK%ouMbe_=EGJY4]DX>-^[baCEO`GOe"A_A?g&i734MoRIjnsR
%BUP-)9aAPiU9>cZ?d$s-=O]DOEXRB1U/AYc`*.%'6asbSMM:jGVI%+fY;8!E_7$n4k%,U>s2dsP!#i(b2BKUg5:k$n>fF46Gs[J`
%Qq,%j4$5n1f+m^?e"FSlM"N.C3]Lne$#"1!1!L1>H,\7R]oRAq"S=c35:4UIo."?s3EW-W6EY>FkSsH>U[d&_hiAR[p/g[%1fs[1
%6%ijkn:ZGi0m-nY"2i6)oP[s-BbH#i!>&%^f'C`D_=mC-pl"Us)K^g,i"UY',);`Gi*QpF!AGR8J3"3+D>0V4;r8(^_&%`%T*fk:
%#]_`^C4@.C4%%,"E5.23+$Jj!O;m+MdfA5VmQ-_Nk]T<s")LG'\cI:GV2kk_'k,"%'4WEVLtS(Xa^0fo"q37hAkN3EiC/443;6"q
%TQt;HA+X5=ZAUelLKT:dTZpYlT__W4rXt`Vs#)Q9knCsL?gKn[,[`kS79+bJHTWRqS72m3m!a&3?"!`F`G<OFD"_INQ%,!E+'Ns0
%Ah_J[K)-2OR)'rVdE)pMn2qmRA8,SC=leB>SJqq(;paVG>Ss?_\3,9UMV.MEBl%_ImGmm!EDLQhIuU8>^$!+YP<L,Vo$(aZN+k\I
%Bk4X_%\Jpkr4I/EULeW+4E&Rpico<XD3$*^S(B@sWqU7GV7>.5]t_/FCu'>4Gk:?;UhU]a%nn$(*\lF2Zssp@b&30CZ,fI\&G%2:
%8H.02XM.=SlFi7R]K_j>_=EpWC_S\nna0uU[g]&(J/t)Oq98@:M[Kb>s89u_'qZhb=3YP?G$\g)]'C_t#9+3:LOZGT1r\!aXqc4J
%g\1m^UR>Qhj6lZcb?T4kDZlX?XUTR#0G]F`N>Y.`Er#AdHN]t4D<IP!msc?87`KfOGs1csmAga5[b#T@CRpgB[P^o@FI"J9:[,Tk
%P9/iM^p<3/n4>b`N9:#@5?FK?%pjC%*nIb`&sX6HkDX?;b*sJK3H&_!%Jaq!S@=;N%<<dJn1O=<R/cl'03A%J+"eY*bT2imIUCHj
%4T5]]oX?>F!4Y!BjK-V>;u_5g["%'?d54F#TqCk-G]/bU6BN@cn+YiZO7S-bpR[`i?Fc-3P!/X3DXQ`)qqT*Cj$uac^M'1r'FpFD
%aE]fn#"TO8rqk'bD*?u4TNU)T#^U;(_RBXdK>b8b1sK/Vkg![*nH2hEH<PeSn5b9LQ.VCWa49?56E0OKpiZ%FQsY4/+(UH$'dR=Y
%>Z7,ia*i*jhPX4W<Aa$n=8@L#%p3S12Q.;u/$a@.D&=/tp1<@21#E$*4Nh2_n]U+m[u,l/n#Mrd:BDkoQ%ds'56cR^j&u*+egb,"
%roAcm9D%)eAR<(&GuMrEX$f/\BYJc4!C7h%p:$QOkPMB4DgsfQ,!R()arPoAZ1QuEg>6.(?_>fSL["!Tj37hiLMRt>R!/j&U+b20
%q</%_&.s"KK]+I^:?i<gbmUWKL[u`J=..dR;5\'AE9`73>No3"T"HM#O(R&;=-oPo^I]L8d>_SITKP(mCR&hF2il[5p%=;`YRcfW
%Ha4!q4"rl]3U66]Vo)R]?YLEV\FmDg:1:=Pp/dSfhbD.#I+#(Q>X%@gIEUuk0"m#a==GfOS`6PIQQUUcfU(-dK.gZHfK;,h/rP1n
%4r_OtK#=1=PMLdj]S)9@cJ6P1X6Ru\NEOnmjQ%.3i8he:`Hth^j^R*D+<N^ps7uZI+YO*r+P(8e'<uO9@[rtEfK4tVoN<i>hQAE4
%0"q%'gt,]@qI[!pZb]?[_8Y""AhF&Ph=><fUj)@5R"n2^041ua*=Le/rfIqnD]a7$r\Aiko!(,aMnDm>QTb'FXn?k8nDM#ELrCG@
%e-Ba:[r6[*&FNkNqn9Fcn9"\LFm31O/iK.q#q"jIm^!7-=a7-Bo&)66DYlHcKsK;^diNs?c<"4'2qYpm[l0Ulcn+e7G;jFM5k*[\
%2g.dg4h4kNEuL\B#J9ea_Er=MQgn*4*t.24qRog.PRXc:c5i*j%<)*6LG.LpFuNI<N$1E#jp_#8o;h8tYa=%sIe\2fp*D\kNIQ:>
%DXnY+o]RG1c,P1;=['MOmO]MD4?]`mr;D;Wq="S(mJE)fFmp?YXHs7e>DHq_oZ_u)UR_m<Dgu+Fc8WXfVg]3S)s_Mu5[WCMiYRO+
%qMB:/Hh67lK7:K*o)7io.hlWYZX(,6+1u@F^UVHbV6^."<#<G2*u=HCpu-*F=4P?Zh0_e)lbT^=OUL&^X%P*QeL^r-@<70h38*l$
%r9bda:OY++]t=.>'S2WcDKU!-8"6("V;b`O5LJrNE\DHOT(FU)9,9%co#LZSH$_'BhTG8Sh>_N]#&+_5<H8#kPE#(rVde7]a8KuO
%UGS+fF1qMLG30osGjD^,QWiVnfh&UKB1=t]2F2R0=74n9gB3SA'_WVtBFQ=n$t-p>S_H6F]j#^=8J@6t4r(eZl]sPmH?S9!\qU+L
%rV<;7#O]XVmd?Vb6hKq[]g(q>NNlX?fJ(1;O3O0:VfN.*l)eDIo9mhCeb+.*r5,VgO*V^h_rFF!2rf\JLS=R54WuYgcDW@3W`(RL
%L(\m5H]*l;h7hS9a<`e1amnZ=j4;t$^#@`a0h+$II(/u(X5;`]rUeJbFa"P&(7QIhXo118d!Y[g[XPmgJp`bK1X:Ms[0cg,%.W%3
%@Uo-J\ITe!_#R+P\FBW8mG@`BDW^bA;2HmqUZX9[q8u:=0Eg,m$2p42LBD7,6uqnbOV_N\IO`@Yh?P^&hcQb0cg(?)qmEtRj(j"<
%R&N#^E`DcIh/Ig`ksb%!Vu6/L.h@U?-XZ6l((9,0^:9E\^):ePgNc["]+=S0@chZ2ca>m\7[<7[B;ACQlQ.Y)kA:LUFT2+4c.ja+
%>$:'+]e?NLh*'Ke`d[Htr<5K9mVCSi9&^uf.l$(J?sqZlmrO!XSoI$o?2mQ^OB\7p+Y]7@oBRclnEA>Z>K-Nkk"]p!V+AnEXWFXV
%fahi5Ph%ZH"?eHP3&R,oGAcLto]PK(b$t5(LhY5tc5L0KT;YE!4j.QKN\bE6qmnK=g&DJ3,)3D5"tum\n:C=bR!A0"3Rd>2AECLW
%>or$bTXam#!lt._VKqh)5.ajDJfa(.;_37rZO]o_5E5/p',oLVR4ms/I=gK6\+Vg)\iK2tqKFlUT8<\ODmP:0PHT:T1S9,AZk=V?
%a*OF^]ROicPA-iTaO=7nEsd'#)OB:5[%`$CHIsYd$<K?P`T;fC,@(2RHG!6<.*b%a$fg!co_Rk%/c8FXj*&1[@!kSGD]WLdD?f!-
%#1VqeQ=\$d^>We_\go(Vq:3ZjbYIW74DTLmmJQfPX[>]3HNL+LHsG:BYFBUlq,Y>TV3UH'AnC#RkWOt8N?E%$//S#L:DZh"lgrAo
%lgC=QT*qL!lSl-t&+5D'fmSM6abtAMh6g?f_Ps45gkTUhTF1pEYXa'9o_s'?aOae;,jDf3h06h"]iI"kH<G8Xa<?VTmbHo74s4j6
%0%@5b^2:"7f.4&oPed4'q=u3i]^$m\QDp3GfO?=Pn#YE&VB0I'DN$>gXbGND<<;bEA7"*L.mlYdasSAcS=fJccMGShPu4&;AkRDn
%l,B"f?Ld=tGlgTZqkX?9imdV!RN:0QdkJh3`L(_,5E`U&2kN=Ee%2Bfcb#6qHhI$KfJKuh$\u)6SbrE7QNoTCE'61o2t"A691FL_
%A^oPJbtu'$%`]e-XED+QN$)>C^%?3MF77r0r:=Qn^ZVXJ?Z$?jg/g^(qk-B@jO6K0[/]\ldX-rSoee!"m-3!Y?MF&#EV43lG<!W&
%0[V)B@>hMclJbZ+'/$AgI0b!\(%ui-DtAb@S_?>l%4'RTPG9eBN7>/f;W&SSb\HS0j3%+*Ao"f^[+X\$LI6o%Ii%'e^76\okO7"D
%QMhQ-:b@&S=>,1-U6$_rg*,>1.7.=*1;RGr-3>Q17Yj4Y>9Ee!Y>65Uo=YQF>@3L1Ed'6FCh,FqU[I!^*\X]J>+9):4H=P*P.]Q6
%m8aGQ.7<.0\s`6Z'd"2@9DQJmkd8+mhQk=@Qg]'/]=IH35Q6-#GX*2fZb]7Hn#gI@(-ZALd-^C7OP/ag,),ro7X*^=QJ[0nh'TRW
%r,h?)?L'*LbWZu:Zh1\:KXHaJ/j:J9^0&%EgTR24+e.[%$1-j4ZZ1KpeU/04[A%#H<?;dr^0W55M0\Zp?YqIWTA;JGc?=(kHg3QI
%%l143MK9a9dWpK>MK_6(2Y%*tcOW"^1c"Q;-%@g<89oE]QYq5n4TB@R(a8tp3SZ3NHT/\B0;#hfTtBf1\[]-<Anbqqr]n)Ljr$<'
%+6@;+n>LRJ.=Ie"j;9J^Q>(g:4@Be)bP^PWqcg?(lAL7jB;IPV"8mqEm8mg8D\hfEbnZj;ht6jont=jr:?S64\E1]-Y'4e#b52P]
%GVr95gW@]%f_ms8E@XBWo$@=#ns@=%AiJoAO_7i@0DscQC,n&o9XQh[cj]!\B9lVc5JPM?NV-S>s*XTEAp3I?&#7NCDJW=/&SinM
%n;rK1.,J+]BFQGpdPpTIW9)D&=m]&S0#%?.$TAj-&!%Wodd?PnD4BI3MGrG9OfR=5Gdm2#Iee?I\\6X'Q1*PMh&#-*SD5B&i:['f
%_Q@mrrP-C*C0ufYhpfgbl4,nT4?mRl\>\n=U#8\@FLJJ44C&9J.Q.'Xq#8CWm98P[hW^o\c!I/lW]YR?ELamEDW@#(Id"jt6"h7;
%fRl<Km295E%NF=+K!/(?8oqb9g<(4OYcDL+3aI=T+7R7rBpbjkEi8Q)]%O-.CTVn?F/l&5Z5)<8`Ae<8Ja8qad,kId`rN$glh);@
%UMI;:k$6"-l:_?sSec"c4M.KA\EEoje9@s8=C!"0aEP)VIq[Wn$P2ku?&POSpMG'Q9s+7nK&584_bD,R9FSj_m'+@>3Olq=B:P4>
%*\=Vj@Y\d4i?R3VUDfZ<iM/H3pJ+<7MhcAtro"@DI4ledHON?WQni1Cr;L*!I:\J/j0LX&UQ=lA/7?bRVYVZj7%^'R6pk\R,q]58
%j14U2[Gtce9#V"?-^FI^bMcYrfs==p'cCJbKC?f<6OC@adJ8,B>"-%?.dA!`.-3iEp7juT:'<H:NW_cM<??1b4(c.!%?<>'3iU*-
%\1nn!G([If)(_Qf;TM[o"gC3Q@q":f`>2_gOGe<o^_e0FDJCAg[$qst-Is9J^Br:gonRQs:f*5G7_WWQ`$%8"2T@,-AGB4roPf+D
%j7F&C;r6SnW'7pMI5:IcF'jl%q\tMLPWZ@>9VL]l`$I5@"@^&Y.CX)ppo0>_6r;/MTdQ[u=:/UmH^%&(b"fE6[QqHf5SWXpCF<2I
%Kc>Yc?K]+sGWG+h9J2&c)Al)K<kmfdX*4@(3>Z,D&(8Q0cCp;J^dHUuZe9#XO4qjBC;0LF_`Ya/bV>`P%t;%BZ^&gA"S5#84ADa$
%h(m;SJbn2;en]o5d2+64qi$l//AY9+Lg5"tQ?a6KXaaa?@S/POjI2'#r)!!]e5(.NP$&6lmmrB_n*+54T%=ks+/4_Vg,>!1pcA]6
%aQG2Jl&:\l(5X#e5Q>K,O"Vl,fnV6$kH$bCnPUU(71uN5!Fk@SnsJ*Krj_0&iF(jEkUF#d2tkTlmi5A'qAd''qIH)0h:@'FQT;l=
%]Km@_6#Q0+Or,@4ZTSU:AN'C91"!@DmF'l.Lki$n<8=@`&jNO#84:r;C)<Hf4`@1`PL-$Kp@92[2?M\j1oV+Edjsh6O<i#6gWf[p
%GGFeS[4fHO#5FF-3!8^$2JD#o,h\bFOun6)YeAX-AWk^Qjl#7H^q48sZ)-V]_pt&cfG_;^Dbf]C7Ak$!bGp4+b.OH\O&;YD/ep4T
%Zq%BG_5J^q`Q^GqETkfB(](7G06^pP3K<GfkK,QY%C`gsi?o-^h>5b:>\'>;mSm?(lsBCiQi8h7bYkp]Hdk.1Dj5#05$;3*J*ln%
%6!hf*G8kn!OHfd]NoIKG)gW!!QT]1?.<ie'8%+qV-Q%fBbOrb(r?'A*J7:/M48!?c3P=,R;7/Vu08O(?BjP!jls%d)[i_K#$r["d
%XH\LkNVu*AR'3:Z^!oN(UJ\t\UE6H8H9Im(8k"/&\BW^%cEI*U@@Yq`)7UlH^\p6`c'/OkmH2c:Ck0eP?8KU)@=._b5g?YgGi;ld
%2mk(LVS*[.r;>X%5PVeWr+3cpiD6=LlsnQ,i6OXUpDC&61oouhH:Uk)ST\8Y9eGWaXeZMq6qAuuG_)JjoUW?>>b;eb:&@PX7F4iI
%UDB7-Q/IB^Ou$FAqa<uI?(0SNoHA>P5#6I6O1L+p[_QlgoP'K('7;#`$;$4<*B;hKUg6K3YJ:a#^e'I2k8oYLTp\]Q[1a,@^7TTI
%:o8mOd`Tr?6(lZCpDHY#pmN/7cnkDf7:U#INP<I.Gm%HHW.bclSUaoAZjIg0OrK/0g_chSD&^AH<7EKFY\8^/J4B#B>(X+X&juJ/
%WM1=<0BHZ_+<>]ea"t:-%i(n:E4&hYc*7(ZRb9PWb-WCAQQ&*F2$doi9gbR9?7OYA`?Vpr(IVKdBe3X'VB)<&LKhiu2(_pH+adJJ
%5hHk:7Vh9<8(g@j0ANpV_pi-De#q31cQc?(nqFFXb-cRlfP1g:qLh)n6NDiXSm%A^($"Z>c$##^&SYS`f@o$l=phY-IVM>DGfiGg
%:$RD'!M<Jb>+B]u]->+TL,+`,0,G=SkY0H1MkNlr&I&ZXj3omd$nl_!\WI.m32)aj#_j0p3-56,$Y^Kd-HY6MC#9@^DBTo7W>s`N
%7KV#^l%COnG62o[j`rKGP!e$#I5AMh!jf6DX`o;t@mi14`R/B&YKWPpgi23`?"f.nU[=$D/\hXK$&M*ufaXds4)c4Z9`jCr1PVSW
%KT;ZF`PZEL#=T"g;gUgG9,l<.8qqnu*4-"@Z=E&C16ri'&k1/*qRdl$klklM'eb]9ec@!\>:(A%BRt\rg6$(![%l,*V#BhJBlNRu
%6a2J*?-l_/]Yo1#Ln,Y2.2,8-cCg<,T`#3'_E_i<X03gj=+F9]0p[@&P2(s$d\'=#[3.n(lQg_#^o)eC,cM@[DJ0qGKEDMs9f.bD
%E&oq&dN&b`o6hND7N*D6G.Cf_)6jH%'b]H=RoTQBkn=N:ju*GmpgurXqA"XP#+EdCB]2O#&s"M0+hmNlI5I7*G;]_@s3]aRBmQb/
%U`4u+_!;-GncN26P3CVbG-K=</:8"s+]O7f>!9Y8"Pi"6#p!V.:&M#u0N9JD@l2$b(k.,TU*\@nT8j]:LEIi(TLS=2FiU6\@!Rb!
%k%uI'V*j&qdC0dBL3BCh+q6ID@,M9O\0fmlnqb(D8"8J&lhDoi`/:d7-%1P;LI^,%28d$NYt3@g8J@bN(<[q:l?P4LFNpiO^he_f
%66]"-59U%"8=,K=5RS$pBFd5B?"n/2$7-&i:I8>:$\fqcT]nt'<JHTS%1'\odZN*Gqn/X+KTDZkRtIj;Qu<ZtO8trc'^"#ELL\gX
%9h(l$A'(c6RY/C&"X1Diko#VX*^7Xk'VO1d6;N?kj9d(;&)mRN$l0OcL^'uc!?p$$HhJf+JRj5fK`\cJQ83lE^d9l&/u1c=2DAo;
%j!iPQi%<ql1-@nAfD-bcQ:?E*I5@to!X=_>Uh>r4aZCU&84[#!#T=oEK,e<r7*?r0GQauRTcRV;#or&*BC$CV+q#tn.A?qe;OJFi
%#TQMAbTSoZBMT5.-j]1T.Ue[^ZV(_*#VH)oL.8)N?p"E[=Em$O!Z,Y2)Upq0EL/S92UeU=P2^j&"LRXfoVCUU*WeM.nIWX7@spTn
%).3^#J_=@#gX$d#7,kR[?k![6:HA^>L`.Os5O'DKK,?*OKHZYPUk"-g98fP^4s0KNa"&Qc:^OBgnS:N-52[[R,;<f7'T=]4I0!1K
%_4q.icRZMVoI\t]L6,sL%g`AG&F,-i0FS%A,:,[#.08t;@E]VG;O@eH<"h@p0`jWlQm&DZQ9o&#>hD<")WJ^a7g02gJof<aU4J.i
%PER9Cg^n-CEYgbA&<\:E>f@nI2DEKgnLSu;KL5%(:sa*e#X4qNUQG6s!/Yh<@E_1E/`U=`ZKt,,nqmKC%r4ImX+5@7dS:I\CElN0
%DJ9D&[tRF/Mi\,&1D2nM`4RL+/SG]Ud=`RA!G/Keq*po[86Id2'P-dd51(l-Q^HQE(>5":0ibl]Zs*eITn2R*&.Lh!,Kh!8JFUZV
%nPYH6EZp4&<i2)Z$8)M5%M<k05=8``!JM5.-QhIU0,O<TYS8.)&=\DTYHSeiI$Z*EU-TMrA"rK)cXd5/'&&GW1@WL^fH?cW<h#nG
%'gl)"C=!MUOMG\"d/GH6X9;!$\IJ7<#`7QHIUpaS/-*fkTj_Z1M9e;rkTPr(2\H"BJ4HAD!W^*>+b0YNWWtW.iY;6"KIdaG\<7[G
%<$rMhJL0I`0BB*"m'i#)(9KI'Oi]7S7,^a)qC:'Gd#qf;n.[OJdB98X+o!`H;85@Da+7qt'^h/'`$kE:-*@Uaqe?uHTIgtSN0p.S
%84We#U(paLKCj`%$]48\<ZQOC)5,6,Ut;ic"coB?6;g0c1AmqQFV%a<00lLe-6V[`'>`%XJsf7GVSNVdW-"AZmmC$9W+#-,)\YKm
%5k`:7+;Fq`+*pMJ[3D`r4%8:l;2`)9AF33GE#;B&N$LP)!XH._JP;f^gdNt,2SpYpC=9n.ee#fI+Cj#J.V.-kP&GALp$k0GX;dMp
%EFC<4@LIuM0Q8FSdCBL@0p%\X.ZUT"U'8B#3h^.AdUtY_Kp>EqW'aGeC'WW*Tp*8>X4&],6[BpVbI_AK8X7^u,T!;raH-OMPI/in
%lm?V)h90p$6LU'aTSCf@lZ83d9beN:'tOn[r$".)+mgq!C,352C3Z5p!!2j6"pB63AgO*o4WmLKWXmFC)TZ^dQq@EK3s<=KA#+q%
%SA<u,K$XK7^j$,M`+JPt+lRVl1m/rS#mS2IAM&SCK8`-LK!k!_';ogPG"?li&K'sMG)QMZ"*0p%:#%#<b)j7]mL+`r6m+r*lO5^D
%.#:Dbd#,^0Eimj\d#%\M^kZqRQBTGo!Q\LZ/F"?qE"cY#.)YNT+rfn+WA(]4mt?g='>QX/`ObE>Z/9&/K>GjY)3gVBIO95HVi^sE
%X93Kn'IXqh=>qd+i)GguJZD+dW[0o#>H\t-(*#nJ(druBEC%u\,Vg3r$g,;q2i&:]L#%7Z42f99)S[qI0g#bRmCUC,,C`h%=B&hm
%72(hI!*KV*.ms$&'aH4%7S%L.@P/T5OL]7B4`O@a%##(Om=ZI`#p@6UAdD`R>m-j`&\bUn4@2cdi7L/:,-]-o"I*"e.*kTNF#8C^
%ZXeX)nHK:+#`I,N]p*NM=SP5,O]f_5"9n),NRBkcn2E^N.h#O8I`5-T`ZCkn'*\Xm?mCjf&Vrg99IPWHl]?7_$Qd77\6s<b**`\*
%+9i+2_Y600_bDC&a:dUS&8j1V,1o7`kUoC@5nF;e.-j,[?9`*;5VYNV6ST^Z'#NPr&>G8"J@u&oLif'g1,bdl$7900KIme-O+TJ3
%jGVY$[0WD,'q,uUS=GRsnbAR;<Uoi@WmA*m#mJ9j:nN8T5QOm'1Le$S)i@`$$/l5`K8`AtEA[')R'Fl?8Wh0M5bnW\ep<&2]6f?$
%H<=L@kJXD.i5!7gp#`Ii=\.%-Y*sJm?0E4E%1(^E^j*E.P6/aJ-j&_K'*#9]iVU>II[m;\LF.,>NJpF%79ir1^1eb:b<lXD%;B*k
%o!J3^dTVJ'E4A2f"L6"uX>K@G#BLf$R0YqXPV_eU6\h4-Gi'[77h9(SL6=mD3/5<Y@oeU+NF\?9f_6R[<BOTpd#.Zg8^8M:0qq,\
%G$9R7-:NhaRM6u5W#H$MlQ$@M_I>&M6Ns#Llq(tEdGSLX,carMSsi3b.99"cFqqqJ/QTZmMNjK`RfnLmTaHL1T7n37WK@NuK=R)U
%MG8>P!$Cb$)5L^I_fgW%6\*%F,QW,+Ar[-V<oChh,*Xp9L)b(TWBqTi_X\9cA--0\fJj+Q]`[jnYje>Dd4e=$1OS-0n7O,-5pJpa
%#o8h;(O31Y:/%En%m1CWVGdO/;1dImbra.0,kFU@$h!"@hgpQU;)k4Dqr<8%0Y.KN#<no9BKS(X*#O?5+_DPDZlp+G,`4ZNg\VOF
%1]m#?855I0d(X0:/sc2h@um9[947nt![1nV*fa=;+S/=Fn8*)@1dZtd4-S3*+<dST^i2KE!Ce2HnN]8DkW:?=M#C_XP<%e6f0gcj
%.`%#7Te[aYTk8*Z^rNfpk)-te0K"N\1Eu-4BFF("jCQmcA1H@ngI]6^,RnG(#!b%"L+9SCfk]ViK/cHZq&E#riBko"SXF8L:2$+!
%p5ircA2BTJ*-e92'ppZOU=D'f(csOp,nO],4VWW/lN%Z\oe39J_1>bUWWM?L4<a-KQ8!u__@EJ<6GW)2Uf!OP6+=aJofUQF6JB7P
%Va2?c515HL7cqT0"S[0qpeBhu(I[*+*J26`e;9n?-/IO3R21@I*u^Fl*XsD#_`=^UZ%qGP*8?0WJbN?b/(5IJKj0,t=ICPta?!#5
%!3Alr`"=m1Xb_rJXlR8ALQN>$SV`)aR4h8_RG8V93&W\]9`u<+JLh+AURXpo-]5?9]2mqgL_eAnKUh-j7$4u)9V#IVfW+c6>"Z6b
%IBjKiBKfHb"ie7e0f98Q(oAiXOZ>[ZL,,J-&dM8V=Sk?L_TMAY;o%.CFX;)G%4%K%2m>J#G7gLNB`h;O2,c'9Tp/,.&Dl&*qPp?N
%N5Kg+(_uTDQuNpZHjq)'DXcR"!uA3"!kZAo8&bNNdW%<%"sOsjkWJ2?Me_U('Pc2gphMfr:`P>%'J2ua^,iTH6[T%>(?&'-LdRB<
%6qA/`QP9n@:e21P+?o!>&jR(Q3Wp7IQeI65W(MjgZjD!W85ui]"%<L,P>I&Te<L<t#16`C$]s8"fRZ:Y*2u1)-WK$#;rGV\7p`uT
%bl3@<c^i^1(.*=LScHkK[U?AF]RiQ,Cgi'1iAH3c1.p7l:=par#R?X$?ERp'<OPFY@:K.?haW#S+s'>i<a[`8R+fD:Sm^6XE5muY
%&\qcdNm4<7#mX!PNpjjB8(^'N]VG86j'uf"NI4ZW5^j:q.7!O.Bk'M3RiispZj/;r!gbI%*T-#K?n[%c8-E]sXF`R/@frFcBN#"m
%_D<@.A?:9@K\1Z/lqob$T!\<-Gj,JqqV!cN8E8hlar't;0M)\k10?=;-M^AagshaW0WW+l\<.I`EZ^1&D.=*VKOcqU<[/01=;Hhr
%)GIcc1jJL.Est!?F$0[&ID3hb&/Ie(Bj7h09_[>[W,[[hN",6<U&fb]Zm<a7_I5b8R['=Nd3pP?HNAMDKiC6e#m68FPTKFg8tEeT
%m`Ot8Pb3H]^fs,TWPdqB"MT49jWGo/$WJ/uL(8VX[hlbW^P9WtAIh('2FR`hb/P4X2YB=k).jIt`OcfO8'WN$Q5J:0E$/BSCUTaL
%fPH^Z3HN<[A0VT*B)hehrp)fKka<?IW8JokBI')k%@Kte`4j]WBiL+*ll[rh+pE,B(=IAX>E!J)2%c3TY1/s\2&;R?XJLU!BoF;3
%UXYsq]>I6r#q8OhQWuUMnW=PXMN,1ZbmS@s<0CU%6(ee3L+H:AWr@YP-_!qG5V=6V88_DB!foHiU'5eP(kE>Kb'9'4VL2T6&A[=f
%Lbjt)ZtS*UA3qHYBX00])fJ8fA=?Fs_B_k&c/YKam%H0d/lXI$^]G1V^l</<PO%.9"!r38JXIH$ejSDP$9^AW+fL`HB/k`L4n]L.
%6s22c=9AaEq+NE8/0oP@^LIn?^3*j0)+tqt@pdN8.OFBgIZcUdK8W\Kk%)pE+e6ocJ4e=\#a83ZaR#a@4p88KG)8QEK]Ke!)qZu,
%$<;&K$;=K[.1lkYM>4MtC*Lae_a:u&4>>W%i!ZU@,`6ABK9`/OPpF,]W8N8,%,o;4^Sts5^rYA'FqL4/SDsdHTLB\n=.hI'mR.)7
%niXg&A-<f=+aQ--L/nhI>R?t`RZ\&sL`s!"*FM^<V@WqJhlEu5Tik"u%\Y-#auYuE3)_#gjS:]$/8QA&+pR*Fe9hOOP&_1]cXu[7
%g<j<VgJF'Oi9!dc&cf6I`._#e%e=t`,`)Vb+dtORND%1m4V:EREpaA$g*74W,D-9X38*XW;F_%;gM@@9)eB)B&q1E"PnmfZ'C$W_
%F;40IF=5HP2\GlWh@g('Q<t1Po<a2U)$I7CU$2V_GC[=URX>2D8gknG`dg@iKE3M:/-+i59FV$KMSu&WhNK)1-KQS:%@=r/oP"_!
%N"fej:a,C[BJSOR;lh0FO\-*DL6d9"F@M/o"$;:$Us^O?-A[KE!g>1#-u0Dl#m/0I"mFW5&L,7,E/Sm,>OUQ@&\elAgL;?Kfdrk>
%!][E<8<+3ULWRjk>QfXG.m,O$-S8`S3SY&jP8,>SmV"<);9D:kpble_hcPf1KXu>7O%Y[)-MDHhi[.>1?l/3X&?IcOm_]#+g-0Q/
%S1f)o2D("YB[L@FR"[t##fIo"d%QL>M4TiBK1oq<$Ho*Pj9E^/a"XMYR2"qeTH:arB64RB5Ws(0SG!12?-R]7%BO3&C+@_J5tN4I
%/4+Sgcos:LEX>gQLhQGm@&B&+KSj_U!-a*=NC:4?Ccu;X"Sg3MW@-I<E,5Q;!+G&C*d2AU+P/3=;Sr4e#Yq'?1$&0E!u%[*0ET`,
%JY=E!RK@+t)83+:XFc(&!#,X/CQ#?oOo0ra6^FO-aCGTcb'GCjl,!`l9>J!*7R0uWd>a/X+8_p[#Ts6O98XL=\h@S93(6HNT%n09
%U/T$>3+U;ZFP%-5NE"r3R2QVq%NQ-)(hfiU`$(,`K*?h?72d!)]R]ulVjoT*#jmcZL]kSe,ZWrYirlA/Kk$kW^>Q+YBL/$lJb2Yp
%8-DJVL*iJM+S?oiaE#sP#iRcm*\'u_'kBRT;$6r2bq>2H]G"k)[+3<Or)8]'.,dROLKP$_$H*Ys7s8iF?9^h1Qa[_-^ihQa"UJ2)
%ie<"2.(j*1J5kR]4q$2.fmnaQDbOF"!N,Y=KKPd?TSPK:["3<*!bbt'jk-AK#^n=.-phAk"hREqqd:"TiWUY7=n@f/d#e-^CPOSX
%;NAI_/GV1Ua7=uf`1.!SN0#6h1Ds*r75p;G+XF87'P7A7DEsSr)Q1h_qJ\_+qp9lp_.D@5^.,&$,\mOaIWju/&nS`b;a_f`$@R\e
%5L28sM%DiW.fbf+E>f]7/8uj$PTt&!(5cCj^fD=DQ"Qp;oI1Tq\YugO$4>8f#b0>>SS$Emjq_#@4%<q'0dn<DA?to3]D>(b,%X@*
%hIYdpO`^_!Y0B4('\%lW]-U_g>D9GJ&&+^%;94F.YTQ7jGu[i!n9cq$KLp?M'2Dr_1dkI"X=-De0SE]X1#:u=eqlhh&0f'Z]a$4l
%?-\fdNl?@t8m#Dg$`aht;3@CQlcOrR!dLJVNgX>YQoc2j)JXmu*mf&22<c;A`S"-+N7]d/'00.W,$s<i4sVbf78Wjc6Y,aIm,F`L
%%U)PGi8<^rJff$K6NKPk;?4j#Pd#P'jH38j6OKknEb60A"iXfEY\ZkMWt/,aB+/..\Wo)h`29c,Y$!=]ecn(c/3XRURG+>81dK:l
%$uP8#7O)B>N6Q5Rbq>@SjG^372NK$&^aC986XFai+!_B^C`"F`k,<%cXmLu))<PsC8`G5\m;qh$Pt>1AUh/I]Bni-n#u'PUC3Jc&
%e&\?(6ht=`=1P1sF![`)9s(qu>scir,;750*'=;K1I>29L-[&FkF',i(O8Xlkn`0@0d0>0g`WaG;Xj1@nWot`.Z$9%%6-#`n"XIt
%!>>0W^4XBjie/aeF30C'KV:k+MSfa>)jI=Q;@"(1pllaN!&,$_#V<;tWfX#3d/ch]7mq;FEbJAa.LR+t:1Q]M8ArSsRsNSm49RTt
%S4iU5h6=q_Wrs:me3`bc>_T:_"Y8II)%mZ,>b\$B;hHE*V)T$M:q/(28D!`X[u:[&c>n_sM)&oTr1d,q%5Wl*3$<Wok:1FE<Lb"1
%'KI$\\P8b3Ko*as`\If%@)tngD@'%6JT\8HFup6seQ<`C82V^sI%%r2VrJ%[!!;\F5mC>.l(dd<+LY!80ne.sS=bns=c[9.>W;k3
%OXu$R!@sFn;6@M@`@PCrnbE;0&K=nfajj-0<YlMMYQMB>Nf22*@''O:p2h/)muX\g7;2C8OFW%uHkon<e`cTco*AZcfEe#.-ZK]L
%6)`NKN.iL5n4`lm"U:YL#BSklA(rl]mu]m-30_9-@"]uT#YgNu3uC5UE=!;H`k84`dIoPs&UN6l$$]i_@;.S@(M@_B)%I@S)aYu;
%g]g_)+C0XsMLiV(Lkq<G-lI5goqG<A"1ehm@gkBLiFih)H*5haE0AIoW$\aX.3%5cQlJ8R1r@F(BppJ<,>PO5NZ^3s2[D=7*Wb==
%GeakF7-)P:Y3EnELBBO^E3F56MDpQ@7!%YN6*,Z*bDo;/L8_D#,r7d=60@Bh5ZeJbbF&p[W)OJ07uC03_`ae1"!\8&D<lu9YPZc#
%pfo?9L\<VM3oc+6fK^O>ST+@Cd4jq=E-Nk>&QD/f6c[-:'WcJbp`.jORL%:bNbWW'#&]'oUY1Tf#@e+W2o;\@D';*R!h,S]qaOgV
%'SLX)%Udt9K)e@VL=:sjQq.M'msN_(eEe2;6*rTmc8=3fQ6.lZ=A:03f4Fc'H:'=?FkBau\PuYaFb(_Me8(FsOlPM]%Qml7Sao&i
%Q@Sjbb"`W6+pObg/uY%4:s5)Tia*c0)\DK^g')^Z%.,;m9=D1u?AKWRlHkFRX'peD-H\'nk+(?6E]ET_SLEWWng`iaNftX'ao45G
%NQRd#ntIouW85sXb!KXbBh<]9f7Lg?&'72tLG5u+(SZV%6bTb(6ST>(!rb$GIZXP2(]__!J3_[j^gVXTEZHE(^X%UHnF-L+mO[GI
%2j=rlU4O,1Qs1'p+^Ak$b=.75"qiJE&GT))R;[=YI`L^u.`'dJ16!T-P7s^k'HXroaQX@P@*r6#b2GscM&+tqjcm2rGs4t.9'ZHg
%"ed&kD)SPbP[<YAHl"RIniI+/?BM$C95Mge135$=8_?/J3-Oen"V)GjeN(c3:h,<Id.M8(2tR;FEP,'kA-<))F+paY(5:4IB.!O.
%=K0A+L3)>H)20%lD+YO>3!)QhR(!ff<)?PN\-s`8ToP*e_R0BH.0eD&TE$nS3\Zhc)B!+;&dD9kJT>(j,0;!&<@Itk0!BuTV_\m`
%0].YZ]Qbkl/qjh=8@>[P'phdQ#^<e@9nt2ePZfP#)iLJ[?>'\J"OmQ`C1.\-;Cj=+"0NiT5-g*H4<19Hf(%7/Z-aaTL[DBeBG.F`
%]nOJD'(D&=Pj_/,?'Zlo6S-@@j0Apk"NgqUfLE,7i!of^>Z_2!L%84t'-^j;+%o&Q-7Lbe)I0&WG).tD_hbZK_,[Fi4`N%>o[<XA
%;FE')1\l"CJ5JiCV`9'-%;pTM;uuWjEFqA`0:6]6T-N8<$U4tfq5.Pj)%9cj2_+eZ3KV+g#FGDTcrLsWOmH)a0SE;r7WCQ<"@@LM
%d1hfN/m4N<(tsaB%StkkmhoPC(UVN-\M+-3+S\$!&TO/!c$pF:RR/P^"sL$i@_Vp".dEXRF,CT]Rt/C46CS(+A<DPb.n&6_%p1&V
%cY4ip".u_'9k?>J6`rS7$^8beXgj&5N:&u^Qt2=^<sKchDY#m%,N5p5FukkZ+\BX6!YIT;M%mpe*O+^T#/OE,"QsJZmNht!'K`Rc
%]uGdu**l'l!;T[765iu;c3tr5%4q8g^$bb1^'Vo$84?Y$P&!JDKHM1f,=u/=Kh_5WKE;>jf@L%/G^tSdBN>2Ylu))>UiA4fPSKPo
%)1*>SMkh<RW_rU\!lO'*Uh^BA:-p,!WF42BF;%W3:"q-]qI^?1#&pCN^f"E@Kn<ON.E=6n?:^c;baE"eeHf,CN%$`\D>Zf@@rZcB
%Jf3;'FD[lc8"41+3S`_bC1Ee05nLs]H:>p*AiN#N_!5m<>Z7L<@"V2)G^.s"JJufq92ee+85"Am[7X$nM[ha4`fFWfN$Zb\E!R#l
%M)bcE)VPHU:(+;-")8aDL-U1.@0!I*A^!IDZRiDUj4XqQ+ngQi`f8u5-J-?eRlD+=#TmtEJu-VpZYCG6j!%S1YooS4$ogE;]&l[M
%D],/ri;uRIJ,rsXh\:V1.4Lmo%G?+E/CGXIED2M4k%Je33Huk'[U=$)$_RP7\TC6(aE?J%F-AW;n&FY1'UK'9#!`@`dS+,m(Sd?L
%Dij"I-#eKUJ1h.T\YpAm(ZW^7F.B0po^(r$r_iRn,7@p0/,@\4?t]dFP/=AX$b(t^6<5q+F#HJn-pD1`9jqG7M@.&$`Y)-NKeq#O
%=qjO5,WIf*_?@Z^;Dp;23%Jg.ih?&Sp:eWS9.jaP]FUSoREpp%$'"#D!SLLZj8qCK7K=(l!=XF[KQ'XC7;,<,"eRb3ig*B@0qf`M
%&,Scc!ATd]#M6iGk$t=5gO+[kL+cClDGDQ%OcP.bOCeup-ppp`/2kQ8Kl8'!TNj4=fB;W?[%bIW*N5$Am8>B.>+aWEo(gg<J`:Dq
%S8QpVC918'q2>p9=>#b8VE1<-Iq4P/PRKnu\<Th(*"1nb+)jbj7*gCC7Jn.U@pM-72UT<N2qW\9.^I?X6P8Jp5Dd;j#ul)qs'][A
%?L$?N;rZ@)s0TJMZ6$Qf[!+$BV$QK;b^b&or@^E"%6:.36[,_[1)$_A]sr>Gs#BDNdAt!M:r#0Rn0>ZJZ,Wu*TpWkLAY[RRCEtD;
%R6uV8Z:]Wm#977>FRlep!qFru)`4Lt%U05!^n*B[I5)#hIJq+>DsRRDq5RtA066O"!!:TSlV>aKWh:W&$QR5jE9nPD"dW,><,DP!
%Nji;fCq5eqfF`'-g(mrbfJRCOmm7i%4;#oqZBkjf%*]QiL-r-D##dcB,HOb4%6%._lZ1Nj$:cOAT`n)LFVTArR(rTZ44G@FPhf14
%f"HKUJ4sOBk;>e:4/W;5pJo'5mlrkCr\]Xj0?m5V%d@A%-[(3t$@erMdE4\OI]9>6U;!$SmWZ3o)\aJ;K8c&eS2uA$%fXFKcjV\X
%ERNi[jrTii#*idcFbO#hn)le1+YrX&>&O,d@D5/D@=&jb/auXW6EaE7LERZ,7TTs^oEiF?Br>5S"NR2P%q&?]&Bbo)K%)K[%CBfU
%Fk:Z7;:,P#GjZ;i!T;[-=8LroYYb[E7E_L;k1`/00=Odon:4!K[Qa,H%++uJ\9@Rs,m9Fp(5(=*hn_o*`Zn/t7Nh&5Ui69-0NChd
%G3_mTWp/<(or@.ocM%&pJ%,eZJoX/2V7,g&#X+u<\Fon<mgfr.AE\G69Jac(4.*!Y%0d$7K4G_`C=V4P#buG%.3;[crma[BdcmqC
%8L85:LNt/H[&T*RI6Y8Ihou+In#*t[,47e,L%I[?P:rIm@3PF%VLep#'i<R(rM"U80M0T[aBg[91NqSu(;9Gd":a'\mon&p'LA.c
%q``k/q6_@T#tQ94O1LtcjEqT&i/HSA,tTmh',*!uh_[Z0H;a3s<jY(BMt$_6^:"[jV_IhUdKB6sU(FBkWh.0J5ZMq5-k:Sj5I=.:
%emTuo%*LXZ1shj<a2Id#fj$Ukpn:fh@Ea(').E#N36^cG]=c\*"f'_YQKFo+&\aRkp9q,WMGR.6p"[.t:a#(c`&R?h`;j9.A#5FV
%gi"E&Z1TH88%ku8GMe4KKul$@=e1%_)<NJ:cdaN[N2Qr=:@#1lKVfJYb]H'H8u.&E&f/5\oDQ"(]a^u4'3UY+Us3oii0BhuEQ/5S
%JnhDfDbLj,ji.)S\b9m9+unYG='17rfNoo9=]8D%(-^i@G:+e"@5H.4GgOSbZ?$FUF/F,"0Qc=@5F+*?ip_0X$+q4.TBU6%@WOch
%%=I>3(*Do*)pOn/+?\ED<UX.br#P_@5Z'YD2kc]&f7V3+Dh`3UUe*Fb<0c\`q?Gb/7YL5mr^>3@[Ajm$]'2"f8cQXIE^>['SM&!\
%RLQWL(n#,+/,dPb@8IB7-K:0eWp!$:1*L0"ILtlE=.$kla>Obn(`X^k#:$-Hs*R34Y),4;=>.GnPVth6'L0?V^Nq"!V"#AI`hZJT
%hfP'r.s2Oj(`":&_[(&_HNX`,XsTDuFRS,J&"H,^Y'[7=f+<.g\.1WL#bc*m!j&G#]9PTp<c<d(;?L-sI?,oiJ8LM*PK5X$3!:0B
%j8nqD_8Vjlb2@$4h='ZXSh)KMqB:XMS't*<2NXajBX:D_hp\Fc!mjmkB(mgq3W?!A]JB+U#J!g_(:t][mp\,>V*MaE(18-oY!b"l
%KTG;=#&)+5[=7AN5`P15^VO=@;]:7)q\$p!kL#JQBbp=52i5HE?k[=)8qIGXR/;;c"(AfM:4CYs!tE`/11(5g'5&qkF5L&D8b39`
%7,T4^k.Y&d[%=o,%F#+:h:Yt>Lb/Wab7]5Im]gS6.euO&OVQjXf.b3MlKV'Y":o!G@q`@5ke?cLB^KUVaDrf^c\$h72CA]'<$0X@
%<V%\X-th:+'_]tP[f!*N:CoaBc)?T]4*lS)(rtPXmTLSANBF(SP7\MX6FW;3pB;5nFDls4-K.ZrX\PSpa\3Bubt&[f"]*V<+^g$_
%<?ac-,8Dp=fuJ5o7Z!odI[I&`2K@!-Pm;uMC(e*l5#=!A]#XR(M^LCd)HqS(;@Lu4WPiQK@hLc!\NZj8,"r1AigfCo+.)K8O4B1+
%):(&qlq.-#TE$VVJb;m>DT%J6pC,<AWT&'E*^1rmS@...*SO;b/1fPu>M$+qBOel[@H$R">c#[u+ETX4Nm4n6b&#a%GYO1jZH\3!
%OTaL,.$5Jp9oB\%k=gel<<1'6WuML"*M.,^*1tE)k/r`ZF9agF8RQ!0&`=;s<gl$5F1?qT"@si5?mG)1F0YLs=@VItGnpkZ1Oqr:
%CQL@fOi=1@OCL!I27QYaB7jaTT`f:K0PZ,$:PN/&)>>7_$aZ!LF[jSo;WVerP?Wt6h:k^'R&O`bT`*%WQ`\bYQMTO/lE),7R_1JL
%U+s\=Wi-[9hK1TfVA.)-#Mi&E)C3Be*UZ)ZUAC7/VhR*3+asBB@F?[0CLdc%&dJP%mt,V<3pIa4R+AT6*A&F)Q4l*KSUlg.J3>_;
%d6I%5%O6m)3JN`69mARj0RcnrjB\*b,t"UFg\lu"Fs"'AOlGKEfWD+!0\XE^@]e+C?pD<HV%!\]6Ts.Z"HN4t,bh5dq@]$,(Z=pc
%k]rHsBMemt83])lDph#.TjikG.@#l?a9;htlr:tnkZ,s"m?dsmbQQS>Ks2@3D.WPT"UT&+,>so:,r/r=h%B3kX59tkL-DCESLsF=
%]2(p@WdOY+7BYY0'%XB:0@AlL'AJCOW"XqZ4q^[fiC$?()rR3TnGegT2CMi\%M@:$Lq_pp/(KpH@cF.rkQ-Fb>taT::e`c1Oi410
%STt=5>$$qAQ?%,$=h5M3J<.<O&,:M>&qG^4n0-Rt]i@dm3W:^t+_7)<Sss6nrB-qr<XAoTZihkN//97E^\Y>N#IC!N3Aa2o;FBV:
%K@Q\;I.!qqke)&ARmXsJ(KWP!=CDq`3ZBYqX&JVq(GECW\N;%rgVMMS.ee'W61#Lrh]seEg#OC"E;d3V$Qq9uO6(H%cVJ!SEc:%S
%G#^/f>G`AK#'iu*'qVE_H&)raN?W(:d>Ib3,6CRb::?mo,OpQKU&Lik^a^foWZmJ=VU//Qs1:4@ZtQ@,:a<[#*,ooY2#XJ:S$;n.
%`6bD4dWnp.`9+0_*l8jJH,17e3/S!*3'g?ZHE(qdB[cHPA^%BsG)BBI:!Y;Ug';=^&)`)na2^[W==&>=6!sWaLD.RE$mkmOP<Z5>
%b6CNu=5<*VN\2]i+\4k@/@6l]Q^"QXG'/r^D7[R$)hOjgFC:*F!`W2-oH`_%JOmD=FKC=8F,MNKBA5>ep4G<%U&q%2I7WZqfjq_P
%!-*%i4MV>O^PEC+*%Nm>HOVd=ns12`fn^8XR3uVn'G[_Z%!`k>Q<dCDVctL/p\^`>)BlOJ/c"#F-NcF<70-0IC&kXd2LB&%_d"ta
%*I6*-"jQl<f/A=2C6qS.Q1%M*TWd*a`=^>,\uSe8"Dc]8rF;Fd$O]M0X#pe":Z]ADRH8^4;.:Qo\9V'D5h^*&,'uj%"LOE]%:=%^
%6r55ahj6T)Y0<im^]:G?]sK(G!sF2C#J.$:7,;gUbK13q'<]u\mDM^@KVqg.m*Rehk,0C9k]N&Q:(3nX44jJGi/T:Z?q2bYJbjTA
%JRK.nLZFo`f+`iRj?CeUcZM;#nUBh4r:k23>aK!E6Ja,n<N:f3SHb#lT9'VYqB393@85B%/Q'u$\5l58B/O9\E9k:hf`mW;1:'(b
%DpIR3[?"TZ%,tkjA_-/Kc/re55dQ[tR<Glq<n!d,WkgM&\l2<cG`arAZU":_on-5+HLm*6!ToEn&8a$G1/M/Y(e&]eJ3!4JUjmRU
%:/G1I-XtG6*EPD<9#I1po')#1=Q!LIqD+i[PX3(]C>M++jTAmDAN)%f$'*?/cK9'<,HZcTjmCnoT5Gs<:`V^e.HE48G"_Q1`(fP@
%]A^F6M@AA>iI_s&LRu7K-BH;K&r$F1UBi>2g:ND[%3h)Y=s0;RRlglrTLPa,[qSk2O!V,(aHt^Nchk4_n.jq#@ca5SbV'pgPRY[&
%=8`mGJi)js,`-&C$OEH==WkGP8lhqqC@)GOg615V_[/QsgkSGP<XE'p<Za7-[aouCX:.Uf1u82*A%_)$1Wl/K2cR64;W3]M/m*HX
%4bRWJ\L#c-F[EO53=;E+%\-R39b4C`Z0&Vb%nhipc5F:/Z6'"FWS0kt^""Qridf55CFAKgIeR==W9-HenB+E>rQsFDl&W0ANiQim
%9es'W%lEj4]j9<=GM2`Y;9cBBm1GDh'lhH&.N@PB7O[MXDEo<NP]Fn)168"Yl(BOf_iK]hU]Q>c9!aaZC8:&N<$?UHCSPX*nr/ja
%8?^W;PKdD4DP@t&5*r4RN^d^(I_+,qIWuE9_78^`pe:<&<+K+FD>7T-=cqe-^/_dnQKeG#`\dOoBb0GD*3IA]b&*i&),SQ'hcpq$
%Rmo[tfH_WpKXcE%1tQ]@1d"b-!a$j?-6p_3bGIb/(/]5qlL1I-5%2P^h"u2SJ*De!o7\U)f4Us,eo-`h'^J]JMs=Rj3`Pn(/3Unt
%$Pau;c`%UX"cG&HN.@n+/6Km'R+gl<kY.5><m!uZos+pDpMQi;F50fXdWgrks"Q[D[!lm/@4=ifO`543:[pe5d*2ml]'O3'Z(@Cb
%d'/B`6,rV0[B&O"'29(oAO,Z6G\uaT.rS/C.VS3,O_YPqfS\nmr]G[tD&m#DG%"igi;)7N5c@+?#ZcLKo4M8s$1b2a;P1Om2I.^b
%BqohXGO_P]mh>,4Hu\5;ZK:WJ^4A?Dn]OWS9^`J&;\?'f<4!^3oL.r9]C"C7O,N!%0=XV<fd3UdIaKIJV7g<KMo'BSWB>!rY&p9I
%YhG@2i2\35)DcN:!]mY\]eY<FirA-VT3hJ/PF9@Q:uTdN\+dN3r(qmR5CkSiW9F63#"<XDV&KE&ShBh_pQN(\0sVCck[)nORici!
%8-,qk"Sd1,0YLgD<6M7SD9%T&,%kp_if/JE<Ob[=:6*7#!;rWGRCE"[L@UQqpI%(Pa0J##nfGOn!%PWf_YqN>WkL'T70D7/##l].
%*9gWQ;ifE>;8hYPro9Vq[PV>mpg##>nna5bH,C_sgYlV!dG,J^j&'BVs/p_)./s12<X*ma53.Msb=s_33RGomN/X6rmf`M+`!G<6
%NrHac_#gu:NCYdhj])i-J<>5Y0!C7Gk0i,l]=r[,_uJsMqLNuCF=5Bd=Aa6O6R*msP(4I$N&0[s<_&,;F)8^.Zk%u1!N_e`0f8qY
%]f`%K@o\&&4UklL:X8k'>EjD#mJep#M[7/q*aDsD%k%PfMPj'9QlUT:4r[9n.XqGA;I^KOc\88E[7G!+j45e?=\$qMYJMLf,]ML&
%3UaG,O5`7ms7l/Mq"u<12iOrMrr4bg+'kuK:'"m)OFR3<$,%@d%hKg+?uP)_r8Dh#q6#5a`+RWmo'_$oNVECVs8%e*rVa.cX8J$?
%I)#Pb61XuH(XO@nWQ=9tK'R#?HZ*O!-SHe*#2Cc7*(%sU[C8]p]Sf!AT;k9oS;:3\k_1X5Z"W/B@&cO@Gg@uL';N5q#ebe6X\m'A
%\g-m_JXjCB:)YTOBt8O@P1ftXiL[W:O,kGdC$-_iUWt@-JP'Hm,g@RP(WB#8kq_:]BW1RYhL0L:j:SU/,fR@?'ka0T45="NE!SV3
%`6)f8rZA*e_QY'E9rO12M_Dh`-VFR_iRB$*of`ocVp]@VL^#aE:MuW$L[T1JHf)e,?J4OA,Oncb=t^^W#a5-$^35K4)EGPLq`KU)
%2143a%3pJs:O1(GD^[3JXs<MDGW&I@HS9Ufa^Ai4GCh_UF_j*H?Qo>#m-Zj9))Iu&NWFciom>jrd'n)X-3J*k+-e&I02]5.Ue_:[
%+28(BiUelV_BIYO2tGgQCs-CJ[p%0L(uuncMU3onSnj;O%pW%42X)[F*J,1-L'aZ*<e*K!!*>ml!`.s59D1FrqJ8B^:)O*uV23LR
%%6S!c2T`h^iYX^\boMjTX$=h/</<tnidfgJc]-'pFBR$e(IV(6-1im60<B>EG?)LDDh9N`]$s@%3V)Q[h5JVt>e]IK[$uu_6.M#3
%Q$C49%a$]G8l0jt4aqut!1c,mlU>ss=:\k+ja:M)MrF"c$i&='>DFe7V5$d$W:"5I)['o8n5F$:rCaXG@,m.XYL&@DhP&LSeaFcn
%jq.\Lb01XG6$91S%g*.daE-[nA-]C#P,.J6U,CII09!)f%Y2-t&P8\j/?d/F9*'(ja'-J$=[<8@iK6Y2K?EMuXO<7u^'4HJC?RA)
%#U/AEmmm[NK,#gN\oke9o4Lj#rV6?,[<`s"(F9*]Z:O>[<$P?*DAQ<\K`"lcn6_>D5Qe%2M!0ZF.7tR8]^It\NZch$MGasq",Ym6
%C:T8=K7C]*Jq_Dc4C*f@r(BF=egf6BV*Hd:T\DU^"9TT*?,LVXd"R85j\YTi6u[qrO:.[^F8do>9S5[1dUfa.,;o3S.H*((@?:(=
%MMgo3c!DVoHscO_&\\u:d6ce2f*AGo%el.J?<Z>4cG8]MMZXaL!e.A!l$6)C;N.96dY%u.P=Fe8;+@p5en`Eb?7>d>ao3L0]sP0&
%,/IfgMd!B?r=(J3'#pk@Y@1$J]K^0-nW]fBK3!oEF&>#eCtsbC1C0Z[mukn2M&DJm*<W7*e#MiKQO>W,)N6R%8Ymh*DPq@tTtW<P
%5_N-C)E'1_V0&-\%u5HAWm>:)dj'(1@@qs'do^,U?YY44[KkS*9c%YG9XGCq+5V3Cs6"eB&g!7?VcY1N1ShcZB<8IFH&47E;/EF[
%Z([3"AHmab@Ra1_BZ_?hY)BKkeoABCRPmOtob!).@i(,-AC.<>d]3rF<14G8hr(;2ab2n7RbI<poQ#R5$t(a!_l2fQ[E*ZJV6/.j
%fET`"8m6NhK2"+8rJ?VELjmUR5MTn`(h-KcnjGm"cUf&WoM"$u'hq[=;0V:cQ?]QD"m^7Cl!"q2q8=jRDFQH(<QdesN5$-%SmJhp
%;9e#+MQ3HjkmhjdNg5V1&n.\Dmpa?t$@)cGP[t=DRfX'G%kL1\\R"/4a.=8$\qR,QJ6Ysc#-iQ'&l=Y0a%CoSOk/6A5AQHe$(Jb^
%,!nVikfAqEdk8":Y&\)L^W0('G-EJ>#:iLi7ncW$1dse)d@Ml0;lt6b*W[&BAMi&!;\E`mWZ`Z[NDo4kOk<^+nG>m#?d--[K%JQ^
%.+WO1#(VOc@tM'sN:J,j^.`)L<3TKKHof,RW94I_/OfjH/T#?_Kk`pT4(0a$61YbOLM-DqQf75^ToOO;Lfq,1%Mf7:7OUJ.BiAjs
%ZL+B^d]]D)*%H2c+6dYtWfSI3/\D3U/RL^),2`C>CiS;Sr=\tZ`tUY6`$:aNO_P/%+k<m+5<ug1'=Y>"CItuJ)in]D.>/PDD*n0?
%ajZ0d+f^gjDcI$urU%M[Has3W;([_.W$j*&*L]EOm#[3[HTC(U`caqN>goHJBbE2sea$o%qDNmsprBDBo`)/Q75_j^V"p)m8WV.O
%GnU6ESCE-E.`u;Y&:*ti*tu3kJnPF?Jg2sLYb+&;+)BIR%!$h_;$#d1mkP4g@VN*oC+C>SdM5d?#X(cDGJ]4b]F'b?VD9g,+(%Eb
%'YdA57.t4n4medS)?WKjG8R%pKcm`/p2[fsG7m"\+C.&[:"YRl28uMc6'WV/J4W=+:FT>7J%NH;DI+7Wci)B"EM0n:VEC3tfIiMJ
%?4!Z5YlS4<2D]AI61p@Og5$PT'm,ten2u\E$PVsVdo6m48r&Y3rfH#Ef00Y@LkQDF-:t6PM5\24Pa#F$SaF!?o;VS..S,RQdXN"%
%AI8C;+8X_$rc%Te%+/VH_qo!jX_KQT=0tF<`)Ym`XNH:a9oCPQD"oAPUA1`5b2S_e=SI8\`N3%E/s_'bW'9S=$_`m_gBe15!_ORm
%CUt%YUs0Z'_XiS2kkbSeY=U4f2_c-<et-M9aNZp+i=CnNJ2-a-6mJa9qLUu`eI#>M,71bN(ne5noHpa+ZcLWM!DG?_:;VLZ;!RM0
%8.QCi84afu8CWh`>h32qLGDM;.@omjr_=FbC+8`@&11B?LFQrtl[H"49e1*48qdrM2U%L[#5%^TIs;5]o.%jL'Lj0Rb3ucRZC_u%
%99C3rPVfd(i'LA/LPe@,`%j-;=gEgGUE9eA"m'AiWh+1,nn%a[]KaV6)<j$Y`aaM,mp9F6.,g!$r]]=ZNr0=\=]X#9m'D?kOW\7^
%M_44Sg*(>^m?^GG%%9ANp;`)3(ZMS*Het<n59?AI]#hF"ht00opB%\fj<Ha\l>/#Fe2'+Obk7iOlRUCJ9@F0YQY2=h+PgUI@FLI(
%(9&rf>6.4$J=8nSRP"'I@-#hKDjW<P*_CD;=Z/Mb(2a\nYWKWVPE^tek@D=V2RAN^'"]R.OnVND4&,;f4h[+cka?XlOruML+'JJZ
%[G\WVI*1KOl`\Y/0+X]Q``ihMXlmS8V%Be6ANb;\WcQ8PFiYG3"=P\2e<B$enaI=AL*oOQcBc)=&^&1h1W]i-AI%Uf\L/GqLTD:C
%M)+_2<V70"HO>dF8&DF5WQ`G"I'YbA1!UBk[9`^iWb#XO"AcQ_0m9pe4X2#$`)k2bK:^`f)]i/>iI(&HT:XM=^8bo34I*<fEd^`o
%\?u`/-kIgK=a&^8&oML+lF,40_BW[>a9MHIBQ[9PZQ+o2%k_VuJ"^Q0,ul3#54X'J.DS%7$sQTnMY]Ru2HB\@"om\%ADXHb0P[gJ
%F+X:=;R%h;E_+,8/3IJC3i;"2I<mBHVa]/V#L`$-LGeGo2(rnK]td>@jK*j#V3XBK&o7.Q!G&^NcMJ_G35*[p-7fHm?.(h59SZ$T
%E+b4JmMYef:=ff>[$$:>NFZIkZDAB"KS5.+\81oDjk/P<'hCo]9K$9lM<!"6PV4Ccr07"3eTAF+Y-'a=2AZXu.*lKY,qn45ZDrEL
%bnbB"A];qY+]/7$X])q+q;q4#qTG@>!HYZ=E9G`_qDVP-;usC?*6:liqFS=MmEiqL[mSubhn($Tj]iGXa8+:_MX@+2)StU#rch$%
%g4Ze*O6+ZTUgK#0W+@YCeO,J0iB*j@iK>(QCluF"*uAQ,%2.cb[cT[-iKm2G)2db.4@KS!"+=bnDIQciNu#OnhK$.GR(iE'WMIZ]
%PG1bG0atLiBn&D<21Gm9Fs7&Ab'-Cb'qoE=-+QlOCF-cA#_Dfh>+P(u(V:MVE<E:X\]60Sc>?Nar5CkNeO,h67WL6[r/$c[8Y$%\
%[<<W)0de1YZe!S>o<ZMO]&`sbB@csMNm)Zk'73J=V^6/F4GGR0'E;#?<X9;V7:BN@1&se3A*ris[*_$(nqdPE,(?t@gCo?F$.Y"4
%>pmF#BWgF3nljL5L=V+r[mjrh7$!@6[><6TROn#;nG&fSUq/@;Sp7k\<$ma=ZaB9c\T$r_oDLLuIgcF1QqI+0gg.SWmp:FBMqfc`
%/%Qo<[*h,m1=c_;V*-RX%3pX5"V?Wm8QDj@Q:%#**ic4oR=6XmJQ=c+q(T.tUXbJp6[b](`%JZd7I%tEHb:P)s"ushLSV_[79ia2
%Dl?!>FD219EnM_dTCpnMdh6\s/>I`igDti!/PCohW2@?dr1%_.ao72W1gIehP%_&NU5\ZB*M\I`C'+:]p:2ooS1A`G@9^qo+^g&c
%"nMHmrNJD8+BiYAZ?6s:R-\+hnd_ol.WA-pfP:t;H2m1/cQ3,5.V[/h62Go?7sbo>a,K?1-i7nWjNI'S0l3PWFV4e7iZC<^:BJf1
%]@>4h25E9?\f?=:kn]jAFnF7`7St&-N?hjX#C\_o&!t1H+CQfZ,Dcq\=*JDYMkL"cBJR8t;,cI8FBRZFDi%=r;Yk7H-r9uhl_g*?
%*X-iubBhBXBEOlBM07JBRg3$fg%O7')pFDp@roU9?adia;<h-_VA&i%?qN&ZmPMNl!B^-5&u(R"raT%WeBdF&+V-tC3'][:a]_YN
%q:fETiL-CRi"#L==5J-Y=f*!^Obfm[/\c)C/&U]j'l(n`IEf!]);H8GaH1SB(3GP[G;X?#[WuE(H5S/gEqf*]Hn\VcHk-p[9E4SY
%3r`C<=E+sZVWWBZT_kWk'do7][MgZT/C5n8enu*A;5-Q1%;2Vq9kBB+^KD,:d5:CMNsgO(AtKMeDG+^gci'4L'Id0OcFZ'LRhGo"
%X8r]TUD>r,eV(tp5YLV,j_p/o_+0n_='j/@<fo`c09h(R1aWc1pg]&@6fp&50qNmI-/&tD!#Jf"q(C1UEl@T6L!S*:Y@TON_)Rl(
%2Q`:1AC):A:)gFnaOp_97VpEQ5k8*[mVX7eWjbJoG)B0fPQqqV`9);-Qf3m84bH)"C;s'Xra-R[0c).oQ8>Un-G-fVc>ssI5`OLc
%D]P78F%.<"oK]"$dNU8k^?7`[1AcsDKOW7=:VL9cg[r@\Zm^uJZs!n!SY#N&q99"5;cAhL=>#?1EF\014DVR`1"HcEh8Xb?[jMmp
%Im:?qG/"]Zn-fSJb.n<><V8?=^-]XUc1^D0O:^3RiNN"Mj'FQOr@O<%-^o?;*g<ORF7ZiQ8_IXsLU4qqRun4kJJ,#'8SBb[T\=.N
%l@NF'T?m8lG')aBm2G4Afbj,T>r8r=^:*b7Q8JEcJA&^GfXt8@hNM70@4SY43-Cf=X78tuqsh3Z(52T(NQk"5dR@Ro"6Ep],LAXB
%):?ESp."jS^^Rb\g7`N,;H5k4>FeN'lq+5(P(!?Cj::C.SD!g"O'`l[!87Q@s1PMNf&0G^$&8IL14ZrY+FOTs3\`,G5l!t3YCr;m
%$B&NqV?Ie?S4.E+BGhBYQioT)+;QI1s8BM+-)$'o,2C916H&bJbcNh:"SEG\4jH-R6IiT2\"HVgdTStGr=SG:pKsY_qc6QRTMntZ
%$MIKJQ9f=0QR9#/+6AfrH]qtUIE-Om;nDl'KmpW<\]Z,sH6T:4I9/tD("NZ3Z]/!g98*S/I0:f!a.hjp9')a+85H5?GJi!,"<b>m
%D+k^lQ#96tp6f!=mQJp7YQQq[3'aVpIU/FFR(feK$h-^/)$,fJ@$RV31d]-[h+1R8pU3`/8SG^`,To#!CA?Ja+A'.<q_pbZ^6W<d
%6AMre98Y*3]/C3d;,SIOH@f)Tqk"tp[sno8*B*,0e&-Ae]onKGca'YN)bikU4sfFIV[RTmZEPPPd^sOIq"3!A*UDV\rAkYQq:?.o
%OT3/#s4;bml\\@t@"hC*]g"C?-!b>)4RNu[(uUgf)5H_8O\dgsoZOft_E%0Y/bh:2qrVCdbGoS1Pcs8Sd^&s9k[;KQm+J?Bf6Unj
%VLWl9.G\"i&0%u+SqK.'P1NtR>5C=/75_FZA#E'585!4KjGGP!MM-Mg:!][fP8K1o>*Vd^qIM3S!d5H!^c`6_g:[;b,#)pU&Q9!q
%DV*XbQ)9hY*skuYgUHOIg-id)rKk`A23;%85_G&c(.<M.LjDl8Z;[83<!Gq599NddpF-#>;Z<OgV3WUt@ERJ48p/I?ISksZ?9OE;
%&(kMfM015(kLaB6?.GuYasbQ2YmeG-l)LgVH%at-\a/ZITH7e213$M>_It>26R=%tR*`H9Y8B=?:bW8g:b%d(&32"7d3<ICO9n?#
%qX]k%>[g*(^nV4jZ;h6[F7-<7K\PeL+9XFi!HiBOg,ZQ9CEROQ/0qMBojj4`'c*8al)J9,'mC%JE[Z*'VV>5u\`&;G+/N_gDhM81
%]&;SPMf$J;9YD%!PZdub?2)JnpI"LCI`t^_!%?4uepM[uSTe0'Z/c7L>1r<9mBPKjd=qnrY[FJ&p*9_'lWX,$"P<65;sN$4mkNs9
%8?:ltNWkJ1HCj:f^uGuQaJ*(bc>\&md[MaB7T>Y0PE*^3]_O^1AtI+1&QN_1c-T@-eFI1IelVf[X,T*`P!JG'858CAZ@^W6K;OKf
%+br7%+Hj3=h&hZ@;ijSeUA<`DZL@.3mBYA*Ek#\s=qo,-&]!e/)E_TN9BSYc(AS!][Q),.A\G:j#jM]Hdq?^q$n!I!n]U'nDOYq>
%-i<O>f8l8_m>O,.\ikS5@iHlWfqrn;=-c/0M4JGBd:sRY'1'1irHO@]ECd'r7^7cjI$CZr0u/<8WLcG_5`AB/AJMC%JC$h=Aja*_
%[lY[%f'8R#6BWheN9S1qmKQWn[fja+^UjAmZ8U!BmO#75pFXRqjYTt)EX6;f.RV`EGnKD(ZSj&HW>e\KiRaB[5HCN&H+(l/XaB7o
%l(-6HETG#d,p-L:0('S:c,\"6_qr(1M=`sod*d&s7n`[/3CNb+PV^em/nCI0aO3!+[^$XZ8XU0&P$I5OVs7BQU#6f"Ht%^HIVuSR
%ea7-E8HYYdS'0J-6RJoemWHuU-.%8PEWd&fIE<bqFLbE3dMA`TKbbP/D*(%\XoN7&F'4r7[e:C^On'-2=jS;&>4T4>#5gg<ap4`*
%fF!@93j:AZOkkPhB%:9X*7\/9_*-9+:lAb@]@G!s)A,cWE0<*iS,0OqYiMb6I)!@nb3KGt%8fK4hT"G=@1p#WpOJa*Hc8f.:8"hF
%(S`Lp33NQu)u\eO1l;gCIMa819AOLNq&m@i>^f.-ZtEk/W$Y9]K@3h_"jW6abgYXSK%u+]C`lD^F8>RgmG"gUn/(XRlT_3VrJAOp
%(?6q%7!f%maGtpCdT7li:Kk.U0c%Zm*Lf:HC<O/"UO9^%+HH`o,n:p>97[-^1HuT$6B_ec90Rtok0$>Eb4XdOD59Ut%PdcXZVe:-
%'6?F8KemMa_Nn5oIf4jrMS/>JlW"#f.YL,g(PC@i=D[)[Gmk?PB;#(@QLl.7''AsnD"2ZVG'M**A6jdG9?eApSpS&C,CmbpOpOn5
%'4i\Tjb/Sl'Hf[HPPm9C.r/&S7l)cs6Ah_RXd*YRpbU/-L2=H#VF:*OFCn.o5ePm5?os*P-)8/(U-Tj+<DsiWeP`h<Z+=&c.R.5I
%MrI#2r[_7]P_iC.6b3m]Kgl+M#2P_Unddl]F?^a%;@b+;i5X?XlWI'#C6&%m$e-J(21@\KZr3?i6/7JR">BS('!.Laq9tc]o2BfK
%^YFV(_sB-dXbMD2>XZM%eNn<\[Hq/9^i$Y"QnMu,.9RG6d>A'QSiiudp[)F?]R:-BX!`sa@I[u02-UGnM6Xsu(2+3lUug5\*[]2+
%5h,V1mc?s;eN9[$FQo#<o^/Pm^Np%kqNRBbWbcEeM%kh0>)eP>"hNE*nP!$@=Q=/B(F6(2I"ZOB3Odh)PX1n@fuI]$_F,5[:#sBr
%?CNOq90R[LZ\!k4#^5F,Y6N%aa+piB30Oo1Ycb0T0-WIb]2T^@rO.).U+&@K;u8m"2l*$;9u#BVGOH0[BnN_U=hb$6W?]]rc^K'V
%rTQ^2V;BN:_i>rL;l?dMEq&]JbqhMIL&4Mj>G/k_N$5NVpB^Yn:@AE3D90bCpu)QC-'M<1XWW;i0"41#-1d_BC?gijFjhh>g(I64
%BepXQM@QOL_Xd[GWfkjo4m'/0;cDTuR$oBl^dGbniN&*+Jo$hiI1(&>K($A2"Mc#HPP:3`Jn[$1XfL)GH0*EeArtH>*!cL347a5K
%C=k#5)UhAj&BC8?*1C7R1-[=)p+U36d"OWX=1b*g&!8YJ$F3\BD=Qn6DInqWA72X9D3spl#S]H6H!)`mb/4$%]/o;g[I^4P)4SLP
%*WADY5e]RbFbJ/::57%EMl7ohgPnYE["5&4=g%I-I86sSpU_^XSimIC,R/D#[]beP3s@GR%MP5:Lu,Un7e;T]/")DNfdf9`Hi)`#
%0;0XCf*6uu6J2H/RWWEK0>=*fK'BXj]%a298>tB`2Vm))6'U"lX$g+7\1-ij\eb8j6@\:l@FdV9I/nsmr2N=BDRi$`+lY<#LKX.r
%O'*CGeD]4%&DqZATRHl2HU!plIuT54)0q@<:!Co_F3t"il-qZN"!&OL&uH:fdFXZ8][JamED>CB8b3E%%f48-F#r9Kf"FFfU`-@@
%0>9jYM-kU)VFR"CjH;C*%)q:#[%Y"ql:OOC*6u0HJCVVrkPXQkUcsr2]1O]?2gPuR[-O"HbmYu(o7J']g:_l1<(!S<W&g.jTJV)L
%%g7A;ETaTRQ]>o0+F_Se]enWDM3]Prd=KeXe*U)kBhfO6*GVRM4@P=qM1?]R86&r&Jcq38eN%gd&WiGp"5%Y'(`"R]Z\t,6hD0#3
%A6it1.:h^Id#a1+eo8pf-!/O]VH$o0iFUUO].`>E+u^3_Ru*R%U-Dh4R^u\um6[/qML&shWB.D[=,SioT03\oZ+)r269R-&*?S[6
%KU,cC<.OMj$g1D_@=tTP8h2.4$05`e.H1V&&*'Ua'nsa)YsGn(Ms>3HP*L,[5-"H_%RijAg=,Msj7AB,hoS%RQF.gH$YK]J/^)O*
%>aHOZ2>N*b\t>.2nsl;RR4MZiMH"/0IEY^!:XSmAa#K>Aocj/J8'5lQ,gWU2,_dX&c=bpK=FM7$\=P\77h@K3'W0>>'EF9)?bY<)
%6deje5*h(s9Rp!hq^njPr.j)M)JdKZTt`-7Iqb70<-74P%4gJN.nad['t7T%(Gda6]i(H!N47Jme*PcL#,$hnd\[7t]nh-NLRl6%
%-.HFce.L]e8uTSoZqU6/XgXE4bOVAeqA@FM<<tI!#S:!6;d.G7f>!"#gh[,IKGUtQF89;!VlA%s_/*P;N9Fj@%\cu?j_TCVm*]$J
%-F6VKT94^@]?FE0r5t]a@L2Rm:BST;MrDtmq8ZQ%4B)/+\j\$]Vp%%PWB`F3<@KK.MKQJVn*nQdNAAP#;Tg<glKP^cWiIV;b!e)%
%O3;mX>psuJ/.SPkO<-?OECelZCq%?MY'5<*i4n'-d!sh$X**VPr.Yk#Edo7hNnQkbYip]Un(6e-aRgBR&4K_kpe+3%Kr$Ej-sB&p
%'jfMj84F'[MC:-6!]K\lpm-K,BeGeM^_4NXoD+RLE^)r*H?o##H_>P/?CfgO>RX:a6LeJO2>G'E&6@>iLp<P'eP<gSCV`UDers`_
%:KL-om[p$Bmo.58f*I*uUApgbThn/4=\8-u\!cDYR,g\n\7/tXWpf!'nnL+E&+Z^rrGE/Vs']O@q8m?cr<Pt71%S<J8%%Z0p??ID
%.Bso@Mp.V_r_WNO.bi&m_BI6!\0or6eM*jgCR_nXIe/0X!tJ3rCBt;X/Dn%Dr#$l9s+,b:lh[2#U++MZqoL_q1>ENNqi*1We$'Ni
%YW:+k(s&jd/95t_SSp1Qd[j`qpFZ.A*;_^K@4?'pD$j#U*l^LB7\-drEKWqVmINo!I;;9i_:*l)eg)gf<0Xa(^8GsMgkXQ0XApG<
%b9[uR;3><h$(W3g:_-b#7s37[^M@K=]9Q)=*0\(R1"cS#W9-!tN]ack]r=h`m4\r1g:%J=nl%U!K_ppa:gp6"f0uD_j>5>,=iu=A
%lKW0-WQ8fne.$$d8I\*-OiblT]Q>[@qY[#cM:Wp2Q5-L:VQ]XJUIAS\\u[P;1LGc^V-Bb:6'#6ZZ(7(/`1V)2*Z/:Rl<(;N.U%.8
%mE8:#qobHZ6gbHa\T?kf?#u@mKWlo]G'[0F+jY!8dO%pLoj#9<e2R&@<E#W6nOC^fVP;7P%_3`W;i&N8BVjg2^K(uP3>`[D[Rbjh
%:)]3e<OlFG"/CrNeVtJ/.p%"*^C<6Ucq;%&;JZmp<HZcm@*U5^E&jG^B7FFn[VK;Nnmr/b/Zck9*P'e]_kB729?VAcLT0!@T`ec.
%Q.%T9-L[iiLD.F4d.*3sir3%TV\)UMA.m!maA9"/'r-$-3WoPKY%nrW<2o$iZ)]SnYo_.X/`VGOkc`>U:Q7\8;9^YnP^;UJ>t/DJ
%N"K!.9jpOTl/=Z&OXe?Gpq>rD<$HP/Cq=rO)cT-Bht&HG&j6^#XY/_BjOr94Xm&C1O6[-7oQqiperqVPO!eFfBm`Q-k^P@Ms7k\Z
%TN]^6cgQ97R(/ZnWhnR9c;&BNS"'YVJJ't%!*F6%.T\,Y*":AB1^Q,'cKs%SpE.C]?MjHdctq;(U4ea?92<e_nZ_3Fid!Vc-,,J,
%84B_L#>L>'I8&C-$lf\uVtkCJdOS-_HH*gJR8]gY8H7XanM34\#(]f=1/^Ab$>&/AgKni*p>hs:4^uOR*Cm/R+uZkY4YS]<)U+K6
%'%nVgW>p]3LZ8rj>m9g<H<`*$lc])o(<gA(6Bd.:9]5$JUk#%SOE_4J):%ENMd(DUAVXL)5:im8$n>/8Ot0in>j&&9O&VWm",?/e
%4%6$W8$8gdM)olT*r\pI"bn@lRQ_K]*eqhikLPKYqq"b%N;hh[<,!5H\M^\XRup@Mq5tg'%r=5uP.QBB]00-@HLoM9jp"b+bJ^0O
%Bth"]euY44Qmi*&g"tb_D%)fqO6K@q#mVgc'Rl4=,*9?K^Jf=gcWh-AqZTF17W*Kn8?f/Z8i%a7Et("ALiFqqN*1';&36:IMMP#X
%"=>d.b).3Tk-i=J*s$@1/J&`0ps:aB<%?\k6=W`YO.%FN[Z`83*PfL^;[\eX>8e/QM5WIP23?-`pQ+Le=&!!N1F*F#&A!Xi6_EQ3
%0A"Ao?][2\ps$!rYX_W,8>4ZX$ZuM`Md%bA+pk^pL+'ALHE?X'l"Y[c(/Jof6qLtah`Wn)0!9%d.jo&0L6e^a>:r`FRTaBRXE_'q
%Ok$d0OSO43l"4"'7Si[mDrr@DfF%;5Mt`GVOJhin3\/fbh<IJK9C&\:2ie)X\>lZs*#TnUAW,Hsq&hIE1Igf_hAMF1MKeK2I"pUK
%e;_>r4grZ'qc+]?P<=_p5J<UpfB$T<0VA/F;h1L3B)/Zh+Yuo#c1S]Z9V[2C.lmTpKY%"dLaO\>hi@]c;K?4U,>/)dg->?XH04R]
%\J)_S2Z1[BJ%Zj6?G<<j^Nk#Y5`JCcR2/\u$8DuCL(HUp,Rj'8R&"S\5O-FZm-Xl>Rt&ct\15-l^hZ:I,g45G\oU(rm6>T3j<F9j
%+U0VkDGDZD:Pu_^Jm<!633-h(oo1W]<RdR0XE$b>9m'2IKOq^lrZMmD9$nYm4DCZr_2;L7_OoB*+cC>+b1>-WniJWub\=W#Y.u2L
%1&L+FGYCLL7RV*bqWR9`#XS-=Gd3`<l.rMYC$cFk"k%VVdjc<03o3o2Po[jHo'OnIqBt.>'L@&TIlWNXVR4TP?%Z">r+;!D]eEiY
%GI,s4%t2fA'o:^D`N)Fe#HMH[/&u@@&D3*Ho;DjACH]#(KRn/LkC"me84W;\T(8&E&^&=d;!@)";B<DmaX@N*g4M99<#SaSFmFai
%l%gr%(^#sSiOhKg?dAnr+0[$@6Vf_Qia!e(bWb2t7MY'0Xk&1gmO#!;4MLaS.KB6Mb(K0-4FVA)+M!!M`g0iQGE4ACKrI??[FC9R
%2M4`:e61Y9aIIV<k(L-[^?i`1UM-jeqkY%O/8/Mtoc?qib/2U<97G[bgYcl%(W9BDqPV*W/p_C>Yr<sjO?j]bN/2\VOshG#?*91a
%!#3proaN@`#8ERP*%?Xc!#-XVj<=Ku<R>[=U]4qOB34OQC5,9TOr+APlfs%$Lqb=aMi5%YKqDfo>'6lTK)l6Z6,#nU&ee)JL&j?#
%Xp]`3%O;b8U@t^6%O3:+X^:6,rcs17U+,e@R8=#&IWE]JIPPYBXkuirksZKbZQr!+C_q?$SKd;RM-S!;0d[Pm#Ul#f&]gNf?)LN0
%/7#O0>$:3I<]N9n&f&:@T:GY*p?hp^*Oe(k-n$mT]I.D.>["N^):s1'"#`^#MqPX1Zt8Dl.HedL65V.^Q_90TWO<>0UnZK3POj8#
%pS=kCXPdHMmpFYrJY#nlb.<1,s0u9bgt;MicPJ$Zpke_f[4^i=mAjpFIK"RoHnV4\G#]f0p$[?8o%it7.K<cT\gj<_U;-_jPlL3d
%i."8SOsu:$4"22BDC/mq-"(&@/<^ZqR3NMFM6_!od'-Y&`2mDc=\ZQ/Q)_nq-pntR`'=\CpWun$]ZX;K#Z!0umfK/>,:lu4$p/hc
%_YS/f^bJ?)N%@5pj-WIhb7st#E\UtNnP"5.!>gi!<gP8^$#'T;]I<ro)GB5A2(F%M]Os_Xr&Hf]U2E18kLA/IW0q\/<\/Ch/i&U-
%->If!1ms1(8+c.e6`Ft($erLK>[3>YGp?;To#GeC-CX80>cd4kBWGY8;]^jQ3QM;_/?9L9c7t!Tc8YX/9PY.0HTZDQc(<QcVM.I9
%Ti2%NR?ut18GbU1[(RO\iA"R]`ITXs],R!7oUcM?c3g"MoXpT/PQFtf/#A1Ar=1mf:6CnKDKSV_dMf'>j:mTgRm^k7!$XrA$96>A
%="J\JSR[gdFg6R2\UR_BSSFb>'0^Pe**ZtW/NWFM@mTOZ7812-[GebkrFU0P!]KFXnMV2g"i]o8A#q-I2q3Jk1e<?OQ/W(!Z\MAJ
%W\@AaH+%"[QAKA!^h%!N>if4`/O>\AaZ]=h!M\0e4?[m8_.pX#Wb!qn-9ld^!-Ck?:FD@A9WO\,+!'YLVH_53>7S>9TJ.FHE?V7m
%9mGRAT@ZW.a'[XL7WF"DS)$SqomM(VX4g^XQrp1oqQQ6!RH)38+P(!WbY0h4hUod/V@fg_hX*pYLAQ'8'gCte]DWb)=E-u`pS``f
%6u8._!3>+l!\!Gm'q-%d*]u@4h8KIQ:%?XVa?/_MWcPXri(e(XR'^S.gRe7aKt5"F21O6[qSjTrAFmN9,_Ns+'8!^S,_O0=B"cOX
%<6j]P@b*VB8`+*NC")0Pl2YZJqR$_p`\n;m"l^/pQPQTDOY\`/^Xe7@-F5TRU0DrEjk_WRl.BL]0sC<">Sd=7A4X)J$#FuDCu=t=
%%\k?\&=E2*K?KE!P@X=Hei@M`iLIP#P,!K*HK6Z:N-.9Kjs-(*.\Rs^nOTM!J(;k5h2:SaCi)TekFl%=-)tX![K-]5<Yhkjnf+TQ
%2j"5H1d*a_&):p/hZXA\1N+%^O)7RPs!>FG]ssn4=J"AB@cWX["i"*@aY8^)B;V/+LNFe4]Z;:t5n_J)Q-+?k418uENSNBPpTr@C
%SodMl$q_h"Z7\tje[HmdqY1]0)nsqs6,%h]c:5uEJ!:ull1!0jU!m;,JZ'Ac']OqYYsi(7J&!KE?i$.<[!7$rO#ZB654IEtF@fYD
%#R@',AjOW#WuF3?(*=H=qj>;mQ,Y[Fhiec")-YmUgg9QFBuXAlP#Y@Th)6H&P#Y!:MZl10-h:EqaGe=d+@Jm3jjnkm!_X2!lA"?u
%<JdQ=lF;_:?oJX32\fJB9Q4OLfQ<f.H<g4@AmbGk7^e_kE;S]po`Q;V-=`X,!lEW7oc0*JU<F2M#!t*SYGj#*hh?Ol0!ldITAW,/
%'<=W(CVp]`\jC,#e_4tOq!Nt"0Jq6heX]2r66sh?o2a(_RL5A@G%9X-4[@V(U2.S6iX^.B5u-9bs$8EAofnq;7#CA<?u1.$<p;E1
%W&Fa$<]]`6(7e-%8'*sAdDk.Kbbnm-$Lo14gMR?Km590oJtfZc'0T&*4Gdfe5OK*ZUI\.QADs16*I)CAeN+e4[T(:WaOi[2XBW>U
%CqLG2l-j`*0Sj^#$./6P8FkXrdL"]h;3U%e!e`5DPuR&m@DBuGoLHpPX4qg*cqtTp.IN%uhR\(TRfBUe`hWhnrH$e*Ui/-tmY2>#
%+JP"=Z,>N9f`=@57]h/G0PQL[#*44[mo&2$h$0DDWaX5sAm4nAUElA%23/VLJTLAF6^GLJ'3<PYbm/Ho8I8i1/`*MFW2?$*8EI,u
%R1-'lZ+hPG34RP%")03G*(&.Ocs$BWLi&J?0P49Z<9Q:ORiO^K#DT.$g:cDbI<cEm@=g2V@ZH.Ba(D*D*5'-G/A7VON1UuiCm?34
%a1Lb9RpcU\H63ofK"1$m3&\b!X@H4uOH"'!GLpD$K.(ACa_=1S``;'X>bc3<)kmmonn[Dc*fEe$N/!g@_qRQI-X6&A*q+);?=LXP
%/]eO>UT2)^d]S>uH-D>rF?5c^=CG;jiTEjgR]O\Z20%;Ca;.]d_tV-[#V2FEfGpbBe;pNeYV<736-c*<7G&O.n<gPT6``:N'UA"'
%T'd1kKspD:Q84*Vg$!_QGGED5@tBPOZh7;hd&HGWneul-0B?fiX-'@njGpN!THe&77k@;ZrS^$o&&,k9pIZp8)^D\_&Da/2TEQEo
%dMqoMD0qmA^jo`Ck;Z8IQ@PsJ!7')f7siOR+7+jD#>_-sA"YYTqAEE_bePhXHtS:]l:Bl]5EAmSpQi!ZaO4Y@6R-7":EHa%-8jlQ
%H?<JP`O.2dF0I/O'[EU?a`:H^q^PF]Vk;(CoQ[t=G9E%#H!7u<bDpN]4-*WIFpsZtL_-^7NU4!bKejtf=*5Nam,6!MZiWj<JR!k8
%1[A@XD,$3kr*a<<Xlj2h]`icVQfF'K\H`U%S@kDdPA9Ef@=aG-\8,D'4rd-gW+e=)&8\Fj?'*h#d]*:]hgE%O4;T_ZZq1@.d!6et
%D>^/#Zg+[`532tabI4E7Y?"u'V!"j1dO&ae(2JY8K;E(W+j\O*(244F(3((r)b=9Kf_^:`+$o`-jM_6onhb['S>=/0KE[%X_AKZ=
%'YW(;6_ShkI4RK/Elr+%-u?ZYRl,_U7oHXiOtB/O#TSMl/ah.ME[#o+17l4s8iS-g6EPl`lbecmA1=iZ?Z2ik7F5`B-TehKe"Yr(
%G"B!0aIRkQ4=f+d"[!suCDebfWa=:qN83/NM<N2YIYBB(le7\8jQ9U'E(PjXSG/D2\0\eS5^\%M8#a3[q3-4HRTE-'fMD:O*O:aC
%B"O@+;(!&Viips/5qt-b#4ddW8*HJ+3+Zbc+7Dn;GtTVi)/AsSBN^i=b5g3P44fsqJ^1+a&+RE+BCZX@"3*2YK;(P)`r+W(=lr^b
%e1MVb6JRh>H+uB%2Z898%g+SAN9F9FY:H:bd/[3?GoE'G9\DjToG]N6C!%[(+2QgWl1rsT&^TdO\!<XU9MkTr^U@@2%LWk<>A6(M
%L[E3-]1#rI6gg<F1a`6D]olq'6EXZAZ`51k-nLFb;VIhn82m05dt6kV%K/[I0!&;_Hiao>,l?VSR4,VENj2[bE5BfZ%.B11Jh=pe
%2kP:7],AF/+\&?4:u,*6SB"U&V5.0\QbIqDeaGZ<2J*j_dW^]=Q=P6/\Kg',57r[I^,(`gj1Q-IWsp8Z5hm\dXX$lg'PKY?i^$>g
%H=)7cDO&R`h]W",PM<HqR$=rDWgj]jg$b!V]M6YmWt\U6k%\S;FBBS<mjWlh.gg)*JXT3cnZbJ'"PebKIlf`=jm/,cM)W#dNp9m>
%=AKc0SPD*965u[j"=Rr=:4)ljrpd6(/:V?sfF\4.W;?9QSb/<GA%E7`b#[;P7dP>.k1qYR*9o?HV(O4p*?c<bB'<?+R<3]njWm;>
%as)3]p"]W^WSY=2Vb5:i/!37[TUAgQ[9M](9%Tn?bDFYd&+3X3oQEY7X/k!'gg&qh2u0i(1fcFPB"cf#Xd^SaqVG5$*joNLQBA0L
%Nt[eJG&I+YR)&W.Tc1+@7f2EKgVTO@<n@d"dXS6(k%<[&(450_;A(P9p]o/?YDUUG?NiP@>Pk:\bVRJ(m?6ie+!M_mZr>2?2nJA'
%hV^Sd'qch@-%C,I]oRfp_;_A5G&a<J%5Y[$<0(QWWgHllF&MZYdI\pR2Um5Eg8d$31i=]r.l8pM[rO^NFb_.Ok,Lr,USU@90fP#J
%gsQ?B)qLg+F62J/=uYO\d?:M$0@eG6c?55D`QaZI_`t"BXd`99)4WP7f0/F,/KHQA[mHNj2)7%BRQp'"h0(!%^HX#iR[C3'>V).)
%^H;(M&Xa=C<Jte\-^`]?Cg'*RA>hY^baI)(BEG=S<sP;7R)Q&a6$KQA!t3oc,cR;FN=G0.W!+TrEDQnnj",m;:\?3\Mg[D%5?o7G
%4hST7>+;1\f]Ers$eZFe0Q/dh3,VO-,s<o6G)$1AGqP4rI,)PF+4I\`a_31(oft9$"on"@l;Rr1^bo5<pq'\t!uiB4'm@-aYN"9.
%29-?jU3%*=BM::j6lF_BaRT?K^?$M@DNE.TAV81Q&rg.>5BtLo+ib0Kc`N4UbHosg2j,GY%_S71At1.*,EcjnW6ZIrYpN$Yj*.bU
%@=Oj6W_6+/>4!u8+4OYhij%Qkd2@8%U'0-BQf,oPM:CA;cBm,9j(k*#-&-_XqEr1h.^I-^[iO@em7.jXTptZL[,:j%9LX<;_"N-5
%pkED;.+(3F#Zc=s!G,L*L%kqh@$;_o'8X[O&SO$.SV,,X\JniKF/>o2<0a?7_TV`h!$TY"Ne;3jOWhIR+%i_f-cn_MopD\DaPkbD
%(^WHPEstl6mGSggfMEIBLIT<X<^]YN7jk7S@;nsl@J6m*5,1mr]+q5>'JYq-q/;>Za%90!:nT_,[\k;[A!CcXHO.(;\.^<CV#LKL
%;ho]V+]Xt%3s,ot)ab_B;<3LTIu#B_=\sABI+fYq$Bp9Y7R0CBA1ic,p1[B*>("$5$dF'!/26_5$PJs9)G2kLRN"$^6elf*539gj
%/Ys`1=t5]-cMQX%J\neD2NG(ZfpQnMM];QQVHrUM=0bgu/:olpLbP\]2\dG>:u)T8R]=MEOj:%C==lJ1#[R"-^7L(:kD/?\L3SH`
%9X,,p_iDj5q`q6r@UTdX&=.I]=fD_,g\/>g5t61m_@Qh25mQt3'CRqA/`O37C0baa;dHR!'.K)V+1d5AF=XtK]bT=J*=>EoTppG7
%b*?c_qRBG$f$K42[;)Q8Nm:,u<Eda"ogIe6]pn/YBX*b7k+]gI5r+th,;Y2,W3?3Aa1\U]dR=$2Y5b+9B#:m5,>n6AcuEVD?rh,7
%@Iu)#4t!4LI1U!A>VTBVfKt1NXBrOX?1Sf=:7uKa?ZnrQ9"CGU8JC7?3+(Vu=4XFqf)nGHDTTQlU;s#^OH$81.q`J+<F+F0,eS,.
%3m9O*IYn7OrL"@`XroN5<s1]rQ-Z<95Scm+l6t3&P<X=`^YB*V,cgCQrn]g=5dJoC"`!i%-:j+KD]X+C!=so>@PZMX[X+rZ;%^Lb
%H][0Rao%3FLJ!E:TLm%i[8;^$fF4ON=@@aHliP8%]PA#-F=YceTl%6Ah55dZR7Lc0=C?C&Pi],!!6K>VMc3d9_HTE.id#?1guS:i
%iW]QW*khJfP[1!B;0BuQ\.YLbgVBO=UR_ti'>'l%&9]u8dD=Og^4LR7M9JfB("6,?QgA.F;kW"lpaF*LP_4GUH@?kC+KPndq*1JS
%++ZAqWSR^F+/<Fj`ZF)D73:a8Cd%2r!:YK,f;qn'@s$>HEL>]_mUfE+.#7(H/-;n2-sp"SG3BsEHsYK:7[f3/7;JU[Xp5*&M9d"9
%hZZXP)phbW%dE(=Q=]uc-<3!HXLUIB"QbQ)EE1$a\tJ!^:!Tj)T<S'U=>eSu*?P=aCE?-cB79TtC&a<b6]f;O$u3bh]-GqNmO835
%Z.E)H$.ac5M!/M8d3K?[m@0lnj]8thaMiS(<j/#*MIJe1ks'-&e1ZJSENHjT0;`4$F'3p^_C$f2et!MOFo^3cTP)pqAaGoLp=;J!
%Rq;e7plO^c!54R#EXPB6:7!E?1`*j%?&;L)&LjI1($i4llH82oedk_kktdVM]n[9m,45!s?4XqST:I`TW?\6mAqa2WeKCb:J7JQQ
%6PMokE;Z[7c*bSDf6#X-E78@g1*i&NV#kcGo(V=n9c%D^hWLui*S7<jYQt<)RVGiBlM1BnB[jRV$7F/Ybg53O:r-nKa@8(,>C)t*
%Q=si+R\JFu[oG08V1bp,=b3Z-Judb2jXR+uq!j)T,GP/M]b:;"Gu?1W+K?<b%?*pR:KdG!`JUS[=3l!]bS+[UoefIMEa6jj;'B#"
%EPa:DDa&E#qM2,i5VA6D414>Vq`ZH8^32i],=rug`3EN'T@EV.4BYp\6t[lnNKc2f+";Qr;2(2$l")lV;@L%)FlYIC.ecc?Z2<C"
%aeHB0/g_,d%@J>+WBV[oMM@2`_1r*Wo&',`U*,Tk=iW+of24^=[!eeIhPetEkW&0s&%ZA1oZ&0So^nBeW89Q#`f3P#76L3Yq9kqW
%HBI=+NKoIYI%@-UL?]dOV=\[VbqI[)lK[h>3IYm,_c(!&<3fMkAN9jEiaN$b7t>It5`,B11_-I[F;['A'ZNYk&IPI,)L<%NU(>5J
%:H`DWaAqIPkPaMe@;GFgU%A3E@_Fs=.7?Acgr4RLl`>!6>Pe=kgL4hRmTd`YI?dmg>T`(Z<c9'gn.&Hsp-L6Eb;hC9kIcC[lpQ?u
%f]am1QE&U-;WZaGh\@iY/ue*'rl*S-ljqHjUb=,!#V2ND`,=U$lI'.Oaq_T!Z;2cKLQ:.]&OE,Icr"d?Hj@g8qe?MjeNSlV+]lk0
%ZPp;:o*%m=frDNBbA'n;n]dke@l7B4JW$P91OqXEgs"+n=7a*o&Y[Aa.qG(Pr/G'accOOM6-q7cnhh*dc)uY?^[FMnI,2bYF`%"=
%2&gMFKX@A4C:1]^4Yu;_o1Wf3D=s3Da?2PJWn]2rM$f265,3C4S9aN:hq^Zc>e+-:(7>tcekjFuc-57<AO]5bh/CT*T1n?RIkXAh
%a7?jc6+++qQMtW7F8?uX;aJ$-c<&[CkCG6@MQZfmrLhKZA)Yf)jKVB.%1LeV#Tl;K7DtXdjp\NnT>[0J]bi3N*Kaji$iIQD'_cbD
%\OtHq$k-:jA.H[#U0EO6IF/@Z6%@E;5HFEWn$29UBHVoef?bH3_e0JRPIbUh(i"og5%4qle>$`)/1IGp^d.,AekF\nf7)%Le^_?/
%IYr$]bU[Bb/(jXpHN&ai'0ocH,QLqO:?23b5tRKn!WU"Y^@*3XZCN:2O2]HuEfX,DI4b`$$fj8=B3+1Bbu*lt-YND>]o`Q$=k[d`
%ml2uaK"IeEmicZ;-Np25<Ndpl]V;UH?o"O7DAh5>`$_>/^i?`J*dn<gMhU=n5mV]^$Nhd#D-F&AWeAL\!+tb8m(RQ)i8(`/Nd@='
%\c#G"=>R;!VH"t$FQnCNIB`-IW7mu#4LY!3O\DsI]NCedL<>P?mj.73kcn8=6g9#<g=\,UpRhiE7;uIV;MQH)<eBT!fp7a<qWt=&
%6tY3H=J4b_&#D`>q!%bT"*:,<N%C,ZCKopuTZ<FS:87J+`8FXdU?OQheo#hFd>Re;\2o1qCpp5O7Am4LUE6;lV;T?8>`?l"'i<;N
%60+JZVZJ>KCHE$K=WRnPOG6c-*uN==Q@[!I%-`f?(85M@^Oq<;9AWQR)E4AX/ee@76!_HX"BE-hAc]Q'M5Int3]:PeFCU9KLTap@
%I'(Z%Y0B;^5C(>b?E.O<d!qt/oRH`EFGltI=_mk.dV(?3AD-9A3(s]I3A+Z.Lq;@lc)M=qUdJ0L1i[LGA:+(<.QQ9kN"N6WlPo_L
%]Lb2?$F<+SR-F'#c'J0&0VX'-i.'ac1m![i:mXhtG4gQn?-hGDV5de8Kp.h+DfrbmGSq9'm+,O0Q,tl:"fl*=WK+o?MG9W+024D4
%,.TbtSLqlgF9Gc1,p!dQ0O\8jY!9JVJ)\"<_,n-3OA8&E^:PZC9d0Up.2#\1Xn1P:rm51',P$k6e?MV+O_0:gTGd'5@U<^?An'%]
%cMN[Xh+!j@qsfUDq;#*h/g@5P;)Jp%ZE1JokhFFupcaL,03(HtVDbKPA!gk<bJQA!)u[m(s(Cfg#7QB>@@KJ+;R4bN\,s?%[8Dq?
%5#2dp7JDRgODS^3f@"Q%]nTMiKjbp5k;Nq7MQ3pb!8Zpc+J/<4nubB=oEh-Zl2g`,QF(qGO)8$Cee?'PmMG5Ne^5<'.1Bob87FpY
%9gNdd.4lb!7m"QrFOhYIA/&CN"aR(u$_dnJ,7gd0I_rg,FZ'GmS,CsLc?r85:k+M[6Y5E75;bnjI/BXAJdQm75u%`G7b6a(o0\;!
%9#338;/NH`JJVS?*GgfUQO4%Nq4UMXabqie],sVWT&bDugC#Gb0oAN8T"*+o.g$=]PLKNB,0[LNk&2FbN];7S98pjWN=A5Dq;B#)
%B`)<HYFZ#0?qLUHEB$o!^>+=?`fS:6mYQ:K.)c9[nDe#FJ.1^rCYE:#<U[1,j.9LMd>L1"Z;udODB4/>Aj7,.G0u2H9b,@S1!-:l
%$g%+XK%uRr$1,,I8[1,fMsUWq\NPMl"0o95cT6g=W?Kk+HPF1PpXDZ->L*&;o/=p37-_bWTY]6`chpgBp%'JZqtH6lD`WQ6nXK$c
%%_e)Eo<Cd5B1WR#8`<fd<$6<W#?g!MfGjWn0b%MmNtL&0q:"_gbko."VX`RDn:1C,5A\kHId*d(`Tb;9St7V8fDh1?.o%A;%q3Y+
%B0G]$W1#[_9hM8N/=J?GI*WEliYNF8lA%^0(hl-m&Y_+0J,qQR^e(9r`X"`.&K.+B,"`X*UHfV-6:3jLA6i%]3+M`2Z<lbc\'Qe5
%_Rr,+LCPkU'_:1o>lLpN;#XO[X!aejN?coLE'Z<A7D5J6W^!0l'f7^U!O_^4%EsHBU?LoP;6fH1"FfI!`epCa9_#VLKJ#PGK6iXm
%0&*ObO&^oq>\OW]ko2Z>/-Pm"7>HN=l<F#(H!"kHlNp.WfHF?K6o#,&Qbj5gST8UV7F;<7cVhDH2@+L%8l&\,-E*th&A*f!V83L-
%qC@t0J`d0$;P(T4A`)$M1nueuB]a>B>D&.d4SV+*s.q0k7K70:7XQk6Lq]+99lK"^SGR5D#A69i`q9.J63148&j>hr;HEba;8_jl
%oQB$tJrt;?59!K!"6ojq*RUlD['H29nktmk2*&Fa1$^n%.0jmVWB0+PIK6jJHBIL+7q7P$S`&mE,"k5)'J"KY's.\6fCDHQ11/Uk
%$U@QrZ/rSH'dm'Z6]tF3k9flJnjrRB6ZbLt;EE_ar2ESl`G%TU2pDhGDg:1/CC5hZf-?^,`=0.1SJHG*>*V1':iJc<!q0%E"IX+S
%(q:#TV267IW%="Z*I."SgFum!VGBt`P?)P@l;&H\RZN?1Q:I7`e^o/PH^%-nB.]^UqC[<%%t04Dh3>=P$<>BpEJeT5`t.(i0UeO7
%MtL=C,,TJg85Li<88B0d#tgHIa0QmOO/paj-p,W'iI,XXP&Z!9IBF,;?j5k_g2o]C/PF&JXemei[WDM=f?$V5M1)e<X,Ajs_rQ*\
%q</ag2B[m5go9A!KkZ[fG^`O@j=la(OT>$8hn-b9DH=LiWNiXbRK.<V@d^LI=<#-Hd>V@m"SF(aEq^"C62X@@\4JX!">lP9Z!.V.
%L1!%eP$J1t-#!]/ZNC05d^A3!#&%QtW*7.U'"n9[O.ID3"W$8i:N$(&ok#LjHK/hrRP4`1A5ps^/K>*AoV,@8&a_d4@@U]/)#@uj
%s#Yqr03\;L$srZpaQClST]kiR,de)bpTp<"[%78IS%L*)f*?KN3t/,/OXil`5s#!mM3Cnm'%8np0fpKS'P9N650M+Z49+UAdbcuK
%O>spC*5dC'+n_(%EVb(sFBPt6lI!=ML',2L9\=^?gX2in/N5!=/&!QkA\:Y?kNO2r9$.>BTigoLBeUe;I2EP\\ZS;d;\Gu<!19H:
%R!=]SO0kN-1sM)R=6)'L!+ccIJP2)%"[=I3!Qf7&=Ni*;71=X)Ul8pB(m-il7N,j"+cCLjc)MigMP7D;)529Pc<$5c][po`^OKj`
%'eUQZkNY[qO9$#E[]:G3R>Na+KOQ8/>P;$QJ`soESk-t,(WJs+jfV)aSR2H.-V.S1eB+f33^Fm@)W=:3aU4"N6p(Rr&NtJ<pJE4N
%7GMg'cZ5i7g2rTQ#^]&7KWY^aQjsdLpm^9Z-?9C,^$2SYB(^e[&>]R_3#3cZJAoE0c7Gr+;H+j*Oi@Q?eFL;/Re2X0=LYG3,TIgo
%7_pVgNe#]Obs"36fR>];*:]<Eqf77J02F04WD8S+M^>Y#9-S8XGfVc;.t-7q[4#:s,_)LpYO<,;@"tMV$QdG?TWg-USg[>eR@rlO
%&?OYJn54m5HmB+=JE"a&6aW4KLQjqj18K!^+>\Q=X`?Caf1'Th3I[5g<(8MV8s:S3lY*2*pHAht.=A,["h^2<@c&HhjJIcjF]()k
%ke['okWt5AofRHZpqBS;X32$%DJ+B<k9=LMS,rWS/kO6sSZZg%E(Sk@F;n_FBn#%qp/UM1nP2d3<3lE:SI$,B:1=L3BV\%4N&.L)
%b&pF1>9&a34,Yf4?6qp\hJ%4Zbgt4'#P\+7^2-Zbo]sIIm?7uWYHYtUjt,9\l4s#qOQ=MuX0srK'2coh,>&L>c"uc8p.-]l;cK%h
%r5)js#snp!U!r3NkcsSG?k#;c(:0IO<$jL76NXL[9.:4>hO'E54ds+cHDfB62ieGY>YR+So`?[5^aT;boP7EmC@tjpj7F9GDImgV
%NE,Kl!K/>L0F=,?j*(Y7X1;tH:p0,u[tc9l4]W%[Vg+5&Zu/L$bi&2#4PL;d!bZ!MFFCO58rYcp^>KI3gekC1je9YXn/?*u4SGu@
%68$$6,:8ibP7BRE)[s%QqKCgQ#f'7/8lBoHTISTYJ?OLcGU?(AMsF?Cgq^QH,,:D7+)Bm,%T;brl6sd[`)\D-LL(KCNE2[;R/V(b
%4In?e@QLD.noT8`74d]tZr7Z&WYoI8h,9h\hHN%Prqr5PZ^\hH..mqiTm1Q%#1.Xg9IW-&/JF;M=#MA7.kGgamBFsM;oMYh"TmM%
%I.XgC6Q*i57B"n-'*p=m6g=IuCa4*IQRaD-BS`nV]l1'L$"2?Fmbqn"U7hp5ZnG'qauZ7(ga!"#c5DA*,-\&0?+YkEn!k/MW]KO8
%$3gd+^f3:%H]n;kW%\pDB6K=o`8q>/Z\&^po>]5*;&A-17bAWf;K:5sHF=U$V(0mqI]_Dq;j-Be[f#AY.qod$$_T85c!m.&bHl\?
%2U<_Xm^jBW0:7Tp'$KIq7L4eA'=9)c$'IPlMmg&t\G298LtBO@6b&t2$TtP*:dp1-i)$?ON4(9>5QI'QEr"XS6P.Bpd_fYP-tifm
%35bdghB9>iVgJ>[ZMHKnI@p4OeQ<EsLF(rN)*sP^3D/A;AC)0Xj/(0c"N5_anboO2eW0SfUp7%=n<ibi!DYcf0jW]/6;C"`q**o9
%7$%OREG+ds+rqrrR<R=\84.ODn+)U)X$.Ze1fUkV,dY3Ud/RW4.t&gTrnBU8%mS+L$K8//\9o$:"cLY"OUCQU[19RaS!XlUZq$7,
%W>;70OK:i=PU/hjCPAbq]BPuoZQurmHsiY@6<ePIgP;9HCkaHc&Ja\j(`S?0V@6t(ctl)l,DM7RgRQk@\rPcHMiU6X#4tT.)(rW9
%m-SZ&3NSUZ?#QGL;O"c,`uXa0/KT%`8WlkR0m(03l4rDcT4X_brAY<[8B9n?=AT=\qif&ZX7oSOV)R;jTn#_f!J#pQi^q\g#dqg+
%PqoCE*)^eH@'p(UrCND)1P1+l(RqilkL4>LH#M+("Jk^raWOE#JkHBkdq'I<,pVT@pD3L#^'SlaF>4C3Ji'NUaZ%47.J07"F0UEu
%ro$0FQ&4c6dur2@2YfNDJ7:,;'-e5F0_D$&'@tOfBKtc9<FrdO]Vhm]P7G0[IP_hH;oJ_Bi[J<^MCS,.l]SJt)&V=<$_Vc-f"$2p
%/@B[En\r.`?_dIqgZ)$c9fDeM8`>UpKUSl%QR-Rt/J*n[AHWLf[d&H*9M79QR%E0:CWN<`fc=-=QGN^iX<"W>(o%b,T2^r.H%2Ku
%MrkS0Z]khC1ucqXE@eC_YL?HLm`]mio@6nmnM%?J7h!,DS4:ZAT0926rGB+?Fd&.-jSW<3(`WIMm]:?.&q3]eeJ>+!$Jkf;*^Yi4
%lbt4GBS)-0O/&KTG6;%1p)N$&&"`ntkosaB#9SFWm4WBQ3a_>7rHkanFAErR8B=b7W&cJ`]sP1ZCWuqt68<@X)<2+H^GH*OA'RTd
%o;n6DJ95>Z'(YV/4%#,[#%[?`%=5RQE"ViKahl%.ND.('jcM**3`7Es2M?F1QOi#fdq.0;1=A^Y8`aKq_FT[4j\\R?`M1`(V=OMB
%r7UZid&1c+=.KtL>=MPqX^jHk]9rgJifrL0h.nd1c*U8PD]X,]4A)oZjhCY(9]^(E,b?QaU<Y%A/)-[Nh1AgPC_:!=Tj<q.nb'H=
%,D#*+g*SC7d>.Vgp!p$u"eLa_XG18V_pB]:10RrUK`gdI4b?4.iri2(^WN=*j\+;l8W&XG:a6"V026A"/4,qB"P)^'?MUBI<GC:e
%i<.iYdX,*hWPA>"U@.M'^0a'"fjB4F>A0c-Riae@BRpM["B=BGDD@RGk3;pr_/f44O++Vg1!Yb"Y"^hURgLf&ABD.pZ.>@%>V+?h
%^HMQWfR&h!Q>7)Y1ss3;\#$'L_[tT5P"DpL2:UCG*uV[Ye/4H2J.b^N0ejqFLE[@kK+s`beN<*.^iE.qQ-NeAc<t&%!fE,N1,M5@
%H@]pBbu=Q&6B5:jFoR\Z\Dh/1]>=e>_.[s-PoOg[XtrdF@[b-Yplj>$5J&oSd'ftf<H`Y&`(,`=ZmZT^)+<eg-ld8=5^(F0hKClh
%7Q+5rL`'JZQ4eeN'Z_Agk&MMb,:mhJmEH?acC@HJ>LZ3_L8#)N'&9*Y/6VjBKu,NB5u^kG-D(+c0djN!L*V$pSdC*-DKS.G>,#7A
%D_*Sb]PJl21<;!*6b7LgXe>XSdpr7I:(05OH'd[Nq^=btaUM9+CScH$:tO(*7s0@.K1'itr;fD\m@0Rn;Gq4l%.fHq.p7?Zo3-$F
%Cjl/;('u?!V&fH!X.]HFTiLUVF&PhQ;u3Tfn\od;6ld#.T3UkMnlW,\GOn1jPFeNt'kf1M^Bp9u=&e!eOE.d%%F>6()B7_tb@e11
%ZIC9ECC,)J4V:[kWM:3=FBJu!9j2$%ZVs>-g0L.H!cmWoCg30_SWPaoEGY+3>S##1'a/3Br)G%P/-mREFla0kO7JcBqQ`iU?L&P3
%bF>Xq:I2tT^U>>u6K+e(.6sT^>Q'J"Fsqq`W.dO89$U_7+7V!kUaG"UcgSD_J[f[+,2r#66$]n#-)1^%YdVbHQSLP],OFG1Lgt[8
%UT:t"5ZY'ib7LA2+/]t:ZL/uG;uK7C;SbV3Fh&a:X$Jt&-G/P<LE0$1TYFdqY8:Pl2J^n$o=q$^iO:1RbkiZo?9tT-K;M/*,^c3.
%@Kt2C'!7A,q4nLN]][Xs3MW`)>++@jfd]fXqs3KqrH8Luhpq7@)(`_3h&jW=Bhb\DJ%7Ea6TW:FdRH<io:+&r-m;$*Hn4TugGs.5
%P1W>=i#aOD!A8^=<V4b@"^t1pQ]L`(]W4mm;OW;@+t+Gh>_73(7'oF'KRgem!uog"XqKp`a';g%eG5RHF[YN`mMAK1'GG*C5'gT=
%F&=#G1OMfn9]r1kF&JXtX>6#)[uX_@n>9\ro>C7dE!,(hB.@U"'[1$e^n5bn/6TLm+/8_B95G`4]<!&9GfSbf,gMKn\Yqs4P%j?c
%P$O\VF^oKmQ7oa#hQsOm/p59JM3''&*[',XRLQR_noY\G7fSWFT,nB*+2D9PUBJsfb"*NGMn73'3#tBTStB&%"sh=a,8fi*F4cs,
%ADM_X^2ZTudo^BcUAZo1s7k\'5[sCms6gQq.cna:\#S.'Q)3=)lTt:H<?jMX9BhDD'POo;f';/*3A.[VT'O0Z6W'D-R4!<Llu;"[
%Uh:U`APfHG.c<I@qe#;QYnVsVGPBk`qGK\4b+>i:`NWL'JghZBqEiV)J$P$7IP!n.F+_KbO6d@Upb2)'>CA0Y3dr]ePk:gWfK"jj
%<G)Gs$#c83Y@p$p5,akn,F1N)gJl</QS*9?FB^r57=XB:0B+'UmF877KC0=&^lVjqBt&E#/%@P@Cfe<*rGQ5&h/B&NmNW`il+TmC
%V.F[JGN"7ce^p2qI#`&X^T"7W>:W/#7gca[Ceo37hBBL[^=$B/BN,N!B]h>1**IC'EeJqPoC&-+F/?Pu*+)]u3bcC!e2'+#kt(t*
%XD9;;n2Q9d*uQ(+q,DAW1uHXBqZh"r/OkaP9r45fo8\S+i!^ZQ'MUJdb)H,8hsZCa6[RU^hs5#P4^fT+rd_B'hK*'oGm;8P24X*V
%6GYGc!O*b,i,tsM69o0trqS"Z71gEcgR"#&-^@,>je!j)fec#s,EGeT=1[[OX&#djYq8]uH<p*']XAR]MIb+!5FI"1:/THfap%"C
%Fk^;Q+Gl,I@U0L+0*GZ#87K/*L?L>O"94qUXltqKbHoD^A!\H.b:EC1`dcpTLr>=^IK1Q7``-iPb<7s*6m.TO6Y8id(12aBaoX8k
%"YXDBU*,\^Tu)G3&Dfj>:[MB[(N"niI!/!aaYF0Jo*.-n$d5^f+6B:&Mc&Vi,pP4_?K_dX)'P&4=bdl@19F[,`DBl$Y/J2]kl53,
%FV)kfIBW&Nq;A6hZni`g:<#_m=P=dc\utU_e/ack_#a*[OZT?V%@'H<gf^KTiRAGJ()b(lS8="@Y-dZp9\11Ci@[_I!V2L\]CN-<
%D`E/;/^O])>ijB*U*:EXKpouTpan\UI6G7@5<L/!A>Nt<=%8oHmW!%Z']"_SkAHfc9BbEs!A=4h5V%LgdB"Mj;M!IH(!$@bPEGAu
%WU=T?CY63#qq-Ga5L7bb`_6?$?T:Y\SkF!hY&r%[f>-blli[Z6No2eSm=*?.hPoI1V#M8uO.-`jVD.4DT2hjc[0fq2P?J&GSF*H[
%<"UBA&MT)Y>(jkoR;PVH^57Ru?$PG`A%mPMWSt1fOC5.i@>?T[>4RAZl@aBJGA^DtfNE7YKe[P*L1/mYIthV1Yq/KT<O+gbTjgS_
%d2MrU!+'[:Xk"GM*Q^kgY&h1_b(2[_^V>MQ@aP:^E4eVJM/H%T,3lpH$+sJK)^D-=lAX7+1L%A3$,FQ*)Z_]k/=QboE0gg2n)hKL
%P1D^u@DER/RODTT@A%0!%@$9<<l.9c]Ya'<*:<^_&0,Xi6O3D)be-R_BR1@nO@gn`rn8=!\l.ZO-D7.TDc8A69L,:E9!=1'>MCqf
%Vo"$PRA_sGf$JpefheKF,HnP")DbpTkAG;B6-Pr`j'N&*Qp>)trZ;r9XWU\-=Y&#O]gSm`Sp-FThBc5jrQ1X9[Ff[XY<NSu=kcdj
%/F-dIkf2[+QPmC@qfp`C.6BaQf>e;ebra(PF<Ou6ZhZU)CIm%_DY^7,X1^+.bNNs;OY?i93>XZua-u=fF.!t;ojsa3PdMIE-]YC!
%B%-6R9U@R-[qGC$h\5)I"$[9cgP=lI3sRX)T/o`rPE?nDA\`N@]RMWT/I6qr"X7nGEXtXd[L`33kASFlC2Nj@aSglYra5]IO+6P&
%#c@SCfhE]kJX5;Fgr]C!h6-`J[mO_M)HHk&XYiV1,!dV_1a_Hm]'6-<bFCXfi@6%20lJ<f#-$Q%G=d"QBsV'>0W0$pAesZ#(tM\c
%@urNjUk[:OF997"(?:CNUSuqg/;7pRlTB/>OFHITp;F:8c:RXO(b2[>i91EqNZm#q@"X_iO$%;$:ltc3X?SMRKISh^3gMh;^KNS3
%.kD<ogINBCBL&`$<Z(5Cngo0sL*YNSWp;I36HIW$\iP`]=s<X0Ub1D(;P9W&$+O9Xdp=X8TMsMho[#EPkBgMh@-1L//=$_^5'E\G
%;4b#Y,YB2?ctT"nJ^R!\US!t;`9J`afqHam?'0P52Z_+"RP3ANg_lLU>m!WFFT3%\N?!JB&hq$>6b?C#.H`6f>Y3>6Af:1Hb1WpH
%;Y4BQ%3CW)+403j4^]@7Sm0EHJZncj8dS8/NK+-AA(Cat'i#+D_Bb'!%NRp[KiEF-k/gOGf5mXHmM_K@oE7S_9+#*4#L/JN<^hpc
%3'O"[DgS7q;tP942H07BKMmLClfJnP.)YB4AQl`bJiY7W'')4]%Z5WX:J9k9k.Y=OE<C"s3,`Y[%J.%"Ti[<_M;7Km(0`Dn`BSb6
%'%GeujnEbg#r(\Vq^1O).Vkn#i18e'd0+Efh85$;]1-4:(oU0>6Jj;[S5*cWPVA<CO@:>Yoh<0HPSA]RTFkK#3^Lj=PP,.7,'PeR
%mBJ[,A9j&pWY,cK+0."hE7R-^>!Xbm$.R8U+dH9rT+9M?9Z6`hWP[.e3+6[XV1mj1D=J]#9$FkW1!q^(/OEZ4Z87M@<A&=`69>3G
%b;:5TPB:L^o+D$C5H4K&?&<62;(tcu1(KMVGFNY5AHC"(4fD<2]fLr,<?]^`V#VaoNHF"7*@#hFe0)GhaIJ=1fUO*&r_P=\=nKk[
%F4oJgA3@GNELMrKW11AA)$Tq;`GnW,)LdoU8#9J4"F(OZeeWL_7LsYX<K6-`Z2+SSr7,@Wd+C(0O\qUA8@YhnSEMIcL+<q%5"e8^
%Ljip,-Rf$h\E=Jra9n&0+1l/X*<^lF""c;T9:bH6L"+[pm'^(:dLTn-NJu*')\pIE7KT_us)N``6KcCKFjb<EH-kiQj\d/0b8,qR
%eVem.0ha>(mJctGhLAre+6%I$k(4O&IrgNum=Ptl.Ji<Y%1^5d9==LNn$Qu,8cPk4!ff*1F_nJ;K`T&T;rk;13@\;U^`<@=OhZuG
%$1#:aa$HYAXWf$/,6OWtAc;c<%H>L@mnp;rNWnhn7(fHWn9a4Rcn92!!"VABhk;SC`k7Y.35fAOpjc@&6+?jGJ\&ugFJi$@;s05g
%_76n[LXpF0rK58u'SolL+\nh26u4-1L[5Y4G#^BFL5^fJ;j5C@II`Qt]iimefkEme=EdV3s.tT/(B0gX1\,2l"\AJ<eP^ls!$+EM
%GS\4`O3G[;(4HU^Ehm^cM)J,N8d"sh\,9[.qMB43aOSDLb"e8spWIR!N_P:FT7'`SpT,r,6M;i"F_pt6o(t:D98O9#N?k$-ogu_f
%.p2PnkJ`/8p^G6h'U(MdiouP5aa^"3YrSiTQ6kM!Y.Ks3V>DFFg'L<Rp(0#165K,(RuRt"J6B/Z/*AfIG?,X[9NFlgF]*pr7a#GC
%6P?Tne*)?.m$^J$m;?:"Wm#g75=PSCoR7oElAZYa8&IImBL^mO;REj[.0Bb)qZh73^IC.TC]9F,FcId*ei\R<MN%jY-^VXKi5EE@
%''iK,^t="iZ`^33K`RKh:15;l!rlPtP'Pi$/eB:aCiAJH97?NSQhP+#4i+#P%TT'`On#f>msVC1W*Dr_Efhq'e.Cs[Wp,\5KdO%F
%97r9O/2[?8_PCgu^8NAH[[3'<\KUq<k-VH'9Wa:fM[_6fncEgr;d=_"g07;AQL/1o/+O`+jEd%==d#fdkd\k=CAUTBoe#g+M`5.<
%WIC51%]qf?@pe_5\)Jr+O-kr*M:fIh(&$C;%RG<##9lj!V><RIL$`/B&n:p@QW-O')WIeYN'B%ZU/hj$PO2G##j0+T."8fbW[+dW
%-%,'ggkYTJ7Mg"p%=&9D6HbWITC;L.T)q_blaFS8'_RZafE,d<dnq\JJr$l(Bo4ml!;.&)*e!3u%SB]Ph/8k6p',IDZ@8cDK"AU.
%D[7dofjLM"Hu^XVpkrA?<1)doG^>Gh$hAg)@COqb6J8t3,m-SC*i`8*>u^G5BeiJ;-];2&q5`(ZlDQes5dAu;GdNY%-T$#>l@8B#
%IX$mq,@/V"/`<q!lj/JmGk;'j\9h2b*-"pHAuN*M]!Kc+hjhE`4YQ,$8V3J3/l,X+2Pn[COYi*22p)ec4D\,6atg=tg1B_oVES9.
%JK0$f\jpp66>Y8BH43N3T;4s"Ks6UuVQ)0>!Ns@?hF`u.\M]G]L2=;@\\-32<c,6FU4RU=hY6N<R#L*]?*d8*\Vg81`BScO[;io@
%"`;_fMHW^!5ug!EA-?nEhm[a/!hL@V;FB39L`OZPF*UEaQ]h4uC)?pK^&IfT-'7*M0D/$s#6F\$[_7Q8,T/Wi8M/?1(nqT"e.s<7
%p9(7#F&MN/c@M[8&JkfW.Vir<O$'*>8DMHIIH9\opfD/CbR@2i?bY-i#Fa06(pL&`IgC$)lL_#rS\@J6'So2HOAED`M0"`SA8OFP
%\f4>&/R(\o,T@;eoIcDP$;@q\T;c\YI&p]Ts4YboeZpF3_XiBU%rWY2%4%ZdL9@<\L&u^0Y\-G$PHr$(16O*HJ+*!2[GtkbmaKFn
%7Lq<eOmh)S`JN6lC:_mR"2i$tJL<td+WjBcXf!0KO`H-U:P'%NP][*QB7P7TA!J1Id5E026U>:LGo3LP':#1N<1PdZE:ombZ`pRI
%UFHL,Q?A'?rh>"(9D/p(Oe*t!8D18RWD'H^"+@<!ML(]_>jJ>$LoQj33Jr2q8siE=@2RNXA`LjYUf(1o-+2\Sh9En45A-c)611['
%UHWP%#dW44fYmQ/:G$XbV=Sn6\803kj_3-N0W!;<K?kTPJk!jd-JCHk,G"U-.cJfa&KIX<BNAfKPFDX*_M33"'uc#$0hI:GE\.;Y
%I5!#70HX[*2aZ'[S8iu-5Bh=\&,Qp&),lsLiGXr97;Z?nl0dtJ[?.9_Gn=ZqXNIP?n/6J%..BB_*pYMf`Pc_TJVd)1T@S8"%!be)
%ri\cb%R&'XA2[S(bEd#qr%+_AW#7RCddHqRcgFb-[!`j>lFIeNa4"H3O#ndB]=ZaO:Gg^5WBA@&eRf/^>d7foq^aYS@bRZtb^(hc
%.Cag9YeD-4XNa612*P;j\1[E)Z37m4*U-`O%j==!*eb`c4&E,"p7tF,<">nJ%rH+<Q#M0\j0&7eIbaSt6;3U,8Lt51<o6=769fcN
%m*f2[.,[@?,QkE+$.Q"P-"\3i`@0'M3NB)i,<ji*Voile9>*@MUFPO%"gJ7IY?FBgNa"C+AHaQ60uR&@W/%g,EK!XMPCfJ1Cu@oJ
%<;,VE%YouD\ThY;U`"+<iQ)q5T@BC!/>1Ghg@UPh.i,V;Biimb"r3iuI?sesGOue'$pZDm>4q):J965$ffje9`%_?ucR0<>/Z_At
%_hqS"NYlBTFpi\[U-L^Z&fg:Am>g%+@E[16&VC)V5nMj(q,WY[C[hT8`2;ggnNPZc8d=$U%U.Q$k<WRb6#WOUb\)O5DOJ=Fbp1@4
%ZUH]"QEM3%@W&:=LY)Ya1qS>Dc&<X?"\5!?7_EFJd[6n2R[)!$GuTh@E%/Zmnq;\^NI<WfQomt"+_PFQjUd*WQnC&_&T3V=##\Wt
%LWF9?NitB)*c-\"<u)PrWG<%Q=I934#S;hq_1kSo7(>.+[3]^Jk+:',Brt@")mh_)q&u>GdD`0&V^F^PmSTXVc_KO@>'@Ic\KcI"
%>3&CuNCIMq1e3-W-slL\>:r'LQ<G=%8))Q%g3DY$kVA"/V9i8-LMujA$@PM\UD9+ZBamt"l8(JH)ak;n`AC%(BJuYVGt/agJoot.
%+CGjS#t^;FRqGFQP$JD32MRQ$L9"Am#1ag8&p'"nK<4!WjO#\XU>LXbOAF+Qp[:8*N@L%840haQ=REi5DYJ#&_rt<tJQ\%K-nb5]
%K<d`qkJ:Z`qS6A=]B#o'XH<.]k=Lnj.e?2S.<D#)Jl*IQeSnhg)A?F>jMc1.a[ne)dUJUcF3_`s61C^kO+(s6EN;+NQ(olT'Td]f
%<CroP=a_;H`IKp"EMLWe)Feil<D,,&4,B]BpHT8RY9Fd\K'H_H^"C%=6cspM?WghcP#IK)c^9t&Ib]Z/6FY>?a7qO8(KBnk*hm2h
%Z.f'MAqL)pK!#f6JOEgcL00ot%h&_Z;MYFlpPLE9BPRF'cMHN8`@?AfAVp:Qk4/GFXn#XNT%dV\g3!EMc."r0?\gD2.Lt@pRPfda
%1Q@J!g14hbkeeGQRN4`ZALj04#Y(tdPH5$q.4gXOmi4ft_S"AX<q>VE+E/6QHtr05Y7Qm!d$,o/j_/@gFjG:hlXrCXA_":-l6[SY
%U=]J!P&I^XT$Gg!>jD+fr`jP2L3ffD-'MkVHnbH^5t3RE=VCJG.$]^C6P_n]#FkK4)7!5>^l.NbI;PS,aRsN*GC_%D.XS+=9X`ae
%DKM[&!A6ZVULskuJEoaWPAV^.njbHq29%*1R_HE:18N7_KKaF4Js(j^.&7WsOFXu`]ku$8;tTI?W_3rJIjj:f7MiP`jTYpo:.4]<
%)YAnIag0!k0N6S]inD!>pad*7X+Ml)Xb:Y[C_o'3_N<?NRL2Kd8(ZM[a5hJ.e.V[>1J2r#kVLJm/ktnH(H4qd\J@.XSKuHncd+5*
%[R=1`\P$@kY0P]>29Nh@@^<LuZ"-_4).go561[VP(`K*q-"9fs.-B`P+!gKAb=Xtn]ab1(\XbU%W_CO/=<Tj-&ksX.PS>]s50#QZ
%T:m-)I#2F:oC4[Scp93\I`9a0-E$CQL+pS+oR%F5-pq^u^frB8ji&a.Hh54&0X!#c?]*45XWZ/tQ?A4nKhMZY!u=lC5C1f^2l&F4
%bA3`n3>@)nIUBOl+/]eo-C9Z,(Tj/pBDmV1MiB,pc1Q]dF$P(-`WYaXXQ;/.GCZ!gBV'b^C'Y2$'LEj#@8Y@2P"2*6Fh8$,.Hqad
%d"$AddsJTm=]L:8gTaC4n>P>)Z2ng\DF-XiX1DSG!t3aTCBL3%_i["0$dm&_p7Pq'UHT6]Ph?KIKkSj89<JJ3ojBS)=YfB,E*&?I
%D>*tsCUH!7S9?q"&K>CPa<K50IVo2Anj=jgYgmo3)%rR3EIGi6b?(J9/i&nSO1@*LrS1MsTAHa0CgrH@ArpkF"[df7Hujs8RpJsO
%78V%5Zb`<(:>i3`h)Rl19nI?&9)Af0b@^8V<+V7P@@'kcAr[Ae(cJ@YGj&e(q;E\'LhX<tT;2OME6AL%BL"$AUPib:]=\Xn;_s9;
%Xr'(E=aCrgK$r"`M\82-Tk"Z;\,]X,7eegGT[C1%mW])T-L=567_+aE:DZEh3d#%X5X39:beLdHa!DEV+YX+ME]$GTdFi.=V]7&V
%.O>c`4!md]bNfWQ:0//*C:&<0'QAKs]\ESK\TC^cL5ZBM.0WcMh-&XrepqH+"3%g6/AL]F?(aEf49#)f7Ql9`VYY!6*2@$M6Q@Q`
%%W747qRD%jfHnLa&jD'TSe@>oj5*Zo/!fJPe^#ltUYJ1@jhR`)d:qDgq<6(`>0gh0S?ldM=)lBG"5TaW;Ds+MSOo*Y*==d7VK#dR
%?0`/E_2\^[2L2M$fqWkO(P3:42,F=a,TH*m-ah0K7odrA1h8un1Wsq5.Qqk/`k'^TX0sg,n@#[b'lpD*(PDe!46]u))W`E'aa=IV
%HH%ff2.c>L]:Yms[Mm4=Af)aKQ[T^:;ae,^HR#Z.DU#+<Uii,b'Qu;YLDWan\O6#pkAX?WAK=DV4gj4<3N9#=Qr<MoiGsVm1FZWc
%0,<;,H959D7`&5!9c6^q<,L"JgtM;W97LImd9AA,PsWJS3k\NRjKP,KL.[F/;>SN81bD9g)3Uc7\$in[OedK@7pOgfTe]!'8&c;!
%>D%MZPP$7[A=McY1$@99'+!>XhGEZ$:9n-S.9O$5ctA,[03@qSis[e6;2]afolF6dP1orOIuH:L[dR1,9(IP<^N@Zh+;C<j+!N;>
%?V;o<\R_7ie2CcKWbodTVDWO'Y.I#`$4$stN?aF4XG(h;S#;E=#=tLJ$p6\N8;Oq8!1g8GpCmAY>C8$][-SMUR7+%]<,[[+oj#%f
%(On`,TFK6Cg!9a!WCAl5Lb\QE2'fK!g@h90BrFEI^P;:bUN-k7lCWt"*':#.-HOpV4NhMS6g2@P8&nODBu0j/FU",S`O@SaD,F3O
%S@q(u`2LREVUgXTNRt%&nVEHL!.0f=rS6p:p)NtZB$@>TUL$Ye/#*WYKj22/$1AfpMaQ[*0>%8sdHCR(Y1GB0o%[NB]R)q_Y\8nG
%TqkYTZL6F2[9?5a-]&j]dk=$c[4oLR0ZDSa-D9fBE&G^88XV5N2PT@bbl(:Jr\Q1:H@O?r25UpJkg(-?#m>+q"I2OE.4#D1CtU9q
%QR%_!)nMQnFqAT&gS09Y6ZX7o#c`aT;O$0FJ>cbt<kUuTN4\\q`SI4A-R\5!YmF9eFVJoIBB8JWX`fI(M@PM&$n^Z)<V#92`7HjK
%ViR*P+c'QVdpt7g](.B7I9\POlB0EUoT0JJSjt@F\E$/@:+OkhEZdQ&(7#u(L0\O:Z9chZNUMHF#U7[qZ>(Nh,sh=i\i1X%O<4-D
%I>_=1itOtmM;cI7@/$A\=$_L8I9tT+k7Y<c6S<d#^\0H65t1'.ZHE$mi$bpoXrC0r@eC:fX.YSFo]^2M-HSEn0`q6]0Su'LTaFjH
%hpip8ahXD?^>^-W5d`&Hd/M94%7'_g\kN0$8WJ08EQiVH/,tu-]#?qt6crFE;D0#spAL3O[6LH+oMY+dCAJ3Ij>9:7^j]4GA%Dun
%ZU<;<!%#uM.r8LCa7[a6lkEipEB;Op@T=kJR_AU;%\@tVph-0J1Hd]J*"_fUBXe^>j4K4@!>i6!q($;?;%cQWgoQ%pW+2WM^gr%>
%HQVLO-//,Te[7;Z8E.`2M+)<mg'%(M9I^B3rF!d%2qCP&ga1O6%]-IJJ21=[6I;nuieMFc_?Q(eamG%m@kl8G:]p<Ij;Fa*8q%FT
%E7mY5hFdmT8%O6O;`ODtlHq-CrWF%?.Z7=\-3TXo_lR8jP_N06Ms"RAO@Wu0CNLXt:uEUQW8X"7IZ"Fu&]D*\P^]Mnk_a$bk$ncV
%:<*M@[OPqT;Gm*6,IWmBS^?<084\,S?;4ZVe>oi_+)"l1jW`I,)=MsNQtg%*BCOiD&ns""Lo$:^5T'53r!&4Yb&!stFr^79Oprls
%lS')8m!/6p>&.C8k0>Iu1?j0A.h'pknAW5ZUJ1AJfTT*r4op@_jfECmb!XU?qY[_*4E%39o.JO@Y'P*B'MikIcr?`B'R.!\KB8GA
%54a=-&l0fq8QZ)9ZX5`Y>MP]q.)UD+d^9#;_-*"2(V6sVA(XOYAdZ12JKMh4C(h^$m>$@"e.l.V"d</@M`9o:O]FABN_IuK,\[1-
%RgL7P,(D*k;2I$Y%8I\$HGA6Bn<]^R7)118'+%L%*:u4Kr9cdqQeugQD"?*i6OkT$?%/Xcpn86M/Vq57$^NU^O>[$A#ZZVV;EdP$
%%Q!43o=i?&M.7+kZ*RH.\AG3\7[#`K&G?aQN%RVPk1j7+np7Xb8%^l.#'Z`X]6<EgQ`oe%+R+JZcMQqah.IE57+i!aDSn`F!7M\#
%:QW?SG(AghH^@@LXt..UDYQlD,D(4F*J^^\>+k/lKb6Di:c"WR>/408p]*-H$&Je5UksX06Rm%4h(XOa0):E&g(e\sk8J6DB&:QC
%f51W#0\aA5\sNV?^W>SYa.HAQH"r2i&e<.4#_oF,X?06B"$A4u]ht`DNCJ&/ql`ckppJS]Y<.5VprW,%p:$tmn/ZT@G'5]nkXGi#
%(G-pEEC:q6Y,j(4MEqPB.$ZH\J>@%t6:BAJ,TDJ]24f5Af90EX)X#a0<j\+f>U>E$JZP$c2s5<b+%:gQDlC:4DV_(ha>DS5705?s
%W;kke)7\1&rUe?uXV@7(!P>)E@b?$+/)*Vn'(2`\Sb)7$RWD;dC=^X)S)sEj63C5L*10?CM%R=<JJJWipI<ngG;3-VB'*^%\:6[1
%Ip&YEo\[?097(R99R(rt.6Q3h&1W5J`)DkQ$T-T0JpXHuKgLF\1G<[6D>fh#qDoie<r4.@nhiZ1qlfg0=&kC!qAPW^Va#^,;W@_*
%aVnE\kA=hkF<6Bg/iAT<,Z6#ULol7=M#m0l)$.0nr[(j#_tJWSbCou3j?ARKQc0m(G:L(>kX>A_99TJ1%F.;taa(gOKO?6qBYKCN
%f(_U/.=o$#4X!_68](T0Z\AuJ0I^NG1?qF<35^TPg!!$ejsn3\SmgZ\FJOu]c`"isDVH5[#XcaX%O56O-:^-QL8rYi1O>m,Iq3X>
%(Z5:D.qC';*ISMG$Hc4XO%OU6L*Uj&X]\&r</?$4k$$e<ol%r<WigcMjE$a\#@D]19F(e?XQ&%-LcQlA2qbd]'sG:(Gm)+1%[dN-
%DjmB2:=lkTjKnR:iu(hW(#Jc=?K29+5C_;1XKPmV?hh5KGU0[@aIAH[Y9$I\i@n,Nm!L4j6\A,Z2K#!VC4k,CXZb;`\lH"RKaDk1
%N:2Or#Zo'F]YsG>/U<d@3/`+gh:tH(PjB(gQC1)KGr/##R$!5]_IGVN!bQGSC;T?b^E:$k%Gs,08"+c-b;[1<?DQC&7;2*B@@/*1
%$r&mIKNl+-?G3Bn)A]2D('J1S0TJ/-aD!WrLfpFOOY3";H$h"Z*o`nrpDL'A_Bb?GY6u`kRr_^!Y<<&&E:F;%FDNC($DZ33-c`qD
%R"X+a/m3'-ds57H;:6ebk,:$^I$uHqeUAA+V!P`N%0h0O%"`[-JKUV>RI,QtX&*56B]s`9Cgk+%E&CF/@H)2*.b\l_?J4YkpPDUU
%WZq*D=ZXQr$JK-'e"%fn-/H:6gm2dR<55gapSo"@H1)+N]hOMU4^8tBCPOI/nTnm&-Z(`aBtX&Bds>Yc?Aj?*!5"H$jC-5P^$n!"
%nCcq[J4+.(g:!fl^7]ep.U<M$(/KBLQr`hkPZtPZ!$V18L1=[nTqn*Z3P`Uq%e^`U^lEBg\T77dJu4J\3lT8[Yb![<<?E_*>?d:%
%8<1G!B?McUC129og*Q%PHD_g!G*g7pjt)b.O(B,tBdZ!H6,WUak/23R/gOFUh?aUpAe;X1P>MnTdEA<ik[RK$O6sn\S!Qs6WiQ]p
%46+$4a63Q>#8K#4ncJ@B=$*Pq?##R'gJI;#!Jm&9A\T2u[HaTH1#%P"/9r"eYb=eneRF+U/_05*b"3tG`HI";>I$<iHZ)t/6(b&t
%)5oQ4=.e\%6OpGd7gejYSR&s.%Dq"X*,^&GZJfT8GMg=PbfjhG5;-O/3*%l/W':f[TDHX_NHYHd9W$M14G+5<c.'@'/Vgk]6/ft`
%)pAY+ZsZsVa@q\iNtY6@#R4O18/X1(X<T^]5V[pXfgjX;DnB_?>+B??ZiZmD6CW7aD,?ZKM&D)f/ZL[+]<OgP.M0Q^3Hi:+;Ou#_
%-Yi<:5(.:07S$%&XJeWg6J<hKQBg=S(Men'E\5LD0d1[Mmc6"3HON*5eZcg&`r@Ks(0=?EHb!H\';s?h<EoqmSI-=TOQ@O&*HEKd
%aPMrJB7tknZm<g(_aEreP,e,HKJF5Ld4NP!+n82Mn1u(`03<bhTL[%]L@V`BCW,W3UeT<F"1Yabi]cV8aEK%cOf7F+6LJab=+.01
%bTWSpK8@E#<lPn2n5G8QHn*C6hI;hggYA+W1NnIP_Q6!0,:SjG$_iuN)6h-8&jtuR1>K??$%Vo$7MJThY/U)b_O]ERog#,c%p=.2
%j\:ff4^slC'C+nQ:ZKF`LT!C4q!tWDm2J/c!C$)%IbW\h%`fVsFJ*?-;!_&b9u(q@7%A%WB7"Y=`Fo`d]+>]PMq2bhUmck\.,kag
%5'Z^>qgrHoD^U'#f,'C'6EbqZh`(oSU)%YK&rlRm`Fu1X.MfP^7)<=h)sB\Nol>Po^]#IC.tE&QZ31T:^O,<=G,WO!Ula))klDC\
%d'CS=/j!HBA\7MG$1q.FV;<`iW4`8&Wpim@ML`d@Y3%#tecWHPR%2O#P^*-jf'8HBS<C]o"*L'\]VV$=mD*A"*lhH?02o/cF1]3?
%?hK7^)>emYS):pWb<Q%"s8,A$5qT]h<_#(j4aP?UD;PtPWX9i+g4QaR3m9[&P>f/)3\@TS.["rK%IWsq9AsrunHmqj6m"-smJ;N1
%ffVRPps'5%lrZkO<Bmh',gMr67"JB2/tp<#q9I+u(V8H=P'X9IY+T]WAX/(M"B`@`#W>N(*%M_Dg5*C4b&+sA,l1LH2?SNDCZOR)
%(ck[28m]B#X.Htto-E3Ib=@O?Dm+uI)YK+1^l8Y&g;LiCoP8a78@9QAQWe"2CJ\3Y0*+*V8c]Vim)TP,O3R.mXZi7QR7uXeM,-0?
%iHAeLG\9Ni2:VQi0Rap/Y@"G^h6E%MXTcEt:]a^u()a:U"ZsZ0=tb@)!`DZ.jGMu`mPe:DH>'Y+kD9\tMajriP_g)!b3QAa?GF,5
%;^LIYZ5O$8ER<4sLA4U$TI2WflTe6g*7Dcih)\)$Vhe$BE:&t_A5>Lf&=&CA2rmpA];cdSitX?qHXEoGV_QaK4$*EZ;M0J7#-r77
%\@^aU0,gYEPnlPrY:2]sH<t;X7V0[U3@P@%bn>0CAc%51V1>Enf?Y,dXsa=5McCSb.+'PN9n>jt[lRkRal%9RgVI]1[u6<]Ss&"(
%[lI@G*R6iConrY4I6@D7^sB3N%M-mUEjX)\[,AeXVjtmoZOcjkVjoW#c"i<&_<*00a5eoL\.>@=UsGFFS5TXf)J3U-5!OdZHC3bK
%K1]6NA"LUqUB<PQgF#p3H0'o*58SLkF_)rH4VsQIr@%CuR+EEC3ZP7q"cl$IOjKO%ZKm[r0V*'TauRJD]!5LPa@==O\#&g\AL?c_
%o*UdM(2%bgf<i\d&A3!#UWOk[#SNmEb7j4/%*b#G.?\#C`/L#4cXLCJV@qZV.N:2\SI_KF)k)k7cH2qm7)H%Qco#^dD2j/0/'mJO
%V21qD`+l`L+ob^GliMbPR+uMVN14B<)Ck4b_0'dUMPjM1&6E6BbV^m)+f<=.B0,MPe5;/-OKc*C7Z:r_70l^sRAS9AMlkKb]!iKp
%@I;&e[]7)c+LsiMZ6Sqb'*hQR8lqAEi-;fIh(OII'jnL!5?Ol,>'Q``;G@,Se]=&t;`lB[.(8UY%#htfQL.k#%5[QF#;":!3C)hc
%/nOKf(8Tm9eK:@)H0R6Y?u!e=GjPT3K6=)%".(1b)FN*dqBE:A:LUCpT01+#QLn>mH]9N1e;LiOdEcG@7)QUVfoj5=CSt"CYB!*D
%WI[?>N[A.hK>gZ.)V7qGLr.X;c3kGJ6EjH^^d9[U.kg;o$EE?CneYE;>#,UD4L'@9C-=YVdlOB/AGoCV`Y0MSaQ98Bl30rN&_pPG
%7L)WklMY8f`Ur=?qkRF6?s#,`6n!1_ErP@D'1ccgPcm3Ka5(;(f-/I&RHl!5P[j*pndA5dZ.Ms)0K0T9(u=ejR7iC10ir0C3JWY6
%_QS5)L+&l/(Y,;9>.4hR12L`T0I=ah5sZaf-?-,L<?&'()SKCWmA*RLGHb.Mf^QtUae:BDh5\Yn/="Q\KeW*KGP`[o7_+hB-`mcW
%72I0W?cflT*f[4g/CkH[XZbg_hPr(Y,@c]gR$O^KdCZ$AGSeVEm^F0f.*i'o["YV1^W4o!ftR]=2&@&]`VhM/(33G\DB(W1FAV!A
%R>&gCNud'q8#rEU,Q2fLkBHb<EtiaZDdR'J9L`?t+Ga84n#/.W..Zd2?bFdgYd:B^]e]Kkea6M[[0#;8:$!uCbDYs1ouZE-]B6/E
%5FQ'[\<mgb;jt%;Y*)6gVpo1-(K_2NU%a!3C!G!..FqDC<cY'n29>u=/!B+^YS#4AGT$o^0,QWg5#*Gk71fRi;o2OC2L5b]>1kqg
%(Loum&;TBPih8#dVYkH>oh<hM\9bs9C*@VG[4mhi_Q=de)hD7j;JKXh2B>6$pD]U1&#+CuRlg<&E_*8_4nPElq2m?;@_80m[@ha!
%Gdu`VJW>?h7q#!G[5f6nhZ1%)r7OiR,lRT#3Nk$UfU)eA]UM]hDbre('0TK!-56%e2^urem%)Knd]NYqZiBBogIYF^:@`Amk>Bl$
%-UD/]HAKt",kTt4R""t=6M'r,GI5h;ZG#WQ4\Q/PK>$T0.`"VR6^<WjA$LIbocZpQH:pnh2`O2C1Cq8N----T(j#q$?B@Pt8D0'<
%k*TgR_:MMn^O78P`Nh].1b/cb6:L9B6C_J,6OALOoD[u<>VPrYYBTtV8JJts\60V)$d8pA=kAdL=(=Rc?XZ&DLKCL!gO@ZQ/U!,:
%..iiE.ONS$U0)U**l/r!l%3;0kaJT7&JcaqQhWkk;hh03A?nWCdm[l,Q:m.U\VGMip>s0fA@Omq%/o<!WN/q:mWF;FbtJ@O6?q/C
%)(]NO.eVPaK\M3g`)'#],SP64DGWV@[=glk,l<_4DEhHSb^3)hZAkY*JWil(IHD/,W(O"=1:&";Hn+`b%.>G*\FQc!*mtkWHBQ)0
%$+(<X3"iOD?VPmO!l4K![jaS&d7s#J*:OYo2\S0\C>c(F/<7X_U>RVrS!@t_F(K`SY\19;Q&1(40VE`7't6*s*#+%t.cjkVhAc^5
%KmI3#M$3b0Af(gq/,pi54-TB#J.#s9dd<\mBdeoo2JH9kjLsaI2H3.lo%5d_eBa4Z0),`,;F_+R$)2I<bW^mn@$0V)0#op.KHtB?
%L2sO>"G)qM!kt_gNpTB\EK7FX(<#71lbW!&-5=EQ*Z[lk+NG.\3\<:q]FAAJ#qo+o@uH=n@a&n0T.)*/^bmep]A7kPL^(\koQK;c
%Ftj;1#iG.<,672H^63j@+X)lsMg6R6HU+\rg?2U-im70T"4mnWb"D8E3NIC=?O>;)E`i01")'9U))ofpKdKO"jo=Cn*5#\U^Ps!C
%d'4HU,:'%00r#R;`U]hNRF^GXL.#)VR0]VEPTohR[md:XTGeXAaD,>0ePXOp2;EY0`K+)GH111n*5\$q/XI5,,7m1mnscp,@kLJ(
%WI/C4c-?BMI<oRC=g;?E*p#Q<ZHRs&l:&beE67$<90*%OZk)Vb7_ln=kikS$PV[k!K=\VE>1AK#@E``)[q5);q]iq[e6bXsR]<Hi
%b\BW@)R9`l`=fmtoVgBkRY_a&Bi%k>'4PCQ\V0B1(^ifZDD@lHR%\*M@okM5ZCFCFl*k[lP!E@-RMtaWe?%m\>#;2gM+1E,F>fp2
%a[fEkil2I0ZZ=Ce$<EVWS9@nZ^lU3ln(2:@0NP2(q2/CJ+h]Vn3>PktD\h+pMPnliEdgpceB#(5a0`-O*,85p)V,,B^0Xa:6#YgG
%e0al(Vf'jam$gYB7oHp"#CHdPcQc^?.=e#GmAkFp1A;feaAeh?2:iRPeJk<GLJiXjH]HX=A%*7hW>]g9Xj5Qg7rgOO5'M[DGP$0;
%&<9qD!l?;B_`7Nm9$:0)B63k(_c6\ZmV<2YEcD5.3D2V>"`]A'\/\nkp#e@Ug@_h6c;-)rHb,$tDVt`N?DBta8hc"uL&`pi0cZhH
%T(o^-a&$'TIMPS0.?f/"Fi6%S'SYM%9W[Z6g[YZA38c.C;/(%HF-n*lZ;]Tu>2`Mj6(?2Ag,aPq7$gr*/D^)O:!P1!:CijpZ'"=.
%1<7Z'C>0t,b@<Tu-Cmbp@ccC?KmbLtUlLRXJ7iZgb*n:fU_>n6khR2(M\WS.4J]!$6\A,g5L-u5:VQqjY[N/.I$,\2Di.Z*D0f_D
%iqK/FUP&YD-7W_oj[Z]W-Lh=l8BM/FQWI<;@'OVceU[pRM=%))@kgf>5%hK)/p*XL1(`t:\p\LYJ`b/,Q>6eBZ9iRs`S%PKYU;tp
%Ku+`W*#VWfS=0Z4]NU7aC<EfZ))'QXO)bUuCHTBh'Eq+S0`1#oLkPZ'r4#W7qYeQcTA8(=EmsSgb[FF_\#Bt=[#'I(\]@T)^kQUN
%f"5H94ca?RL]Z0_+ME4X+[sI6cc_BLRPr;mgXCm.e8Org7?C)`Fu<Eg6d9(c8KJVhcqV/,jZTo<M"ErO!5J0b0YU,EgFeaIhPEhc
%,J5"..$cb/jrIE.5phg\9`+TR9QmaD*nB9eU(YF=c`OGdEONc]*,<Y=%7$ke7bCdU86a_i`"(UB99f%3<1XgeOPd`m=_^Rlhtg(J
%+.tlZ'PiR$Z8CGAI[;I-M7/lNi`WI0*]0.^%'3A=&ZuKqC-8sDbOa"VeH@!<&<p'YJpG2Am2r+"I<k$h\,3\8R3`<nSo\16!G!;?
%Bnj!u:*gI:)=&h^3$VAM#>N]I-m+<i@O0Q=8?c5Bm0jUlLgJl%'F/VXr2s,HqD^<u,PQSo$O`\)X[6(96meQ2,5lIleH!4[@Z(eG
%,'2^>!;'h-gtVdop[1NeC#AO->8AG%[^V2$.IC#tIH@QFm_)W&2_-4EcIT]AaBmlR-@>fjjLq?/!cqi7<te4ob%g=O:+'r'EB(<^
%0WL")is7gXMJt1I%At1W"Kmr6-b:<o5\4go_Q1+)[]"O!B(6.$11?IN-FEt'2s"`l?f(.A8_@OK9;sibUD.(<]U)Pf()>BBl.OaO
%<CnMno_qFqs(*f&aIf70fQHDO_C`,'bH"T%8hlK@b/3jo%Vjp.]O'`Bj2"T8LPGZj?X?<Ss7Pm>^APUXs-hiqo[=>!%12Ie=U5?%
%O8RklrdFgu5Q("hJ,K:q5Q(<D\(ADSs7lPb55`ljhuC`HIe`HB^\Q>ShuDfUbP+7!^or.\YNqg`-iW)&s8MVN+'sEmpHSZg,91ee
%i1"Zan.1$CgY_oNQo=3/~>
%AI9_PrivateDataEnd
